!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
+	modifyNodeLayout.rb	/^	def +(scalar)              \\n$/;"	f	class:Coordinates
-	modifyNodeLayout.rb	/^	def -(scalar)              \\n$/;"	f	class:Coordinates
APPLY_RHO0LB	NodeCalculator.hh	691;"	d
APPLY_RHO0LB	NodeCalculator.hh	738;"	d
ASSERT	Exceptions.hpp	26;"	d
ASSERT	Exceptions.hpp	32;"	d
ASSERT	Exceptions.hpp	40;"	d
AXIS_HPP	Axis.hpp	2;"	d
AllTypes	LatticeCalculatorTest.cc	/^class AllTypes$/;"	c	file:
AllTypes::modify	LatticeCalculatorTest.cc	/^		static void modify( NodeLayout & nodeLayout )$/;"	f	class:AllTypes
ArrayType	VtkTypes.hpp	/^		typedef vtkDoubleArray ArrayType ;$/;"	t	class:microflow::VtkTypes
Axis	Axis.hpp	/^enum class Axis$/;"	c	namespace:microflow
B	Direction.hpp	/^constexpr Direction::D   B   = Direction::BOTTOM ;$/;"	m	namespace:microflow
BASE_IO_HPP	BaseIO.hpp	2;"	d
BITSET_HH	BitSet.hh	2;"	d
BITSET_HPP	BitSet.hpp	2;"	d
BITS_PER_BASE_TYPE	NodeType.hpp	/^		static constexpr unsigned BITS_PER_BASE_TYPE = $/;"	m	class:microflow::NodeClass::NodeType
BITS_PER_BOUNDARY_DEFINITION_INDEX	NodeType.hpp	/^		static constexpr unsigned BITS_PER_BOUNDARY_DEFINITION_INDEX = 6 ;$/;"	m	class:microflow::NodeClass::NodeType
BITS_PER_NODE_TYPE	NodeType.hpp	/^		static constexpr unsigned BITS_PER_NODE_TYPE = BITS_PER_BASE_TYPE + $/;"	m	class:microflow::NodeClass::NodeType
BITS_PER_PLACEMENT_MODIFIER	NodeType.hpp	/^		static constexpr unsigned BITS_PER_PLACEMENT_MODIFIER = $/;"	m	class:microflow::NodeClass::NodeType
BOTTOM	Direction.cpp	/^constexpr Direction::D Direction::BOTTOM ;$/;"	m	class:microflow::Direction	file:
BOTTOM	Direction.hpp	/^		static constexpr D BOTTOM = 0b00110000 ; \/\/ z = -1$/;"	m	class:microflow::Direction
BOTTOM	NodeType.hpp	/^	BOTTOM = 5,$/;"	m	class:microflow::NodeClass::PlacementModifier
BOUNCE_BACK_2	NodeBaseType.hpp	/^	BOUNCE_BACK_2 = 2,$/;"	m	class:microflow::NodeBaseType
BOUNDARY	NodeType.hpp	/^	BOUNDARY = 2, $/;"	m	class:microflow::NodeClass
BOUNDARY_AT_LOCATIONS_HPP	BoundaryAtLocations.hpp	2;"	d
BOUNDARY_DEFINITIONS_HH	BoundaryDefinitions.hh	2;"	d
BOUNDARY_DEFINITIONS_HPP	BoundaryDefinitions.hpp	2;"	d
BOUNDARY_DESCRIPTION_HH	BoundaryDescription.hh	2;"	d
BOUNDARY_DESCRIPTION_HPP	BoundaryDescription.hpp	2;"	d
BOUNDARY_MARKER	NodeLayout.cpp	/^constexpr const enum NodeBaseType NodeLayout::BOUNDARY_MARKER ;$/;"	m	class:microflow::NodeLayout	typeref:enum:microflow::NodeLayout::	file:
BOUNDARY_MARKER	NodeLayout.hpp	/^		static constexpr const enum NodeBaseType BOUNDARY_MARKER = NodeBaseType::SIZE ;$/;"	m	class:microflow::NodeLayout	typeref:enum:microflow::NodeLayout::NodeBaseType
BaseCalculator	NodeCalculator.hpp	/^							BaseCalculator ;$/;"	t	class:microflow::NodeCalculator
BaseClass	WriterVtk.hpp	/^		typedef VtkXmlWriterClass BaseClass ;$/;"	t	class:microflow::WriterVtkBase
BaseType	LinearizedMatrix.hpp	/^	private: typedef LinearizedMatrixBase< T, Storage >  BaseType ;$/;"	t	class:microflow::LinearizedMatrix
BaseType	LinearizedMatrix.hpp	/^	private: typedef LinearizedMatrixBase< T, StorageInKernel >  BaseType ;$/;"	t	class:microflow::LinearizedMatrix
BaseType	TileLayout.hpp	/^	private: typedef TileLayoutBase<StorageInKernel> BaseType ;$/;"	t	class:microflow::TileLayout
BitSet	BitSet.hpp	/^class BitSet$/;"	c	namespace:microflow
BoundaryAtLocations	BoundaryAtLocations.hpp	/^class BoundaryAtLocations : public BoundaryDescription$/;"	c	namespace:microflow
BoundaryAtLocations::getFileNames	BoundaryAtLocations.cpp	/^getFileNames() const$/;"	f	class:BoundaryAtLocations
BoundaryAtLocations::loadCsvFile	BoundaryAtLocations.cpp	/^loadCsvFile (const string & filePath)$/;"	f	class:BoundaryAtLocations
BoundaryAtLocations::loadLocationFiles	BoundaryAtLocations.cpp	/^loadLocationFiles (const string & directoryPath)$/;"	f	class:BoundaryAtLocations
BoundaryAtLocations::readElement	BoundaryAtLocations.cpp	/^readElement (const string & elementName, istream & stream)$/;"	f	class:BoundaryAtLocations
BoundaryDefinitions	BoundaryDefinitions.hpp	/^class BoundaryDefinitions$/;"	c	namespace:microflow
BoundaryDescription	BoundaryDescription.hh	/^BoundaryDescription()$/;"	f	class:microflow::BoundaryDescription
BoundaryDescription	BoundaryDescription.hpp	/^class BoundaryDescription$/;"	c	namespace:microflow
BoundaryDescription::read	BoundaryDescription.cpp	/^read (std::istream & stream)$/;"	f	class:BoundaryDescription
BoundaryDescription::readElement	BoundaryDescription.cpp	/^readElement (const string & elementName, istream & stream)$/;"	f	class:BoundaryDescription
BoundaryProcessor	LBMOperatorChooser.hpp	/^class BoundaryProcessor$/;"	c	namespace:microflow
CALCULATOR_HH	Calculator.hh	2;"	d
CALCULATOR_HPP	Calculator.hpp	2;"	d
CHECKPOINT_SETTINGS_HPP	CheckpointSettings.hpp	2;"	d
CLASSIFICATOR_BOUNDARY_AT_LOCATION_HPP	ClassificatorBoundaryAtLocation.hpp	2;"	d
COLLISION_MODELS_HPP	CollisionModels.hpp	2;"	d
COLORED_PIXEL_CLASSIFICATOR_HPP	ColoredPixelClassificator.hpp	2;"	d
COLORED_PIXEL_CLASSIFICATOR_TEST_HPP	ColoredPixelClassificatorTest.hpp	2;"	d
COLOR_ASSIGNMENT_HH	ColorAssignment.hh	2;"	d
COLOR_ASSIGNMENT_HPP	ColorAssignment.hpp	2;"	d
COMPARE	NodeFromTileTest.hpp	27;"	d
COMPARE	NodeFromTileTest.hpp	41;"	d
COMPUTATIONAL_ENGINE_HPP	ComputationalEngine.hpp	2;"	d
CONCAT2	macros.hpp	5;"	d
CONCAT3	macros.hpp	6;"	d
CONCAT4	macros.hpp	7;"	d
CONCAVE_EXTERNAL	PackedNodeNormalSet.hpp	/^			CONCAVE_EXTERNAL = 0 ,$/;"	e	enum:microflow::PackedNodeNormalSet::EdgeNodeType
CONSTEXPR	cudaPrefix.hpp	32;"	d
CONSTEXPR	cudaPrefix.hpp	36;"	d
CONVEX_INTERNAL	PackedNodeNormalSet.hpp	/^			CONVEX_INTERNAL  = 1 ,$/;"	e	enum:microflow::PackedNodeNormalSet::EdgeNodeType
COORDINATES_HH	Coordinates.hh	2;"	d
COORDINATES_HPP	Coordinates.hpp	2;"	d
COPY	NodeFromTile.hpp	/^	COPY$/;"	e	enum:microflow::DataStorageMethod
CORNER	PackedNodeNormalSet.hpp	/^			CORNER           = 2 ,$/;"	e	enum:microflow::PackedNodeNormalSet::EdgeNodeType
CORNERS	Direction.hpp	47;"	d
CORNERS	Direction.hpp	61;"	d
CORNER_ON_EDGE_AND_PERPENDICULAR_PLANE	NodeType.hpp	/^	CORNER_ON_EDGE_AND_PERPENDICULAR_PLANE     = 12,$/;"	m	class:microflow::NodeClass::PlacementModifier
CUBOID_HH	Cuboid.hh	2;"	d
CUBOID_HPP	Cuboid.hpp	2;"	d
CUDA_CHECK	gpuTools.hpp	24;"	d
CUDA_PREFIX_HPP	cudaPrefix.hpp	2;"	d
CXX	Makefile	/^CXX = nvcc -Xcompiler="-fpermissive"/;"	m
Calculator	Calculator.hh	/^Calculator(DataType rho0LB, $/;"	f	class:microflow::Calculator
Calculator	Calculator.hpp	/^class Calculator$/;"	c	namespace:microflow
CalculatorType	LatticeCalculator.hpp	/^		typedef Calculator< FluidModel, LatticeArrangement, DataType, StorageOnCPU > CalculatorType ;$/;"	t	class:microflow::LatticeCalculator
CalculatorType	LatticeCalculator.hpp	/^		typedef Calculator< FluidModel, LatticeArrangement, DataType, StorageOnGPU > CalculatorType ;$/;"	t	class:microflow::LatticeCalculator
CalculatorType	NodeCalculator.hpp	/^		typedef Calculator< FluidModel, LatticeArrangement, DataType, Storage > CalculatorType ;$/;"	t	class:microflow::NodeCalculatorBase
CalculatorType	TileCalculator.hpp	/^		typedef Calculator<FluidModel, LatticeArrangement, DataType, StorageOnCPU>  CalculatorType ;$/;"	t	class:microflow::TileCalculator
CheckpointSettings	CheckpointSettings.hpp	/^class CheckpointSettings$/;"	c	namespace:microflow
ClassificatorBoundaryAtLocation	ClassificatorBoundaryAtLocation.cpp	/^ClassificatorBoundaryAtLocation (string pathToGeometryDirectory)$/;"	f	class:ClassificatorBoundaryAtLocation
ClassificatorBoundaryAtLocation	ClassificatorBoundaryAtLocation.hpp	/^class ClassificatorBoundaryAtLocation$/;"	c	namespace:microflow
ClassificatorBoundaryAtLocation::ClassificatorBoundaryAtLocation	ClassificatorBoundaryAtLocation.cpp	/^ClassificatorBoundaryAtLocation (string pathToGeometryDirectory)$/;"	f	class:ClassificatorBoundaryAtLocation
ClassificatorBoundaryAtLocation::getBoundaryDefinitions	ClassificatorBoundaryAtLocation.cpp	/^getBoundaryDefinitions() const$/;"	f	class:ClassificatorBoundaryAtLocation
ClassificatorBoundaryAtLocation::setBoundaryNodes	ClassificatorBoundaryAtLocation.cpp	/^setBoundaryNodes (NodeLayout & nodeLayout)$/;"	f	class:ClassificatorBoundaryAtLocation
Clock	PerformanceMeter.hpp	/^				typedef std::chrono::high_resolution_clock Clock ;$/;"	t	class:microflow::PerformanceMeter::Measure
Collider	LBMOperatorChooser.hpp	/^class Collider$/;"	c	namespace:microflow
CollisionModelBGK	CollisionModels.hpp	/^class CollisionModelBGK$/;"	c	namespace:microflow
CollisionModelBase	CollisionModels.hpp	/^class CollisionModelBase$/;"	c	namespace:microflow
CollisionModelMRT	CollisionModels.hpp	/^class CollisionModelMRT$/;"	c	namespace:microflow
ColorAssignment	ColorAssignment.hh	/^ColorAssignment() : BoundaryDescription()$/;"	f	class:microflow::ColorAssignment
ColorAssignment	ColorAssignment.hpp	/^class ColorAssignment : public BoundaryDescription$/;"	c	namespace:microflow
ColoredPixelClassificator	ColoredPixelClassificator.cpp	/^ColoredPixelClassificator( std::string pathToColorAssignmentFile )$/;"	f	class:microflow::ColoredPixelClassificator
ColoredPixelClassificator	ColoredPixelClassificator.hpp	/^class ColoredPixelClassificator$/;"	c	namespace:microflow
ComputationError	LatticeCalculator.hpp	/^class ComputationError$/;"	c	namespace:microflow
ComputationalEngineCPU	ComputationalEngine.hpp	/^class ComputationalEngineCPU$/;"	c	namespace:microflow
ComputationalEngineGPU	ComputationalEngine.hpp	/^class ComputationalEngineGPU$/;"	c	namespace:microflow
ConstIterator	LinearizedMatrix.hpp	/^    typedef typename Storage<T>::const_iterator ConstIterator;$/;"	t	class:microflow::LinearizedMatrix
ConstIterator	NodeLayout.hpp	/^		typedef LinearizedMatrix< NodeType >::ConstIterator ConstIterator ;$/;"	t	class:microflow::NodeLayout
ConstIterator	TileLayout.hpp	/^		typedef TileIterator ConstIterator ;$/;"	t	class:microflow::TileLayoutBase
ConstIterator	TiledLattice.hpp	/^		typedef TileIterator ConstIterator ;$/;"	t	class:microflow::TiledLattice
Coordinates	Coordinates.hpp	/^typedef UniversalCoordinates <size_t> Coordinates ;$/;"	t	namespace:microflow
Coordinates	modifyNodeLayout.rb	/^class Coordinates \\n$/;"	c
CreateSimulationEngineMethod	SimulationEngine.hpp	/^typedef SimulationEngine * ( * CreateSimulationEngineMethod )$/;"	t	namespace:microflow
Cuboid	Cuboid.hh	/^Cuboid( unsigned xMin_, unsigned xMax_,$/;"	f	class:microflow::Cuboid
Cuboid	Cuboid.hpp	/^class Cuboid$/;"	c	namespace:microflow
D	Direction.hpp	/^		typedef PackedDirectionVector<DIRECTION_TYPE>::InternalStorageType   D ;$/;"	t	class:microflow::Direction
D3Q19	Direction.cpp	/^constexpr Direction::D Direction::D3Q19[]    ;$/;"	m	class:microflow::Direction	file:
D3Q19	Direction.hpp	/^		static constexpr D D3Q19[] = { STRAIGHT, SLANTING } ;$/;"	m	class:microflow::Direction
D3Q19	LatticeArrangementD3Q19.hpp	/^typedef LatticeArrangement<3,19>    D3Q19 ;$/;"	t	namespace:microflow
D3Q27	Direction.cpp	/^constexpr Direction::D Direction::D3Q27[]    ;$/;"	m	class:microflow::Direction	file:
D3Q27	Direction.hpp	/^		static constexpr D D3Q27[] = { STRAIGHT, SLANTING, CORNERS } ;$/;"	m	class:microflow::Direction
D3Q27	LatticeArrangementD3Q27.hpp	/^typedef LatticeArrangement<3,27>    D3Q27 ;$/;"	t	namespace:microflow
DATA_FLOW_DIRECTION_HPP	DataFlowDirection.hpp	2;"	d
DEFAULT_3D_TILE_EDGE	TileDefinitions.hpp	11;"	d
DEFINE_VTK_ARRAY	WriterTest.cc	102;"	d	file:
DEFINE_VTK_ARRAY	WriterTest.cc	137;"	d	file:
DEFINE_VTK_ARRAY_3D	WriterTest.cc	106;"	d	file:
DEFINE_VTK_ARRAY_3D	WriterTest.cc	136;"	d	file:
DEVICE	cudaPrefix.hpp	19;"	d
DEVICE	cudaPrefix.hpp	8;"	d
DIRECTION_HH	Direction.hh	2;"	d
DIRECTION_HPP	Direction.hpp	2;"	d
DIRECTION_TYPE	Direction.hpp	156;"	d
DIRECTION_TYPE	Direction.hpp	18;"	d
DISABLE_COMPILER_WARNING	DirectionTest.cc	11;"	d	file:
DISABLE_COMPILER_WARNING	LatticeArrangementD3Q19Test.cc	15;"	d	file:
DISABLE_COMPILER_WARNING	LatticeArrangementD3Q27Test.cc	14;"	d	file:
Data	Tile.hpp	/^		enum class Data$/;"	c	class:microflow::TileBase
DataFlowDirection	DataFlowDirection.hpp	/^enum class DataFlowDirection$/;"	c	namespace:microflow
DataStorageMethod	NodeFromTile.hpp	/^enum DataStorageMethod$/;"	g	namespace:microflow
DataTypeArray	Tile.hpp	/^		typedef DataType DataTypeArray [Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
DataTypeType	NodeCalculatorTest.cc	/^		typedef double DataTypeType ;$/;"	t	class:TestNode	file:
DataTypeType	Tile.hpp	/^		typedef DataType           DataTypeType ;$/;"	t	class:microflow::Tile
DataTypeType	Tile.hpp	/^		typedef DataType DataTypeType ;$/;"	t	class:microflow::TileBase
DataTypeType	TiledLattice.hpp	/^		typedef DataType DataTypeType ;$/;"	t	class:microflow::TiledLattice
DefaultNodeType	Tile.hpp	/^									DataStorageMethod::REFERENCE> DefaultNodeType ;$/;"	t	class:microflow::TileBase
DefaultValue	Settings.hpp	/^		enum class DefaultValue$/;"	c	class:microflow::Settings
Direction	Direction.hh	/^Direction( Direction::D direction )$/;"	f	class:microflow::Direction
Direction	Direction.hh	/^Direction()$/;"	f	class:microflow::Direction
Direction	Direction.hpp	/^class Direction : private PackedDirectionVector<DIRECTION_TYPE>$/;"	c	namespace:microflow
DirectionIndex	Direction.hpp	/^		typedef unsigned DirectionIndex ;$/;"	t	class:microflow::Direction
DontSaveRhoU	kernelTileGatherProcessBoundaryCollide.hpp	/^class DontSaveRhoU$/;"	c	namespace:microflow
E	Direction.hpp	/^constexpr Direction::D   E   = Direction::EAST ;$/;"	m	namespace:microflow
EAST	Direction.cpp	/^constexpr Direction::D Direction::EAST   ;$/;"	m	class:microflow::Direction	file:
EAST	Direction.hpp	/^		static constexpr D EAST   = 0b00000001 ; \/\/ x = +1$/;"	m	class:microflow::Direction
EAST	NodeType.hpp	/^	EAST   = 3,$/;"	m	class:microflow::NodeClass::PlacementModifier
EB	Direction.hpp	/^constexpr Direction::D   EB  = Direction::EAST + Direction::BOTTOM ;$/;"	m	namespace:microflow
EMPTY_TILE	TileIterator.hpp	/^constexpr unsigned int EMPTY_TILE = std::numeric_limits<unsigned int>::max() ;$/;"	m	namespace:microflow
ET	Direction.hpp	/^constexpr Direction::D   ET  = Direction::EAST + Direction::TOP ;$/;"	m	namespace:microflow
EXCEPTIONS_HPP	Exceptions.hpp	2;"	d
EXPANDED_NODE_LAYOUT_HH	ExpandedNodeLayout.hh	2;"	d
EXPANDED_NODE_LAYOUT_HPP	ExpandedNodeLayout.hpp	2;"	d
EXTEND_TO_FULL_TILE	TileLayout.cpp	23;"	d	file:
EXTEND_TO_FULL_TILE	TileLayout.cpp	36;"	d	file:
EXTERNAL_CORNER	NodeType.hpp	/^	EXTERNAL_CORNER                            = 10,$/;"	m	class:microflow::NodeClass::PlacementModifier
EXTERNAL_CORNER_PRESSURE_TANGENTIAL	NodeType.hpp	/^	EXTERNAL_CORNER_PRESSURE_TANGENTIAL        = 11,$/;"	m	class:microflow::NodeClass::PlacementModifier
EXTERNAL_EDGE	NodeType.hpp	/^	EXTERNAL_EDGE                              = 7,$/;"	m	class:microflow::NodeClass::PlacementModifier
EXTERNAL_EDGE_PRESSURE_TANGENTIAL	NodeType.hpp	/^	EXTERNAL_EDGE_PRESSURE_TANGENTIAL          = 8,$/;"	m	class:microflow::NodeClass::PlacementModifier
EdgeNodeType	PackedNodeNormalSet.hpp	/^		enum EdgeNodeType {$/;"	g	class:microflow::PackedNodeNormalSet
Empty	kernelTilePropagate.tcc	/^class Empty {} ; $/;"	c	namespace:microflow	file:
Empty2	kernelTilePropagate.tcc	/^template <class,class> class Empty2 {} ;$/;"	c	namespace:microflow	file:
ExpandedNodeLayout	ExpandedNodeLayout.cpp	/^ExpandedNodeLayout( NodeLayout & nodeLayout )$/;"	f	class:microflow::ExpandedNodeLayout
ExpandedNodeLayout	ExpandedNodeLayout.hpp	/^class ExpandedNodeLayout$/;"	c	namespace:microflow
F	NodeCalculator.hpp	/^	F,$/;"	m	class:microflow::WhereSaveF
F	Tile.hpp	/^			F,$/;"	m	class:microflow::TileBase::Data
F	TiledLattice.hpp	/^			NONE, F, FPOST$/;"	m	class:microflow::TiledLatticeBaseTwoCopies::ValidCopyID
FArray	Tile.hpp	/^		typedef DataType FArray        [LatticeArrangement::getQ()][Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
FILE_UTILS_HPP	fileUtils.hpp	2;"	d
FLUID	NodeBaseType.hpp	/^	FLUID         = 1, $/;"	m	class:microflow::NodeBaseType
FLUID	NodeType.hpp	/^	FLUID    = 1, $/;"	m	class:microflow::NodeClass
FLUID_MODELS_HH	FluidModels.hh	2;"	d
FLUID_MODELS_HPP	FluidModels.hpp	2;"	d
FPOST_TO_F	DataFlowDirection.hpp	/^	FPOST_TO_F ,$/;"	m	class:microflow::DataFlowDirection
FPU_CMP	TestTools.hpp	11;"	d
FPU_CMP	TestTools.hpp	21;"	d
FPU_CMP_ASSERT	TestTools.hpp	15;"	d
FPU_CMP_ASSERT	TestTools.hpp	25;"	d
F_POST	Tile.hpp	/^			F_POST,$/;"	m	class:microflow::TileBase::Data
FactoryMap	SimulationEngine.hpp	/^		typedef std::map< std::string, CreateSimulationEngineMethod > FactoryMap ;$/;"	t	class:microflow::SimulationEngineFactory
FluidModel	FluidModels.hpp	/^class FluidModel$/;"	c	namespace:microflow
FluidModelIncompressible	FluidModels.hpp	/^class FluidModelIncompressible : public FluidModel$/;"	c	namespace:microflow
FluidModelQuasicompressible	FluidModels.hpp	/^class FluidModelQuasicompressible : public FluidModel$/;"	c	namespace:microflow
GET_NODE	TiledLattice.cpp	157;"	d	file:
GET_NODE	TiledLattice.cpp	202;"	d	file:
GPU_ALGORITHMS_HH	gpuAlgorithms.hh	2;"	d
GPU_TOOLS_HPP	gpuTools.hpp	2;"	d
GZSTREAM_NAMESPACE	gzstream.cpp	/^namespace GZSTREAM_NAMESPACE {$/;"	n	file:
GZSTREAM_NAMESPACE::gzstreambase::close	gzstream.cpp	/^void gzstreambase::close() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
GZSTREAM_NAMESPACE::gzstreambase::gzstreambase	gzstream.cpp	/^gzstreambase::gzstreambase( const char* name, int mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
GZSTREAM_NAMESPACE::gzstreambase::open	gzstream.cpp	/^void gzstreambase::open( const char* name, int open_mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
GZSTREAM_NAMESPACE::gzstreambase::~gzstreambase	gzstream.cpp	/^gzstreambase::~gzstreambase() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
GZSTREAM_NAMESPACE::gzstreambuf::close	gzstream.cpp	/^gzstreambuf * gzstreambuf::close() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
GZSTREAM_NAMESPACE::gzstreambuf::flush_buffer	gzstream.cpp	/^int gzstreambuf::flush_buffer() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
GZSTREAM_NAMESPACE::gzstreambuf::open	gzstream.cpp	/^gzstreambuf* gzstreambuf::open( const char* name, int open_mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
GZSTREAM_NAMESPACE::gzstreambuf::overflow	gzstream.cpp	/^int gzstreambuf::overflow( int c) { \/\/ used for output buffer only$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
GZSTREAM_NAMESPACE::gzstreambuf::sync	gzstream.cpp	/^int gzstreambuf::sync() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
GZSTREAM_NAMESPACE::gzstreambuf::underflow	gzstream.cpp	/^int gzstreambuf::underflow() { \/\/ used for input buffer only$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
HD	cudaPrefix.hpp	11;"	d
HD	cudaPrefix.hpp	21;"	d
HD_WARNING_DISABLE	cudaPrefix.hpp	13;"	d
HD_WARNING_DISABLE	cudaPrefix.hpp	22;"	d
HD_WARNING_ENABLE	cudaPrefix.hpp	23;"	d
HOST	cudaPrefix.hpp	20;"	d
HOST	cudaPrefix.hpp	9;"	d
IMAGE_HH	Image.hh	2;"	d
IMAGE_HPP	Image.hpp	2;"	d
INITIALIZE_VTK_ARRAY	WriterTest.cc	138;"	d	file:
INITIALIZE_VTK_ARRAY	WriterTest.cc	92;"	d	file:
INLINE	cudaPrefix.hpp	15;"	d
INLINE	cudaPrefix.hpp	24;"	d
INTERNAL_EDGE	NodeType.hpp	/^	INTERNAL_EDGE                              = 9,$/;"	m	class:microflow::NodeClass::PlacementModifier
INV_TAU	NodeCalculator.hh	547;"	d
INV_TAU	NodeCalculator.hh	571;"	d
Image	Image.hpp	/^		Image (char        const * filename) : png::image<Pixel>(filename     ) {}$/;"	f	class:microflow::Image
Image	Image.hpp	/^		Image (size_t width, size_t height)  : png::image<Pixel>(width, height) {}$/;"	f	class:microflow::Image
Image	Image.hpp	/^		Image (std::string const & filename) : png::image<Pixel>(filename     ) {}$/;"	f	class:microflow::Image
Image	Image.hpp	/^class Image : public png::image<Pixel>$/;"	c	namespace:microflow
IndexCalculator	Tile.hh	/^class IndexCalculator$/;"	c	namespace:microflow
InitializatorAtEquilibrium	LBMOperatorChooser.hpp	/^class InitializatorAtEquilibrium$/;"	c	namespace:microflow
InternalStorageType	PackedDirectionVector.hpp	/^		typedef T InternalStorageType ;$/;"	t	class:microflow::PackedDirectionVector
Iterator	LinearizedMatrix.hpp	/^		typedef typename Storage<T>::iterator Iterator;$/;"	t	class:microflow::LinearizedMatrix
Iterator	NodeLayout.hpp	/^		typedef LinearizedMatrix< NodeType >::Iterator Iterator ;$/;"	t	class:microflow::NodeLayout
Iterator	TileLayout.hpp	/^				typedef size_t Iterator ;$/;"	t	class:microflow::TileLayoutBase::NonEmptyTile
Iterator	TileLayout.hpp	/^		typedef TileIterator Iterator ;$/;"	t	class:microflow::TileLayoutBase
Iterator	TiledLattice.hpp	/^		typedef TileIterator Iterator ;$/;"	t	class:microflow::TiledLattice
KERNEL_PROCESS_BOUNDARY_HPP	kernelTileProcessBoundary.hpp	2;"	d
KERNEL_PROCESS_BOUNDARY_TCC	kernelTileProcessBoundary.tcc	2;"	d	file:
KERNEL_TILE_COLLIDE_HPP	kernelTileCollide.hpp	2;"	d
KERNEL_TILE_COLLIDE_TCC	kernelTileCollide.tcc	2;"	d	file:
KERNEL_TILE_GATHER_PROCESS_BOUNDARY_COLLIDE_HH	kernelTileGatherProcessBoundaryCollide.tcc	2;"	d	file:
KERNEL_TILE_GATHER_PROCESS_BOUNDARY_COLLIDE_HPP	kernelTileGatherProcessBoundaryCollide.hpp	2;"	d
KERNEL_TILE_PROPAGATE_HPP	kernelTilePropagate.hpp	2;"	d
KERNEL_TILE_PROPAGATE_TCC	kernelTilePropagate.tcc	2;"	d	file:
LATTICE_ARRANGEMENT_D3Q19_HH	LatticeArrangementD3Q19.hh	2;"	d
LATTICE_ARRANGEMENT_D3Q19_HPP	LatticeArrangementD3Q19.hpp	2;"	d
LATTICE_ARRANGEMENT_D3Q27_HH	LatticeArrangementD3Q27.hh	2;"	d
LATTICE_ARRANGEMENT_D3Q27_HPP	LatticeArrangementD3Q27.hpp	2;"	d
LATTICE_ARRANGEMENT_HH	LatticeArrangement.hh	2;"	d
LATTICE_ARRANGEMENT_HPP	LatticeArrangement.hpp	2;"	d
LATTICE_CALCULATOR_CPU	LatticeCalculator.hh	246;"	d
LATTICE_CALCULATOR_CPU	LatticeCalculator.hh	26;"	d
LATTICE_CALCULATOR_GPU	LatticeCalculator.tcc	38;"	d	file:
LATTICE_CALCULATOR_GPU	LatticeCalculator.tcc	507;"	d	file:
LATTICE_CALCULATOR_HH	LatticeCalculator.hh	2;"	d
LATTICE_CALCULATOR_HPP	LatticeCalculator.hpp	2;"	d
LATTICE_CALCULATOR_TCC	LatticeCalculator.tcc	2;"	d	file:
LBM_OPERATOR_CHOOSER_HH	LBMOperatorChooser.hh	2;"	d
LBM_OPERATOR_CHOOSER_HPP	LBMOperatorChooser.hpp	2;"	d
LINEARIZED_MATRIX	LinearizedMatrix.hh	240;"	d
LINEARIZED_MATRIX	LinearizedMatrix.hh	37;"	d
LINEARIZED_MATRIX_BASE	LinearizedMatrix.hh	237;"	d
LINEARIZED_MATRIX_BASE	LinearizedMatrix.hh	23;"	d
LINEARIZED_MATRIX_BASE_TEMPLATE	LinearizedMatrix.hh	17;"	d
LINEARIZED_MATRIX_BASE_TEMPLATE	LinearizedMatrix.hh	238;"	d
LINEARIZED_MATRIX_BASE_TEMPLATE_NO_INLINE	LinearizedMatrix.hh	11;"	d
LINEARIZED_MATRIX_HH	LinearizedMatrix.hh	2;"	d
LINEARIZED_MATRIX_HPP	LinearizedMatrix.hpp	2;"	d
LINEARIZED_MATRIX_TEMPLATE	LinearizedMatrix.hh	241;"	d
LINEARIZED_MATRIX_TEMPLATE	LinearizedMatrix.hh	31;"	d
LINEARIZED_MATRIX_TEMPLATE_NO_INLINE	LinearizedMatrix.hh	26;"	d
LOCATION	LatticeCalculatorTest.cc	119;"	d	file:
LOC_Q	LatticeCalculatorTest.cc	120;"	d	file:
LOGGER_HPP	Logger.hpp	2;"	d
LatticeArrangement	LatticeArrangement.hpp	/^class LatticeArrangement : public LatticeArrangementBase<D,Q>$/;"	c	namespace:microflow
LatticeArrangement	LatticeArrangementD3Q19.hpp	/^class LatticeArrangement<3,19> : public LatticeArrangementBase<3,19>$/;"	c	namespace:microflow
LatticeArrangement	LatticeArrangementD3Q27.hpp	/^class LatticeArrangement<3,27> : public LatticeArrangementBase<3,27>$/;"	c	namespace:microflow
LatticeArrangementBase	LatticeArrangement.hpp	/^class LatticeArrangementBase$/;"	c	namespace:microflow
LatticeArrangementType	Tile.hpp	/^		typedef LatticeArrangement LatticeArrangementType ;$/;"	t	class:microflow::Tile
LatticeArrangementType	Tile.hpp	/^		typedef LatticeArrangement LatticeArrangementType ;$/;"	t	class:microflow::TileBase
LatticeArrangementType	TiledLattice.hpp	/^		typedef LatticeArrangement LatticeArrangementType ;$/;"	t	class:microflow::TiledLattice
LatticeCalculator	LatticeCalculator.hh	/^LatticeCalculator (DataType rho0LB, $/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
LatticeCalculator	LatticeCalculator.hpp	/^class LatticeCalculator< FluidModel, CollisionModel, LatticeArrangement, DataType, StorageOnCPU,$/;"	c	namespace:microflow
LatticeCalculator	LatticeCalculator.hpp	/^class LatticeCalculator< FluidModel, CollisionModel, LatticeArrangement, DataType, StorageOnGPU,$/;"	c	namespace:microflow
LatticeCalculator	LatticeCalculator.tcc	/^LatticeCalculator (DataType rho0LB, $/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
LatticeCalculatorType	SimulationEngine.hpp	/^								 tileDataArrangement> LatticeCalculatorType ;$/;"	t	class:microflow::SimulationEngineSpecializationBase
LatticeCalculatorTypeCPU	SimulationEngine.hpp	/^								 StorageOnCPU, tileDataArrangement> LatticeCalculatorTypeCPU ;$/;"	t	class:microflow::SimulationEngineSpecializationBase
LatticeDataArrangement	TiledLattice.hpp	/^		TileDataArrangement LatticeDataArrangement = DataArrangement ;$/;"	m	class:microflow::TiledLattice
LinearizedMatrix	LinearizedMatrix.hh	/^LinearizedMatrix( LinearizedMatrix< T, StorageOnGPU > & linearizedMatrixGPU )$/;"	f	class:microflow::LinearizedMatrix
LinearizedMatrix	LinearizedMatrix.hh	/^LinearizedMatrix()$/;"	f	class:microflow::LINEARIZED_MATRIX
LinearizedMatrix	LinearizedMatrix.hpp	/^class LinearizedMatrix$/;"	c	namespace:microflow
LinearizedMatrix	LinearizedMatrix.hpp	/^class LinearizedMatrix< T, StorageInKernel >$/;"	c	namespace:microflow
LinearizedMatrixBase	LinearizedMatrix.hh	/^LinearizedMatrixBase( LinearizedMatrixBase< T, StorageOnGPU > & linearizedMatrixGPU )$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
LinearizedMatrixBase	LinearizedMatrix.hh	/^LinearizedMatrixBase()$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
LinearizedMatrixBase	LinearizedMatrix.hpp	/^class LinearizedMatrixBase$/;"	c	namespace:microflow
MACROS_HPP	macros.hpp	2;"	d
MARKER	NodeBaseType.hpp	/^	MARKER           ,$/;"	m	class:microflow::NodeBaseType
MEQCalculator	NodeCalculator.hpp	/^		class MEQCalculator< FluidModelIncompressible, Dummy>$/;"	c	class:microflow::NodeCalculator
MEQCalculator	NodeCalculator.hpp	/^		class MEQCalculator< FluidModelQuasicompressible, Dummy>$/;"	c	class:microflow::NodeCalculator
MICROFLOW_TOOLS_HPP	microflowTools.hpp	2;"	d
MODIFICATION_RHO_U_HH	ModificationRhoU.hh	2;"	d
MODIFICATION_RHO_U_HPP	ModificationRhoU.hpp	2;"	d
MRI_instance_	MRubyInterpreter.cpp	/^    MRubyInterpreter* MRubyInterpreter::MRI_instance_ = nullptr ;$/;"	m	class:microflow::MRubyInterpreter	file:
MRI_instance_	MRubyInterpreter.hpp	/^        static MRubyInterpreter* MRI_instance_ ; $/;"	m	class:microflow::MRubyInterpreter
MRUBY_INTERPRETER_HPP	MRubyInterpreter.hpp	2;"	d
MRubyInterpreter	MRubyInterpreter.cpp	/^    MRubyInterpreter ()$/;"	f	class:microflow::MRubyInterpreter
MRubyInterpreter	MRubyInterpreter.hpp	/^    class MRubyInterpreter$/;"	c	namespace:microflow
MULTIDIMENSIONAL_MAPPERS_HH	MultidimensionalMappers.hh	2;"	d
MULTIDIMENSIONAL_MAPPERS_HPP	MultidimensionalMappers.hpp	2;"	d
Measure	PerformanceMeter.hh	/^Measure()$/;"	f	class:microflow::PerformanceMeter::Measure
Measure	PerformanceMeter.hpp	/^		class Measure$/;"	c	class:microflow::PerformanceMeter
Modification	ModificationRhoU.hh	/^Modification (Coordinates c, const DataType & v)$/;"	f	class:microflow::ModificationRhoU::Modification
Modification	ModificationRhoU.hpp	/^			class Modification$/;"	c	class:microflow::ModificationRhoU
ModificationRho	ModificationRhoU.hpp	/^		typedef Modification <double> ModificationRho ;$/;"	t	class:microflow::ModificationRhoU
ModificationRhoU	ModificationRhoU.hpp	/^class ModificationRhoU$/;"	c	namespace:microflow
ModificationU	ModificationRhoU.hpp	/^		typedef Modification <std::array<double,3> > ModificationU ;$/;"	t	class:microflow::ModificationRhoU
MyImageDataWriter	vtkTest.cc	/^class MyImageDataWriter : public vtkXMLImageDataWriter$/;"	c	file:
MyImageDataWriter::myWrite	vtkTest.cc	/^myWrite (vtkSmartPointer <vtkDoubleArray> dataArray)$/;"	f	class:MyImageDataWriter
MyImageDataWriter::registerOstream	vtkTest.cc	/^		void registerOstream (ostream & os) $/;"	f	class:MyImageDataWriter
N	Direction.hpp	/^constexpr Direction::D   N   = Direction::NORTH ;$/;"	m	namespace:microflow
NB	Direction.hpp	/^constexpr Direction::D   NB  = Direction::NORTH + Direction::BOTTOM ;$/;"	m	namespace:microflow
NE	Direction.hpp	/^constexpr Direction::D   NE  = Direction::NORTH + Direction::EAST ;$/;"	m	namespace:microflow
NEB	Direction.hpp	/^constexpr Direction::D   NEB = Direction::NORTH + Direction::EAST + Direction::BOTTOM ;$/;"	m	namespace:microflow
NET	Direction.hpp	/^constexpr Direction::D   NET = Direction::NORTH + Direction::EAST + Direction::TOP ;$/;"	m	namespace:microflow
NODE_BASE_TYPE	NodeBaseType.hpp	2;"	d
NODE_CALCULATOR	NodeCalculator.hh	1485;"	d
NODE_CALCULATOR_BASE	NodeCalculator.hh	1487;"	d
NODE_CALCULATOR_BASE	NodeCalculator.hh	34;"	d
NODE_CALCULATOR_D3Q19	NodeCalculator.hh	438;"	d
NODE_CALCULATOR_HH	NodeCalculator.hh	2;"	d
NODE_CALCULATOR_HPP	NodeCalculator.hpp	2;"	d
NODE_FROM_TILE_COPY	NodeFromTile.hh	518;"	d
NODE_FROM_TILE_COPY	NodeFromTile.hh	633;"	d
NODE_FROM_TILE_HH	NodeFromTile.hh	2;"	d
NODE_FROM_TILE_HPP	NodeFromTile.hpp	2;"	d
NODE_FROM_TILE_POINTERS	NodeFromTile.hh	240;"	d
NODE_FROM_TILE_POINTERS	NodeFromTile.hh	508;"	d
NODE_FROM_TILE_REFERENCE	NodeFromTile.hh	21;"	d
NODE_FROM_TILE_REFERENCE	NodeFromTile.hh	230;"	d
NODE_FROM_TILE_TEST_HPP	NodeFromTileTest.hpp	2;"	d
NODE_INTERFACE	NodeFromTile.hpp	181;"	d
NODE_INTERFACE	NodeFromTile.hpp	34;"	d
NODE_LAYOUT_HH	NodeLayout.hh	2;"	d
NODE_LAYOUT_HPP	NodeLayout.hpp	2;"	d
NODE_LAYOUT_TEST_HPP	NodeLayoutTest.hpp	2;"	d
NODE_LAYOUT_WRITER_HPP	NodeLayoutWriter.hpp	2;"	d
NODE_MODIFICATOR_FUNCTION	ReaderVtk.hh	209;"	d
NODE_MODIFICATOR_FUNCTION	ReaderVtk.hh	293;"	d
NODE_TYPE_HH	NodeType.hh	2;"	d
NODE_TYPE_HPP	NodeType.hpp	2;"	d
NONE	NodeType.hpp	/^	NONE   = 0,$/;"	m	class:microflow::NodeClass::PlacementModifier
NONE	TiledLattice.hpp	/^			NONE, F, FPOST$/;"	m	class:microflow::TiledLatticeBaseTwoCopies::ValidCopyID
NORTH	Direction.cpp	/^constexpr Direction::D Direction::NORTH  ;$/;"	m	class:microflow::Direction	file:
NORTH	Direction.hpp	/^		static constexpr D NORTH  = 0b00000100 ; \/\/ y = +1$/;"	m	class:microflow::Direction
NORTH	NodeType.hpp	/^	NORTH  = 1,$/;"	m	class:microflow::NodeClass::PlacementModifier
NOT_A_NUMBER	Settings.hpp	/^			NOT_A_NUMBER, $/;"	m	class:microflow::Settings::DefaultValue
NO_INDEX	LatticeArrangement.hpp	/^							NO_INDEX = std::numeric_limits<Direction::DirectionIndex>::max() ;$/;"	m	class:microflow::LatticeArrangementBase
NT	Direction.hpp	/^constexpr Direction::D   NT  = Direction::NORTH + Direction::TOP ;$/;"	m	namespace:microflow
NW	Direction.hpp	/^constexpr Direction::D   NW  = Direction::NORTH + Direction::WEST ;$/;"	m	namespace:microflow
NWB	Direction.hpp	/^constexpr Direction::D   NWB = Direction::NORTH + Direction::WEST + Direction::BOTTOM ;$/;"	m	namespace:microflow
NWT	Direction.hpp	/^constexpr Direction::D   NWT = Direction::NORTH + Direction::WEST + Direction::TOP ;$/;"	m	namespace:microflow
NoModify	LatticeCalculatorTest.cc	/^class NoModify$/;"	c	file:
NoModify::modify	LatticeCalculatorTest.cc	/^		static void modify( NodeLayout & nodeLayout ) {}$/;"	f	class:NoModify
NoOptimizations	Optimization.hpp	/^class NoOptimizations$/;"	c	namespace:microflow
Node	modifyNodeLayout.rb	/^class Node \\n$/;"	c	class:box
NodeBaseType	NodeBaseType.hpp	/^enum class NodeBaseType $/;"	c	namespace:microflow
NodeCalculator	NodeCalculator.hh	/^NodeCalculator (DataType rho0LB, $/;"	f	class:microflow::NODE_CALCULATOR_D3Q19
NodeCalculator	NodeCalculator.hpp	/^class NodeCalculator< FluidModel, CollisionModel, D3Q19, DataType, Storage > :$/;"	c	namespace:microflow
NodeCalculatorBase	NodeCalculator.hh	/^NodeCalculatorBase( DataType rho0LB, $/;"	f	class:microflow::NODE_CALCULATOR_BASE
NodeCalculatorBase	NodeCalculator.hpp	/^class NodeCalculatorBase :$/;"	c	namespace:microflow
NodeClass	NodeType.hpp	/^enum class NodeClass $/;"	c	namespace:microflow
NodeFromTile	NodeFromTile.hh	/^NodeFromTile (Tile & tile, unsigned x, unsigned y, unsigned z)$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
NodeFromTile	NodeFromTile.hh	/^NodeFromTile$/;"	f	class:microflow::NODE_FROM_TILE_COPY
NodeFromTile	NodeFromTile.hh	/^NodeFromTile$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
NodeFromTile	NodeFromTile.hpp	/^class NodeFromTile <Tile, DataStorageMethod::COPY>$/;"	c	namespace:microflow
NodeFromTile	NodeFromTile.hpp	/^class NodeFromTile <Tile, DataStorageMethod::POINTERS>$/;"	c	namespace:microflow
NodeFromTile	NodeFromTile.hpp	/^class NodeFromTile <Tile, DataStorageMethod::REFERENCE>$/;"	c	namespace:microflow
NodeLB	Simulation.cpp	/^NodeLB( Coordinates nodeCoordinates )$/;"	f	class:microflow::Simulation::NodeLB
NodeLB	Simulation.hpp	/^		struct NodeLB$/;"	s	class:microflow::Simulation
NodeLayout	NodeLayout.cpp	/^NodeLayout( const ColoredPixelClassificator & coloredPixelClassificator,$/;"	f	class:microflow::NodeLayout
NodeLayout	NodeLayout.cpp	/^NodeLayout( const Size & size )$/;"	f	class:microflow::NodeLayout
NodeLayout	NodeLayout.hpp	/^class NodeLayout$/;"	c	namespace:microflow
NodeLayoutWriter	NodeLayoutWriter.hpp	/^class NodeLayoutWriter$/;"	c	namespace:microflow
NodeNormalsArray	Tile.hpp	/^		typedef PackedNodeNormalSet NodeNormalsArray [Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
NodeSolidNeighborMasksArray	Tile.hpp	/^		typedef SolidNeighborMask NodeSolidNeighborMasksArray [Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
NodeType	NodeType.hh	/^NodeType( NodeBaseType nodeBaseType, PlacementModifier placementModifier )$/;"	f	class:microflow::NodeType
NodeType	NodeType.hh	/^NodeType()$/;"	f	class:microflow::NodeType
NodeType	NodeType.hpp	/^class NodeType$/;"	c	class:microflow::NodeClass
NodeTypeArray	Tile.hpp	/^		typedef NodeType NodeTypeArray [Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
NonEmptyTile	TileLayout.hh	/^NonEmptyTile( TileLayoutBase & tileLayoutBase, TileIndex tileIndex )$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
NonEmptyTile	TileLayout.hpp	/^		class NonEmptyTile : public TileTraitsCommon< DEFAULT_3D_TILE_EDGE, 3u >$/;"	c	class:microflow::TileLayoutBase
O	Direction.hpp	/^constexpr Direction::D   O    = Direction::SELF ;$/;"	m	namespace:microflow
OPTIMIZATION_HPP	Optimization.hpp	2;"	d
PACKED_DIRECTION_VECTOR_HH	PackedDirectionVector.hh	2;"	d
PACKED_DIRECTION_VECTOR_HPP	PackedDirectionVector.hpp	2;"	d
PACKED_NODE_NORMAL_SET_HH	PackedNodeNormalSet.hh	2;"	d
PACKED_NODE_NORMAL_SET_HPP	PackedNodeNormalSet.hpp	2;"	d
PARALLEL_WALLS	PackedNodeNormalSet.hpp	/^			PARALLEL_WALLS   = 3$/;"	e	enum:microflow::PackedNodeNormalSet::EdgeNodeType
PERFORMANCE_METER_HH	PerformanceMeter.hh	2;"	d
PERFORMANCE_METER_HPP	PerformanceMeter.hpp	2;"	d
POINTERS	NodeFromTile.hpp	/^	POINTERS,$/;"	e	enum:microflow::DataStorageMethod
PRESSURE	NodeBaseType.hpp	/^	PRESSURE      = 5,$/;"	m	class:microflow::NodeBaseType
PRINT_F	TileTest.cc	400;"	d	file:
PRINT_F	TileTest.cc	417;"	d	file:
PROGRAM_PARAMATERS_HPP	ProgramParameters.hpp	2;"	d
PackedDataType	NodeType.hpp	/^		typedef unsigned short PackedDataType ;$/;"	t	class:microflow::NodeClass::NodeType
PackedDataType	kernelTileGatherProcessBoundaryCollide.tcc	/^	NodeType::PackedDataType (& nodeTypesCopy) [6][6][6],$/;"	m	namespace:microflow	file:
PackedDirectionVector	PackedDirectionVector.hh	/^PackedDirectionVector()$/;"	f	class:microflow::PackedDirectionVector
PackedDirectionVector	PackedDirectionVector.hh	/^PackedDirectionVector(PackedDirectionVector<T>::InternalStorageType packedVector)$/;"	f	class:microflow::PackedDirectionVector
PackedDirectionVector	PackedDirectionVector.hpp	/^class PackedDirectionVector$/;"	c	namespace:microflow
PackedNodeNormalSet	PackedNodeNormalSet.hh	/^PackedNodeNormalSet()$/;"	f	class:microflow::PackedNodeNormalSet
PackedNodeNormalSet	PackedNodeNormalSet.hpp	/^class PackedNodeNormalSet$/;"	c	namespace:microflow
PerformanceMeter	PerformanceMeter.hh	/^PerformanceMeter( unsigned int initialBufferSize )$/;"	f	class:microflow::PerformanceMeter
PerformanceMeter	PerformanceMeter.hpp	/^class PerformanceMeter$/;"	c	namespace:microflow
Pixel	Image.hpp	/^typedef png::rgb_pixel Pixel ;$/;"	t	namespace:microflow
PlacementModifier	NodeType.hpp	/^enum class PlacementModifier$/;"	c	class:microflow::NodeClass
ProgramParameters	ProgramParameters.cpp	/^ProgramParameters(int argc, char** argv) :$/;"	f	class:microflow::ProgramParameters
ProgramParameters	ProgramParameters.hpp	/^class ProgramParameters$/;"	c	namespace:microflow
Propagator	LBMOperatorChooser.hpp	/^class Propagator$/;"	c	namespace:microflow
READER_VTK_HH	ReaderVtk.hh	2;"	d
READER_VTK_HPP	ReaderVtk.hpp	2;"	d
REFERENCE	NodeFromTile.hpp	/^	REFERENCE,$/;"	e	enum:microflow::DataStorageMethod
RHO	Tile.hpp	/^			RHO = 0,$/;"	m	class:microflow::TileBase::Data
RHO_BOUNDARY	Tile.hpp	/^			RHO_BOUNDARY,$/;"	m	class:microflow::TileBase::Data
RHO_T0	Tile.hpp	/^			RHO_T0,$/;"	m	class:microflow::TileBase::Data
RS_STRANGE_MARKING	Direction.cpp	/^constexpr Direction::D Direction::RS_STRANGE_MARKING ;$/;"	m	class:microflow::Direction	file:
RS_STRANGE_MARKING	Direction.hpp	/^		static constexpr D RS_STRANGE_MARKING = 0b00101010 ; $/;"	m	class:microflow::Direction
RUBY_INTERPRETER_HPP	RubyInterpreter.hpp	2;"	d
ReadPrimaryElement	ReaderVtk.hh	/^ReadPrimaryElement (vtkXMLDataElement* ePrimary) $/;"	f	class:microflow::ReaderVtkImage
ReaderVtkBase	ReaderVtk.hpp	/^class ReaderVtkBase : public VtkXmlReaderClass$/;"	c	namespace:microflow
ReaderVtkImage	ReaderVtk.hpp	/^class ReaderVtkImage $/;"	c	namespace:microflow
ReaderVtkImage::readNodeLayout	ReaderVtk.cpp	/^readNodeLayout (NodeLayout & nodeLayout)$/;"	f	class:ReaderVtkImage
ReaderVtkUnstructured	ReaderVtk.cpp	/^vtkStandardNewMacro (ReaderVtkUnstructured) ;$/;"	v
ReaderVtkUnstructured	ReaderVtk.hpp	/^class ReaderVtkUnstructured$/;"	c	namespace:microflow
RhoBB2Calculator	LBMOperatorChooser.hpp	/^class RhoBB2Calculator$/;"	c	namespace:microflow
RubyException	RubyInterpreter.cpp	/^class RubyException: public std::exception$/;"	c	namespace:microflow	file:
RubyInterpreter	RubyInterpreter.cpp	/^RubyInterpreter()$/;"	f	class:microflow::RubyInterpreter
RubyInterpreter	RubyInterpreter.hpp	/^class RubyInterpreter$/;"	c	namespace:microflow
S	Direction.hpp	/^constexpr Direction::D   S   = Direction::SOUTH ;$/;"	m	namespace:microflow
SB	Direction.hpp	/^constexpr Direction::D   SB  = Direction::SOUTH + Direction::BOTTOM ;$/;"	m	namespace:microflow
SE	Direction.hpp	/^constexpr Direction::D   SE  = Direction::SOUTH + Direction::EAST ;$/;"	m	namespace:microflow
SEB	Direction.hpp	/^constexpr Direction::D   SEB = Direction::SOUTH + Direction::EAST + Direction::BOTTOM ;$/;"	m	namespace:microflow
SELF	Direction.hpp	/^		static constexpr D SELF   = 0 ;$/;"	m	class:microflow::Direction
SELF	Direction.hpp	/^constexpr Direction::D   SELF = Direction::SELF ;$/;"	m	namespace:microflow
SET	Direction.hpp	/^constexpr Direction::D   SET = Direction::SOUTH + Direction::EAST + Direction::TOP ;$/;"	m	namespace:microflow
SETTINGS_HH	Settings.hh	2;"	d
SETTINGS_HPP	Settings.hpp	2;"	d
SIMULATION_ENGINE_HH	SimulationEngine.hh	2;"	d
SIMULATION_ENGINE_HPP	SimulationEngine.hpp	2;"	d
SIMULATION_ENGINE_SPECIALIZATION	SimulationEngine.hh	447;"	d
SIMULATION_ENGINE_SPECIALIZATION	SimulationEngine.hh	52;"	d
SIMULATION_ENGINE_SPECIALIZATION_BASE	SimulationEngine.hh	33;"	d
SIMULATION_ENGINE_SPECIALIZATION_BASE	SimulationEngine.hh	445;"	d
SIMULATION_ENGINE_SPECIALIZATION_GPU	SimulationEngine.tcc	175;"	d	file:
SIMULATION_ENGINE_SPECIALIZATION_GPU	SimulationEngine.tcc	25;"	d	file:
SIMULATION_ENGINE_TCC	SimulationEngine.tcc	2;"	d	file:
SIMULATION_HPP	Simulation.hpp	2;"	d
SIZE_HH	Size.hh	2;"	d
SIZE_HPP	Size.hpp	2;"	d
SLANTING	Direction.hpp	41;"	d
SLANTING	Direction.hpp	60;"	d
SOLID	NodeBaseType.hpp	/^	SOLID         = 0, $/;"	m	class:microflow::NodeBaseType
SOLID	NodeType.hpp	/^	SOLID    = 0, $/;"	m	class:microflow::NodeClass
SOLID_NEIGHBOR_MASK_HH	SolidNeighborMask.hh	2;"	d
SOLID_NEIGHBOR_MASK_HPP	SolidNeighborMask.hpp	2;"	d
SOUTH	Direction.cpp	/^constexpr Direction::D Direction::SOUTH  ;$/;"	m	class:microflow::Direction	file:
SOUTH	Direction.hpp	/^		static constexpr D SOUTH  = 0b00001100 ; \/\/ y = -1$/;"	m	class:microflow::Direction
SOUTH	NodeType.hpp	/^	SOUTH  = 2,$/;"	m	class:microflow::NodeClass::PlacementModifier
ST	Direction.hpp	/^constexpr Direction::D   ST  = Direction::SOUTH + Direction::TOP ;$/;"	m	namespace:microflow
STORAGE_HH	Storage.hh	2;"	d
STORAGE_HPP	Storage.hpp	2;"	d
STRAIGHT	Direction.hpp	39;"	d
STRAIGHT	Direction.hpp	59;"	d
STRINGIFY	RubyInterpreter.cpp	364;"	d	file:
STRINGIFY	RubyInterpreter.cpp	368;"	d	file:
STRINGIFY	RubyScripts.hpp	3;"	d
SW	Direction.hpp	/^constexpr Direction::D   SW  = Direction::SOUTH + Direction::WEST ;$/;"	m	namespace:microflow
SWB	Direction.hpp	/^constexpr Direction::D   SWB = Direction::SOUTH + Direction::WEST + Direction::BOTTOM ;$/;"	m	namespace:microflow
SWT	Direction.hpp	/^constexpr Direction::D   SWT = Direction::SOUTH + Direction::WEST + Direction::TOP ;$/;"	m	namespace:microflow
SYNTAX_ERROR_EXCEPTION	Exceptions.hpp	/^class SYNTAX_ERROR_EXCEPTION $/;"	c	namespace:microflow
SYNTAX_ERROR_EXCEPTION	microflowTools.cpp	/^class SYNTAX_ERROR_EXCEPTION $/;"	c	namespace:microflow	file:
SaveRhoU	kernelTileGatherProcessBoundaryCollide.hpp	/^class SaveRhoU$/;"	c	namespace:microflow
SetDataMode	WriterVtk.hh	/^SetDataMode (int mode) $/;"	f	class:microflow::WriterVtkBase
Settings	Settings.cpp	/^	Settings()$/;"	f	class:microflow::Settings
Settings	Settings.cpp	/^	Settings(const std::string simulationDirectoryPath) :$/;"	f	class:microflow::Settings
Settings	Settings.hpp	/^class Settings$/;"	c	namespace:microflow
Simulation	Simulation.cpp	/^Simulation( const std::string casePath )$/;"	f	class:microflow::Simulation
Simulation	Simulation.hpp	/^class Simulation$/;"	c	namespace:microflow
SimulationEngine	SimulationEngine.hpp	/^class SimulationEngine$/;"	c	namespace:microflow
SimulationEngineFactory	SimulationEngine.hpp	/^class SimulationEngineFactory$/;"	c	namespace:microflow
SimulationEngineSpecialization	SimulationEngine.hh	/^SimulationEngineSpecialization$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
SimulationEngineSpecialization	SimulationEngine.hpp	/^class SimulationEngineSpecialization$/;"	c	namespace:microflow
SimulationEngineSpecialization	SimulationEngine.tcc	/^SimulationEngineSpecialization$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
SimulationEngineSpecializationBase	SimulationEngine.hh	/^SimulationEngineSpecializationBase( TileLayout<StorageOnCPU> & tileLayout,$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
SimulationEngineSpecializationBase	SimulationEngine.hpp	/^class SimulationEngineSpecializationBase$/;"	c	namespace:microflow
SimulationEngineSpecializationBaseType	SimulationEngine.hpp	/^						> SimulationEngineSpecializationBaseType ;$/;"	t	class:microflow::SimulationEngineSpecialization
SingleBlockPerTile	ThreadMapper.hpp	/^class SingleBlockPerTile$/;"	c	namespace:microflow
SingleThreadPerNode	ThreadMapper.hpp	/^class SingleThreadPerNode$/;"	c	namespace:microflow
Size	Size.hh	/^Size( size_t width, size_t height, size_t depth )$/;"	f	class:microflow::Size
Size	Size.hh	/^Size()$/;"	f	class:microflow::Size
Size	Size.hpp	/^class Size : public Coordinates$/;"	c	namespace:microflow
Size	modifyNodeLayout.rb	/^class Size \\n$/;"	c	class:box
SolidNeighborMask	SolidNeighborMask.hh	/^SolidNeighborMask()$/;"	f	class:microflow::SolidNeighborMask
SolidNeighborMask	SolidNeighborMask.hpp	/^class SolidNeighborMask$/;"	c	namespace:microflow
StorageInKernel	Storage.hh	/^StorageInKernel( StorageOnGPU<T> & storageOnGPU )$/;"	f	class:microflow::StorageInKernel
StorageInKernel	Storage.hpp	/^class StorageInKernel$/;"	c	namespace:microflow
StorageOnCPU	Storage.hpp	/^class StorageOnCPU : public std::vector<T>$/;"	c	namespace:microflow
StorageOnGPU	Storage.hh	/^StorageOnGPU()$/;"	f	class:microflow::StorageOnGPU
StorageOnGPU	Storage.hpp	/^class StorageOnGPU : public thrust::device_vector<T>$/;"	c	namespace:microflow
StorageWrapper	Tile.hpp	/^		template <DataStorageMethod DataStorage> class StorageWrapper {} ;$/;"	c	class:microflow::TileBase
T	Direction.hpp	/^constexpr Direction::D   T   = Direction::TOP ;$/;"	m	namespace:microflow
T	apps/stl2vtk.cpp	/^typedef float T;$/;"	t	file:
TEMPLATE_LATTICE_CALCULATOR	LatticeCalculator.hh	15;"	d
TEMPLATE_LATTICE_CALCULATOR	LatticeCalculator.hh	245;"	d
TEMPLATE_LATTICE_CALCULATOR	LatticeCalculator.tcc	27;"	d	file:
TEMPLATE_LATTICE_CALCULATOR	LatticeCalculator.tcc	506;"	d	file:
TEMPLATE_NODE_CALCULATOR	NodeCalculator.hh	1486;"	d
TEMPLATE_NODE_CALCULATOR_BASE	NodeCalculator.hh	1488;"	d
TEMPLATE_NODE_CALCULATOR_BASE	NodeCalculator.hh	23;"	d
TEMPLATE_NODE_CALCULATOR_D3Q19	NodeCalculator.hh	427;"	d
TEMPLATE_SIMULATION_ENGINE_SPECIALIZATION	SimulationEngine.hh	42;"	d
TEMPLATE_SIMULATION_ENGINE_SPECIALIZATION	SimulationEngine.hh	448;"	d
TEMPLATE_SIMULATION_ENGINE_SPECIALIZATION	SimulationEngine.tcc	15;"	d	file:
TEMPLATE_SIMULATION_ENGINE_SPECIALIZATION	SimulationEngine.tcc	176;"	d	file:
TEMPLATE_SIMULATION_ENGINE_SPECIALIZATION_BASE	SimulationEngine.hh	22;"	d
TEMPLATE_SIMULATION_ENGINE_SPECIALIZATION_BASE	SimulationEngine.hh	446;"	d
TEMPLATE_TILE	Tile.hh	28;"	d
TEMPLATE_TILE	Tile.hh	725;"	d
TEMPLATE_TILED_LATTICE	TiledLattice.hh	131;"	d
TEMPLATE_TILED_LATTICE	TiledLattice.hh	311;"	d
TEMPLATE_TILED_LATTICE_NO_INLINE	TiledLattice.hh	126;"	d
TEMPLATE_TILE_CALCULATOR	TileCalculator.hh	14;"	d
TEMPLATE_TILE_CALCULATOR	TileCalculator.hh	343;"	d
TEMPLATE_TILE_LAYOUT	TileLayout.hh	382;"	d
TEMPLATE_TILE_NO_INLINE	Tile.hh	20;"	d
TEMPLATE_TILE_TRAITS_COMMON	TileTraitsCommon.hh	15;"	d
TEMPLATE_TILE_TRAITS_COMMON	TileTraitsCommon.hh	80;"	d
TEMPLATE_TYPE_NAMES_EXTRACTOR	TypeNamesExtractor.hh	11;"	d
TEMPLATE_TYPE_NAMES_EXTRACTOR	TypeNamesExtractor.hh	93;"	d
TEMPLATE_WRITER	Writer.hh	163;"	d
TEMPLATE_WRITER	Writer.hh	16;"	d
TEST	BitSetTest.cc	/^TEST( BitSet, clear_GPU )$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, operator_EQ )$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, operator_OR_CPU )$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, operator_out )$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, outOfBounds_set_CPU )$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, outOfBounds_test_CPU )$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, set_CPU )$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, set_GPU )$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, sizeof_CPU)$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, sizeof_GPU )$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, test_CPU )$/;"	f
TEST	BitSetTest.cc	/^TEST( BitSet, test_GPU )$/;"	f
TEST	BoundaryAtLocationsTest.cc	/^TEST (BoundaryAtLocations, emptyConstructor)$/;"	f
TEST	BoundaryAtLocationsTest.cc	/^TEST (BoundaryAtLocations, exceptionReadColor)$/;"	f
TEST	BoundaryAtLocationsTest.cc	/^TEST (BoundaryAtLocations, readGeneral)$/;"	f
TEST	ClassificatorBoundaryAtLocationTest.cc	/^TEST (ClassificatorBoundaryAtLocation, createFromCross200)$/;"	f
TEST	ClassificatorBoundaryAtLocationTest.cc	/^TEST (ClassificatorBoundaryAtLocation, createFromNonExistentDirectory)$/;"	f
TEST	ClassificatorBoundaryAtLocationTest.cc	/^TEST (ClassificatorBoundaryAtLocation, getBoundaryDefinitions_Cross200)$/;"	f
TEST	ColorAssignmentTest.cc	/^TEST( ColorAssignment, comment_without_space )$/;"	f
TEST	ColorAssignmentTest.cc	/^TEST( ColorAssignment, comment_without_space_first_line )$/;"	f
TEST	ColorAssignmentTest.cc	/^TEST( ColorAssignment, emptyConstructor )$/;"	f
TEST	ColorAssignmentTest.cc	/^TEST( ColorAssignment, read_general )$/;"	f
TEST	ColorAssignmentTest.cc	/^TEST( ColorAssignment, read_node_type_fluid )$/;"	f
TEST	ColorAssignmentTest.cc	/^TEST( ColorAssignment, read_node_type_marker_exception )$/;"	f
TEST	ColorAssignmentTest.cc	/^TEST( ColorAssignment, read_node_type_marker_false )$/;"	f
TEST	ColorAssignmentTest.cc	/^TEST( ColorAssignment, read_node_type_marker_true )$/;"	f
TEST	ColoredPixelClassificatorTest.cc	/^TEST( ColoredPixelClassificator, bounce_back_2 )$/;"	f
TEST	ColoredPixelClassificatorTest.cc	/^TEST( ColoredPixelClassificator, create_from_non_existing_file )$/;"	f
TEST	ColoredPixelClassificatorTest.cc	/^TEST( ColoredPixelClassificator, fluid_nodes )$/;"	f
TEST	ColoredPixelClassificatorTest.cc	/^TEST( ColoredPixelClassificator, input_file_correct )$/;"	f
TEST	ColoredPixelClassificatorTest.cc	/^TEST( ColoredPixelClassificator, pressure )$/;"	f
TEST	ColoredPixelClassificatorTest.cc	/^TEST( ColoredPixelClassificator, solid_nodes )$/;"	f
TEST	ColoredPixelClassificatorTest.cc	/^TEST( ColoredPixelClassificator, velocity )$/;"	f
TEST	ColoredPixelClassificatorTest.cc	/^TEST( ColoredPixelClassificator, velocity_0 )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, D3Q19Number )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, D3Q27Number )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, get )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, getIndexD3Q27 )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, getX )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, getY )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, getZ )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, setX )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, setX_tooLarge )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, setX_tooSmall )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, setY )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, setZ )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, slantingNumber )$/;"	f
TEST	DirectionTest.cc	/^TEST( Direction, straightNumber )$/;"	f
TEST	ExpandedNodeLayoutTest.cc	/^TEST (ExpandedNodeLayout, profiling)$/;"	f
TEST	LatticeArrangementD3Q19Test.cc	/^TEST( LatticeArrangementD3Q19, getC_GPU )$/;"	f
TEST	LatticeArrangementD3Q19Test.cc	/^TEST( LatticeArrangementD3Q19, getIndex )$/;"	f
TEST	LatticeArrangementD3Q19Test.cc	/^TEST( LatticeArrangementD3Q19, getIndex_GPU )$/;"	f
TEST	LatticeArrangementD3Q19Test.cc	/^TEST( LatticeArrangementD3Q19, getName )$/;"	f
TEST	LatticeArrangementD3Q19Test.cc	/^TEST( LatticeArrangementD3Q19, getW_GPU )$/;"	f
TEST	LatticeArrangementD3Q19Test.cc	/^TEST( LatticeArrangementD3Q19, numberOfC )$/;"	f
TEST	LatticeArrangementD3Q27Test.cc	/^TEST( LatticeArrangementD3Q27, getIndex )$/;"	f
TEST	LatticeArrangementD3Q27Test.cc	/^TEST( LatticeArrangementD3Q27, getName )$/;"	f
TEST	LatticeArrangementD3Q27Test.cc	/^TEST( LatticeArrangementD3Q27, numberOfC )$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, computeRhoForBB2Nodes)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateAllTypesGPU_D3Q19_11x11x11_tiles)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateFluidGPU_D3Q19_11x11x11_tiles)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateSingleTileAllTypesGPU_D3Q19)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateSingleTileFluidGPU_D3Q19)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateTilesFluidGPU_D3Q19_NE)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateTilesFluidGPU_D3Q19_allStraight)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateTwoTilesFluidGPU_D3Q19_BOTTOM)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateTwoTilesFluidGPU_D3Q19_EAST)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateTwoTilesFluidGPU_D3Q19_NORTH)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateTwoTilesFluidGPU_D3Q19_SOUTH)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateTwoTilesFluidGPU_D3Q19_TOP)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_OPT_1, propagateTwoTilesFluidGPU_D3Q19_WEST)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, computeRhoForBB2Nodes)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateAllTypesGPU_D3Q19_11x11x11_tiles)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateFluidGPU_D3Q19_11x11x11_tiles)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateSingleTileAllTypesGPU_D3Q19)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateSingleTileFluidGPU_D3Q19)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateTilesFluidGPU_D3Q19_NE)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateTilesFluidGPU_D3Q19_allStraight)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateTwoTilesFluidGPU_D3Q19_BOTTOM)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateTwoTilesFluidGPU_D3Q19_EAST)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateTwoTilesFluidGPU_D3Q19_NORTH)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateTwoTilesFluidGPU_D3Q19_SOUTH)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateTwoTilesFluidGPU_D3Q19_TOP)$/;"	f
TEST	LatticeCalculatorTest.cc	/^TEST (LatticeCalculator_XYZ, propagateTwoTilesFluidGPU_D3Q19_WEST)$/;"	f
TEST	MultidimensionalMappersTest.cc	/^TEST (MultidimensionalMappers, XYZ_linearize)$/;"	f
TEST	MultidimensionalMappersTest.cc	/^TEST (MultidimensionalMappers, YXZ_linearize)$/;"	f
TEST	MultidimensionalMappersTest.cc	/^TEST (MultidimensionalMappers, ZigzagNE_linearize)$/;"	f
TEST	NodeBaseTypeTest.cc	/^TEST( NodeBaseTypeNames, keyToString )$/;"	f
TEST	NodeBaseTypeTest.cc	/^TEST( NodeBaseTypeNames, stringToKey )$/;"	f
TEST	NodeBaseTypeTest.cc	/^TEST( NodeBaseTypeNames, stringToKeyOutOfRange )$/;"	f
TEST	NodeCalculatorTest.cc	/^TEST (NodeCalculator, processBoundaryFluid)$/;"	f
TEST	NodeFromTileTest.cc	/^TEST (NodeFromTileCPU_OPT_1, arrayVsNode)$/;"	f
TEST	NodeFromTileTest.cc	/^TEST (NodeFromTileCPU_OPT_1_POINTERS, accessors)$/;"	f
TEST	NodeFromTileTest.cc	/^TEST (NodeFromTileCPU_XYZ, arrayVsNode)$/;"	f
TEST	NodeFromTileTest.cc	/^TEST (NodeFromTileCPU_XYZ_POINTERS, accessors)$/;"	f
TEST	NodeLayoutTest.cc	/^TEST( NodeLayout, createFromImage )$/;"	f
TEST	NodeLayoutTest.cc	/^TEST( NodeLayout, getNodeType_fluid )$/;"	f
TEST	NodeLayoutTest.cc	/^TEST( NodeLayout, getNodeType_outside )$/;"	f
TEST	NodeLayoutTest.cc	/^TEST( NodeLayout, getNodeType_random )$/;"	f
TEST	NodeLayoutTest.cc	/^TEST( NodeLayout, getNodeType_solid )$/;"	f
TEST	NodeLayoutTest.cc	/^TEST( NodeLayout, resizeWithContent )$/;"	f
TEST	NodeLayoutWriterTest.cc	/^TEST( NodeLayoutWriter, volFile2D )$/;"	f
TEST	NodeLayoutWriterTest.cc	/^TEST( NodeLayoutWriter, volFile3D_10 )$/;"	f
TEST	NodeLayoutWriterTest.cc	/^TEST( NodeLayoutWriter, volFile3D_16 )$/;"	f
TEST	NodeLayoutWriterTest.cc	/^TEST( NodeLayoutWriter, volFile3D_17 )$/;"	f
TEST	NodeLayoutWriterTest.cc	/^TEST( NodeLayoutWriter, volFile3D_2 )$/;"	f
TEST	NodeTypeTest.cc	/^TEST( NodeType, compare )$/;"	f
TEST	NodeTypeTest.cc	/^TEST( NodeType, size )$/;"	f
TEST	NodeTypeTest.cc	/^TEST( NodeType, sizeInBits )$/;"	f
TEST	NodeTypeTest.cc	/^TEST( NodeType, sizeInBits_nodeBaseType )$/;"	f
TEST	NodeTypeTest.cc	/^TEST( PlacementModifierNames, stringToKey )$/;"	f
TEST	PackedNodeNormalSetTest.cc	/^TEST( PackedNodeNormalSet, addNormalVector )$/;"	f
TEST	PackedNodeNormalSetTest.cc	/^TEST( PackedNodeNormalSet, addNormalVector_BOTTOM )$/;"	f
TEST	PackedNodeNormalSetTest.cc	/^TEST( PackedNodeNormalSet, addNormalVector_SOUTH )$/;"	f
TEST	PackedNodeNormalSetTest.cc	/^TEST( PackedNodeNormalSet, addNormalVector_WEST )$/;"	f
TEST	PackedNodeNormalSetTest.cc	/^TEST( PackedNodeNormalSet, calculateResultantNormalVector )$/;"	f
TEST	PackedNodeNormalSetTest.cc	/^TEST( PackedNodeNormalSet, getNormalVector_assert )$/;"	f
TEST	PackedNodeNormalSetTest.cc	/^TEST( PackedNodeNormalSet, sizeof )$/;"	f
TEST	PackedNodeNormalSetTest.cc	/^TEST(PackedNodeNormalSet, addNormalVector_assert )$/;"	f
TEST	PackedNodeNormalSetTest.cc	/^TEST(PackedNodeNormalSet, emptyConstructor )$/;"	f
TEST	PerformanceMeterTest.cc	/^TEST( PerformanceMeter, generateSummary_units )$/;"	f
TEST	PerformanceMeterTest.cc	/^TEST( PerformanceMeter, getNumberOfMeasures )$/;"	f
TEST	PerformanceMeterTest.cc	/^TEST( PerformanceMeter, hasMicrosecondSupport )$/;"	f
TEST	PerformanceMeterTest.cc	/^TEST( PerformanceMeter, start )$/;"	f
TEST	PerformanceMeterTest.cc	/^TEST( PerformanceMeter, start_stop )$/;"	f
TEST	ReaderTest.cc	/^TEST (ReaderVtk, 2x2x2Tiles)$/;"	f
TEST	ReaderTest.cc	/^TEST (ReaderVtk, 3x3x3Tiles_sparse)$/;"	f
TEST	ReaderTest.cc	/^TEST (ReaderVtk, simulation_3)$/;"	f
TEST	ReaderTest.cc	/^TEST (ReaderVtk, singleTile)$/;"	f
TEST	RubyInterpreterTest.cc	/^TEST (RubyInterpreter, constructor_destructor)$/;"	f
TEST	RubyInterpreterTest.cc	/^TEST (RubyInterpreter, constructor_destructor_twice)$/;"	f
TEST	RubyInterpreterTest.cc	/^TEST (RubyInterpreter, modifyNodeLayout)$/;"	f
TEST	RubyInterpreterTest.cc	/^TEST (RubyInterpreter, modifyNodeLayout_setNode_variants)$/;"	f
TEST	RubyInterpreterTest.cc	/^TEST(RubyInterpreter, DISABLED_parallel)$/;"	f
TEST	RubyInterpreterTest.cc	/^TEST(RubyInterpreter, single)$/;"	f
TEST	SettingsTest.cc	/^TEST (Settings, cross_200x200x200)$/;"	f
TEST	SettingsTest.cc	/^TEST (Settings, geometryModificators)$/;"	f
TEST	SettingsTest.cc	/^TEST (Settings, geometryModificators_shapes)$/;"	f
TEST	SettingsTest.cc	/^TEST(Settings, configuration_3)$/;"	f
TEST	SettingsTest.cc	/^TEST(Settings, no_configuration)$/;"	f
TEST	SettingsTest.cc	/^TEST(Settings, simulation_1)$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, createFromSettings_D3Q19_incompressible_BGK_double_CPU )$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, createFromSettings_D3Q19_quasicompressible_MRT_double_GPU )$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, create_D3Q19_incompressible_BGK_double_CPU )$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, create_D3Q19_incompressible_BGK_double_GPU )$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, create_D3Q19_incompressible_MRT_double_CPU )$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, create_D3Q19_incompressible_MRT_double_GPU )$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, create_D3Q19_quasicompressible_BGK_double_CPU )$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, create_D3Q19_quasicompressible_BGK_double_GPU )$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, create_D3Q19_quasicompressible_MRT_double_CPU )$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, create_D3Q19_quasicompressible_MRT_double_GPU )$/;"	f
TEST	SimulationEngineTest.cc	/^TEST( SimulationEngineFactory, create_nonExistent )$/;"	f
TEST	SimulationTest.cc	/^TEST (Simulation, createFrom_cross_200x200x200)$/;"	f
TEST	SimulationTest.cc	/^TEST( Simulation, createFromDirectory )$/;"	f
TEST	SimulationTest.cc	/^TEST( Simulation, createFrom_simulation_1 )$/;"	f
TEST	SimulationTest.cc	/^TEST( Simulation, createFrom_simulation_1_GPU )$/;"	f
TEST	SimulationTest.cc	/^TEST( Simulation, createFrom_simulation_2_GPU )$/;"	f
TEST	SimulationTest.cc	/^TEST( Simulation, createFrom_simulation_3_GPU )$/;"	f
TEST	SimulationTest.cc	/^TEST( Simulation, createFrom_simulation_4_GPU )$/;"	f
TEST	SimulationTest.cc	/^TEST( Simulation, getNode )$/;"	f
TEST	SimulationTest.cc	/^TEST( Simulation, getNode_GPU )$/;"	f
TEST	SimulationTest.cc	/^TEST( Simulation, simulation_geometry_modifiers_CPU )$/;"	f
TEST	SimulationTest.cc	/^TEST( Simulation, simulation_geometry_modifiers_GPU )$/;"	f
TEST	SizeTest.cc	/^TEST(Size, constructor)$/;"	f
TEST	SizeTest.cc	/^TEST(Size, empty_constructor)$/;"	f
TEST	SizeTest.cc	/^TEST(Size, in_range)$/;"	f
TEST	SizeTest.cc	/^TEST(Size, in_range_empty)$/;"	f
TEST	SizeTest.cc	/^TEST(Size, operatorEqual)$/;"	f
TEST	SizeTest.cc	/^TEST(Size, operatorNotEqual)$/;"	f
TEST	StorageTest.cc	/^TEST( Storage, copyCPUtoCPU )$/;"	f
TEST	StorageTest.cc	/^TEST( Storage, copyCPUtoGPU )$/;"	f
TEST	StorageTest.cc	/^TEST( Storage, copyGPUtoCPU )$/;"	f
TEST	StorageTest.cc	/^TEST( Storage, copyGPUtoGPU )$/;"	f
TEST	TileLayoutTest.cc	/^TEST (TileLayout, build_A2_1000x1000)$/;"	f
TEST	TileLayoutTest.cc	/^TEST (TileLayout, build_A2_2200x2200_GPU)$/;"	f
TEST	TileLayoutTest.cc	/^TEST (TileLayout, build_A3_5000x4000_GPU)$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, DISABLED_largePngImage )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, constructor )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, corners )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, generateTiledLayout_no_tiles)$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, generateTiledLayout_singleTile )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, getBeginOfNonEmptyTiles_noThrow_0_Tiles )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, getBeginOfNonEmptyTiles_noThrow_1_Tile )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, getEndOfNonEmptyTiles_noThrow_0_Tiles )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, getEndOfNonEmptyTiles_noThrow_1_Tile )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, getTile )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, getTile_noTiles )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, hasNeighbour_allTiles )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, hasNeighbour_corners )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, hasNeighbour_singleTile )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, hasNeighbour_twoTiles )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, loopIteratorNoTiles )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, loopIteratorSingleTile )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, loopIteratorTwoTiles )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, pngImage )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, pngImage2 )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, singleTile )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, twoTiles )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayout, unpack )$/;"	f
TEST	TileLayoutTest.cc	/^TEST( TileLayoutKernel, constructor )$/;"	f
TEST	TileTest.cc	/^TEST (TileCPU_OPT_1, noOverlapValuesSingleTile)$/;"	f
TEST	TileTest.cc	/^TEST (TileCPU_OPT_1, noOverlapValuesTwoTiles)$/;"	f
TEST	TileTest.cc	/^TEST (TileCPU_OPT_1, velocityArray)$/;"	f
TEST	TileTest.cc	/^TEST (TileCPU_XYZ, noOverlapValuesSingleTile)$/;"	f
TEST	TileTest.cc	/^TEST (TileCPU_XYZ, noOverlapValuesTwoTiles)$/;"	f
TEST	TileTest.cc	/^TEST (TileCPU_XYZ, velocityArray)$/;"	f
TEST	TileTest.cc	/^TEST (Tile_OPT_1, nodeFromTileAccess_POINTERS)$/;"	f
TEST	TileTest.cc	/^TEST (Tile_OPT_1, nodeFromTileAccess_REFERENCE)$/;"	f
TEST	TileTest.cc	/^TEST( Tile, getNNodesPerTile )$/;"	f
TEST	TileTest.cc	/^TEST( Tile, getNValuesPerNode )$/;"	f
TEST	TileTest.cc	/^TEST( TileCPU_OPT_1, getFPostPtr)$/;"	f
TEST	TileTest.cc	/^TEST( TileCPU_OPT_1, getFPtr)$/;"	f
TEST	TileTest.cc	/^TEST( TileCPU_XYZ, getFPostPtr)$/;"	f
TEST	TileTest.cc	/^TEST( TileCPU_XYZ, getFPtr)$/;"	f
TEST	TileTraitsCommonTest.cc	/^TEST( TileTraitsCommon, getNNodesPerTile )$/;"	f
TEST	TiledLatticeTest.cc	/^TEST ( TiledLatticeCPU_OPT_1, operatorEq )$/;"	f
TEST	TiledLatticeTest.cc	/^TEST ( TiledLatticeCPU_XYZ, operatorEq )$/;"	f
TEST	TiledLatticeTest.cc	/^TEST (TiledLattice, modify)$/;"	f
TEST	TiledLatticeTest.cc	/^TEST (TiledLatticeCPU, saveVtk)$/;"	f
TEST	TiledLatticeTest.cc	/^TEST (TiledLatticeCPU_OPT_1, getTile)$/;"	f
TEST	TiledLatticeTest.cc	/^TEST (TiledLatticeCPU_OPT_1, singleTile)$/;"	f
TEST	TiledLatticeTest.cc	/^TEST (TiledLatticeCPU_XYZ, getTile)$/;"	f
TEST	TiledLatticeTest.cc	/^TEST (TiledLatticeCPU_XYZ, singleTile)$/;"	f
TEST	TiledLatticeTest.cc	/^TEST (TiledLatticeGPU_OPT_1, singleTile)$/;"	f
TEST	TiledLatticeTest.cc	/^TEST (TiledLatticeGPU_XYZ, singleTile)$/;"	f
TEST	TiledLatticeTest.cc	/^TEST( TiledLattice_OPT_1, GPU )$/;"	f
TEST	TiledLatticeTest.cc	/^TEST( TiledLattice_XYZ, GPU )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, addNode )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, computeAverageTileUtilisation_NoTiles )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, computeGeometryDensity_manyTiles )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, computeGeometryDensity_singleTile )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, computeNonEmptyTilesFactor_1 )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, computeNonEmptyTilesFactor_noTiles )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, computeNonEmptyTilesFactor_singleTileBoundary_manySolidTiles )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, computeNonEmptyTilesFactor_singleTileFluid )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, computeNonEmptyTilesFactor_singleTileFluid_manySolidTiles )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, computeNonEmptyTilesFactor_singleTileManyNodes_manySolidTiles )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, constructor )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, constructor0 )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, getNBoundaryNodes )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, getNFluidNodes )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, getNSolidNodesInTiles )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, getNSolidNodesInTotal )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, getNSolidNodesInTotal_emptyTile )$/;"	f
TEST	TilingStatisticTest.cc	/^TEST( TilingStatistic, getNUnknownNodes )$/;"	f
TEST	WriterTest.cc	/^TEST (A2_1000x1000, save)$/;"	f
TEST	WriterTest.cc	/^TEST (A2_2200x2200_GPU, save)$/;"	f
TEST	WriterTest.cc	/^TEST (A3_5000x4000_GPU, DISABLED_save)$/;"	f
TEST	WriterTest.cc	/^TEST (Sparse, save)$/;"	f
TEST	WriterTest.cc	/^TEST (Writer, t1)$/;"	f
TEST	WriterTest.cc	/^TEST (WriterVtkImage, DISABLED_perf1)$/;"	f
TEST	WriterTest.cc	/^TEST (WriterVtkImage, t1)$/;"	f
TEST	kernelTileGatherProcessBoundaryCollideTest.cc	/^TEST (kernelTileGatherProcessBoundaryCollideTest_OPT_1, loadCopyOfNodeTypes)$/;"	f
TEST	kernelTileGatherProcessBoundaryCollideTest.cc	/^TEST (kernelTileGatherProcessBoundaryCollideTest_OPT_1, loadCopyOfTileMap)$/;"	f
TEST	kernelTileGatherProcessBoundaryCollideTest.cc	/^TEST (kernelTileGatherProcessBoundaryCollideTest_XYZ, loadCopyOfNodeTypes)$/;"	f
TEST	kernelTileGatherProcessBoundaryCollideTest.cc	/^TEST (kernelTileGatherProcessBoundaryCollideTest_XYZ, loadCopyOfTileMap)$/;"	f
TEST	tests.cc	/^TEST(sanity, empty) $/;"	f
TEST	vtkTest.cc	/^TEST (vtk,1)$/;"	f
TEST_PATH_HPP	TestPath.hpp	2;"	d
TEST_TOOLS_HPP	TestTools.hpp	2;"	d
TEST_ZIGZAG_NE_LINEARIZE	MultidimensionalMappersTest.cc	63;"	d	file:
TEST_ZIGZAG_NE_LINEARIZE	MultidimensionalMappersTest.cc	91;"	d	file:
TEST_ZXY	TileTest.cc	431;"	d	file:
TEST_ZXY	TileTest.cc	454;"	d	file:
THREAD_MAPPER_HH	ThreadMapper.hh	2;"	d
THREAD_MAPPER_HPP	ThreadMapper.hpp	2;"	d
THROW	Exceptions.hpp	71;"	d
TILE	Tile.hh	33;"	d
TILE	Tile.hh	726;"	d
TILED_LATTICE	TiledLattice.hh	137;"	d
TILED_LATTICE	TiledLattice.hh	312;"	d
TILED_LATTICE_GPU	TiledLattice.tcc	170;"	d	file:
TILED_LATTICE_GPU	TiledLattice.tcc	21;"	d	file:
TILED_LATTICE_HH	TiledLattice.hh	2;"	d
TILED_LATTICE_HPP	TiledLattice.hpp	2;"	d
TILED_LATTICE_KERNEL	TiledLattice.tcc	169;"	d	file:
TILED_LATTICE_KERNEL	TiledLattice.tcc	24;"	d	file:
TILED_LATTICE_TCC	TiledLattice.tcc	2;"	d	file:
TILED_LATTICE_TEMPLATE	TiledLattice.tcc	15;"	d	file:
TILED_LATTICE_TEMPLATE	TiledLattice.tcc	171;"	d	file:
TILED_LATTICE_TEST_HPP	TiledLatticeTest.hpp	2;"	d
TILE_BASE	Tile.hh	38;"	d
TILE_BASE	Tile.hh	727;"	d
TILE_CALCULATOR_CPU	TileCalculator.hh	25;"	d
TILE_CALCULATOR_CPU	TileCalculator.hh	344;"	d
TILE_CALCULATOR_HH	TileCalculator.hh	2;"	d
TILE_CALCULATOR_HPP	TileCalculator.hpp	2;"	d
TILE_DATA_ARRANGEMENT_HPP	TileDataArrangement.hpp	2;"	d
TILE_DEFINITIONS_HPP	TileDefinitions.hpp	2;"	d
TILE_HH	Tile.hh	2;"	d
TILE_HPP	Tile.hpp	2;"	d
TILE_ITERATOR_HPP	TileIterator.hpp	2;"	d
TILE_LAYOUT_CPU	TileLayout.hh	383;"	d
TILE_LAYOUT_GPU	TileLayout.tcc	105;"	d	file:
TILE_LAYOUT_GPU	TileLayout.tcc	24;"	d	file:
TILE_LAYOUT_HH	TileLayout.hh	2;"	d
TILE_LAYOUT_HPP	TileLayout.hpp	2;"	d
TILE_LAYOUT_TCC	TileLayout.tcc	2;"	d	file:
TILE_LAYOUT_TEMPLATE	TileLayout.tcc	106;"	d	file:
TILE_LAYOUT_TEMPLATE	TileLayout.tcc	19;"	d	file:
TILE_LAYOUT_TEST_HPP	TileLayoutTest.hpp	2;"	d
TILE_METHODS	Tile.hpp	230;"	d
TILE_METHODS	Tile.hpp	320;"	d
TILE_TEST_HPP	TileTest.hpp	2;"	d
TILE_TRAITS_COMMON	TileTraitsCommon.hh	21;"	d
TILE_TRAITS_COMMON	TileTraitsCommon.hh	79;"	d
TILE_TRAITS_COMMON_HH	TileTraitsCommon.hh	2;"	d
TILE_TRAITS_COMMON_HPP	TileTraitsCommon.hpp	2;"	d
TILING_STATISTIC_HPP	TilingStatistic.hpp	2;"	d
TLD3Q19	TiledLatticeTest.hpp	/^typedef TiledLattice <D3Q19, double, StorageOnCPU, TileDataArrangement::XYZ>	TLD3Q19 ;$/;"	t	namespace:microflow
TLD3Q19GPU	TiledLatticeTest.hpp	/^typedef TiledLattice <D3Q19, double, StorageOnGPU, TileDataArrangement::XYZ>	TLD3Q19GPU ;$/;"	t	namespace:microflow
TOP	Direction.cpp	/^constexpr Direction::D Direction::TOP    ;$/;"	m	class:microflow::Direction	file:
TOP	Direction.hpp	/^		static constexpr D TOP    = 0b00010000 ; \/\/ z = +1$/;"	m	class:microflow::Direction
TOP	NodeType.hpp	/^	TOP    = 6,$/;"	m	class:microflow::NodeClass::PlacementModifier
TOSTRING__	macros.hpp	11;"	d
TO_STRING	macros.hpp	12;"	d
TTCtst	TileTraitsCommonTest.cc	/^class TTCtst : public TileTraitsCommon<4,2>$/;"	c	file:
TYPE_NAMES_EXTRACTOR	TypeNamesExtractor.hh	21;"	d
TYPE_NAMES_EXTRACTOR	TypeNamesExtractor.hh	92;"	d
TYPE_NAMES_EXTRACTOR_HH	TypeNamesExtractor.hh	2;"	d
TYPE_NAMES_EXTRACTOR_HPP	TypeNamesExtractor.hpp	2;"	d
TestNode	NodeCalculatorTest.cc	/^class TestNode$/;"	c	file:
TestNode::DataTypeType	NodeCalculatorTest.cc	/^		typedef double DataTypeType ;$/;"	t	class:TestNode	file:
TestNode::f	NodeCalculatorTest.cc	/^		HD double & f (Direction direction)$/;"	f	class:TestNode
TestNode::f	NodeCalculatorTest.cc	/^		HD double & f (Direction::D direction)$/;"	f	class:TestNode
TestNode::f	NodeCalculatorTest.cc	/^		HD double & f (Direction::DirectionIndex directionIndex)$/;"	f	class:TestNode
TestNode::fPost	NodeCalculatorTest.cc	/^		HD double & fPost (Direction direction)$/;"	f	class:TestNode
TestNode::fPost	NodeCalculatorTest.cc	/^		HD double & fPost (Direction::D direction)$/;"	f	class:TestNode
TestNode::fPost	NodeCalculatorTest.cc	/^		HD double & fPost (Direction::DirectionIndex directionIndex)$/;"	f	class:TestNode
TestNode::fPost_	NodeCalculatorTest.cc	/^		double fPost_[19] ;$/;"	m	class:TestNode	file:
TestNode::f_	NodeCalculatorTest.cc	/^		double f_[19] ;$/;"	m	class:TestNode	file:
TestNode::nodeNormals	NodeCalculatorTest.cc	/^		HD PackedNodeNormalSet & nodeNormals()$/;"	f	class:TestNode
TestNode::nodeNormals_	NodeCalculatorTest.cc	/^		PackedNodeNormalSet nodeNormals_ ;$/;"	m	class:TestNode	file:
TestNode::nodeType	NodeCalculatorTest.cc	/^		HD NodeType & nodeType()$/;"	f	class:TestNode
TestNode::nodeType_	NodeCalculatorTest.cc	/^		NodeType nodeType_ ;$/;"	m	class:TestNode	file:
TestNode::rho	NodeCalculatorTest.cc	/^		HD double & rho() $/;"	f	class:TestNode
TestNode::rhoBoundary	NodeCalculatorTest.cc	/^		HD double & rhoBoundary() $/;"	f	class:TestNode
TestNode::rhoBoundary_	NodeCalculatorTest.cc	/^		double rhoBoundary_ ;$/;"	m	class:TestNode	file:
TestNode::rho_	NodeCalculatorTest.cc	/^		double rho_ ;$/;"	m	class:TestNode	file:
TestNode::solidNeighborMask	NodeCalculatorTest.cc	/^		HD SolidNeighborMask & solidNeighborMask()$/;"	f	class:TestNode
TestNode::solidNeighborMask_	NodeCalculatorTest.cc	/^		SolidNeighborMask solidNeighborMask_ ;$/;"	m	class:TestNode	file:
TestNode::u	NodeCalculatorTest.cc	/^		HD double & u (Axis axis)$/;"	f	class:TestNode
TestNode::uBoundary	NodeCalculatorTest.cc	/^		HD double & uBoundary (Axis axis )$/;"	f	class:TestNode
TestNode::uBoundary_	NodeCalculatorTest.cc	/^		double uBoundary_[3] ;$/;"	m	class:TestNode	file:
TestNode::u_	NodeCalculatorTest.cc	/^		double u_[3] ;$/;"	m	class:TestNode	file:
ThreadMapper	ThreadMapper.hh	/^ThreadMapper( const TiledLattice & tiledLattice )$/;"	f	class:microflow::ThreadMapper
ThreadMapper	ThreadMapper.hpp	/^class ThreadMapper$/;"	c	namespace:microflow
ThreadMapper	ThreadMapper.hpp	/^class ThreadMapper< TiledLattice, SingleBlockPerTile, SingleThreadPerNode >$/;"	c	namespace:microflow
Tile	Tile.hh	/^Tile( size_t tileIndex,$/;"	f	class:microflow::TILE
Tile	Tile.hh	/^Tile( size_t tileIndex,$/;"	f	class:microflow::Tile
Tile	Tile.hpp	/^class Tile : public TileBase< LatticeArrangement, DataType, Edge, Storage, DataArrangement >$/;"	c	namespace:microflow
Tile	Tile.hpp	/^class Tile <LatticeArrangement, DataType, Edge, StorageInKernel, DataArrangement> $/;"	c	namespace:microflow
TileBase	Tile.hh	/^TileBase( $/;"	f	class:microflow::TILE_BASE
TileBase	Tile.hpp	/^class TileBase : public TileTraitsCommon< Edge, LatticeArrangement::getD() >$/;"	c	namespace:microflow
TileCalculator	TileCalculator.hh	/^TileCalculator (DataType rho0LB, $/;"	f	class:microflow::TILE_CALCULATOR_CPU
TileCalculator	TileCalculator.hpp	/^class TileCalculator< $/;"	c	namespace:microflow
TileCalculatorType	LatticeCalculator.hpp	/^							TileCalculatorType ;$/;"	t	class:microflow::LatticeCalculator
TileD3Q19	TiledLatticeTest.hpp	/^					TileD3Q19 ;$/;"	t	namespace:microflow
TileDataArrangement	TileDataArrangement.hpp	/^enum class TileDataArrangement$/;"	c	namespace:microflow
TileIndex	TileLayout.hpp	/^				typedef TileIterator TileIndex ;$/;"	t	class:microflow::TileLayoutBase::NonEmptyTile
TileIterator	TileIterator.hpp	/^typedef size_t TileIterator ;$/;"	t	namespace:microflow
TileLayout	TileLayout.cpp	/^TileLayout<StorageOnCPU>::TileLayout( const NodeLayout & nodeLayout )$/;"	f	class:microflow::TileLayout
TileLayout	TileLayout.hpp	/^class TileLayout$/;"	c	namespace:microflow
TileLayout	TileLayout.hpp	/^class TileLayout< StorageInKernel >$/;"	c	namespace:microflow
TileLayout	TileLayout.hpp	/^class TileLayout< StorageOnCPU >$/;"	c	namespace:microflow
TileLayout	TileLayout.hpp	/^class TileLayout< StorageOnGPU >$/;"	c	namespace:microflow
TileLayout	TileLayout.tcc	/^TileLayout( TileLayout< StorageOnCPU > & tileLayoutCPU )$/;"	f	class:microflow::TILE_LAYOUT_GPU
TileLayout	TileLayout.tcc	/^TileLayout( TileLayout<StorageOnGPU> & tileLayoutGPU )$/;"	f	class:microflow::TileLayout
TileLayoutBase	TileLayout.hh	/^TileLayoutBase( $/;"	f	class:microflow::TileLayoutBase
TileLayoutBase	TileLayout.hpp	/^		TileLayoutBase() {} ; \/\/TODO: remove ?$/;"	f	class:microflow::TileLayoutBase
TileLayoutBase	TileLayout.hpp	/^class TileLayoutBase$/;"	c	namespace:microflow
TileLayoutType	TilingStatistic.hpp	/^		typedef TileLayout<StorageOnCPU>  TileLayoutType ;$/;"	t	class:microflow::TilingStatistic
TileTraitsCommon	TileTraitsCommon.hpp	/^class TileTraitsCommon$/;"	c	namespace:microflow
TileType	TileCalculator.hpp	/^		typedef Tile<LatticeArrangement, DataType, Edge, StorageOnCPU, DataArrangement>  TileType ;$/;"	t	class:microflow::TileCalculator
TileType	TiledLattice.hpp	/^									DataArrangement> TileType ;$/;"	t	class:microflow::TiledLattice
TileType	TiledLattice.hpp	/^									StorageInKernel, DataArrangement> TileType ;$/;"	t	class:microflow::TiledLattice
TileType	TiledLattice.hpp	/^									StorageOnCPU, DataArrangement> TileType ;$/;"	t	class:microflow::TiledLattice
TileType	TilingStatistic.hpp	/^		typedef TileLayout<StorageOnCPU>::NonEmptyTile TileType ;$/;"	t	class:microflow::TilingStatistic
TiledLattice	TiledLattice.cpp	/^TiledLattice( $/;"	f	class:microflow::TiledLattice
TiledLattice	TiledLattice.hpp	/^class    TiledLattice <LatticeArrangement, DataType, StorageInKernel, DataArrangement> $/;"	c	namespace:microflow
TiledLattice	TiledLattice.hpp	/^class    TiledLattice <LatticeArrangement, DataType, StorageOnGPU, DataArrangement> $/;"	c	namespace:microflow
TiledLattice	TiledLattice.hpp	/^class TiledLattice <LatticeArrangement, DataType, StorageOnCPU, DataArrangement>$/;"	c	namespace:microflow
TiledLattice	TiledLattice.tcc	/^TiledLattice (TiledLattice <LatticeArrangement, DataType, StorageOnGPU, DataArrangement> $/;"	f	class:microflow::TILED_LATTICE_KERNEL
TiledLattice	TiledLattice.tcc	/^TiledLattice( TiledLatticeCPU & tiledLatticeCPU,$/;"	f	class:microflow::TILED_LATTICE_GPU
TiledLatticeBase	TiledLattice.hpp	/^class TiledLatticeBase$/;"	c	namespace:microflow
TiledLatticeBaseTwoCopies	TiledLattice.hh	/^TiledLatticeBaseTwoCopies()$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
TiledLatticeBaseTwoCopies	TiledLattice.hpp	/^class TiledLatticeBaseTwoCopies$/;"	c	namespace:microflow
TiledLatticeCPU	TiledLattice.hpp	/^							TiledLatticeCPU ;$/;"	t	class:microflow::TiledLattice
TiledLatticeType	LatticeCalculator.hpp	/^						TiledLatticeType ;$/;"	t	class:microflow::LatticeCalculator
TiledLatticeType	Writer.hpp	/^													StorageOnCPU,DataArrangement> TiledLatticeType ;$/;"	t	class:microflow::Writer
TiledLatticeTypeCPU	SimulationEngine.hpp	/^													tileDataArrangement> TiledLatticeTypeCPU ;$/;"	t	class:microflow::SimulationEngineSpecializationBase
TiledLatticeTypeGPU	SimulationEngine.hpp	/^													TileDataArrangement::OPT_1> TiledLatticeTypeGPU ;$/;"	t	class:microflow::SimulationEngineSpecialization
TilingStatistic	TilingStatistic.cpp	/^TilingStatistic() :$/;"	f	class:microflow::TilingStatistic
TilingStatistic	TilingStatistic.hpp	/^class TilingStatistic$/;"	c	namespace:microflow
TimePoint	PerformanceMeter.hpp	/^				typedef Clock::time_point TimePoint ;$/;"	t	class:microflow::PerformanceMeter::Measure
TraitsType	Tile.hpp	/^		typedef TileTraitsCommon< Edge, LatticeArrangement::getD() >  TraitsType ;$/;"	t	class:microflow::TileBase
TraitsType	Tile.hpp	/^		typedef typename BaseType::TraitsType TraitsType ;$/;"	t	class:microflow::Tile
TypeNamesExtractor	TypeNamesExtractor.hpp	/^class TypeNamesExtractor$/;"	c	namespace:microflow
TypeNamesExtractorType	SimulationEngine.hpp	/^							TypeNamesExtractorType ;$/;"	t	class:microflow::SimulationEngineSpecializationBase
U	Tile.hpp	/^			U,$/;"	m	class:microflow::TileBase::Data
UNKNOWN	NodeType.hpp	/^	UNKNOWN  = 3 $/;"	m	class:microflow::NodeClass
USE_LINEARIZED_MATRIX_BASE_METHODS	LinearizedMatrix.hpp	136;"	d
USE_LINEARIZED_MATRIX_BASE_METHODS	LinearizedMatrix.hpp	63;"	d
U_BOUNDARY	Tile.hpp	/^			U_BOUNDARY,$/;"	m	class:microflow::TileBase::Data
U_T0	Tile.hpp	/^			U_T0,$/;"	m	class:microflow::TileBase::Data
UniversalCoordinates	Coordinates.hh	/^UniversalCoordinates( T x, T y, T z )$/;"	f	class:microflow::UniversalCoordinates
UniversalCoordinates	Coordinates.hh	/^UniversalCoordinates( const Direction & direction )$/;"	f	class:microflow::UniversalCoordinates
UniversalCoordinates	Coordinates.hh	/^UniversalCoordinates()$/;"	f	class:microflow::UniversalCoordinates
UniversalCoordinates	Coordinates.hpp	/^class UniversalCoordinates$/;"	c	namespace:microflow
UnsafeOptimizations	Optimization.hpp	/^class UnsafeOptimizations$/;"	c	namespace:microflow
VELOCITY	NodeBaseType.hpp	/^	VELOCITY      = 3,$/;"	m	class:microflow::NodeBaseType
VELOCITY_0	NodeBaseType.hpp	/^	VELOCITY_0    = 4,$/;"	m	class:microflow::NodeBaseType
VTK_TYPE	VtkTypes.hpp	/^		static constexpr int VTK_TYPE = VTK_DOUBLE ;$/;"	m	class:microflow::VtkTypes
VTK_TYPES_HPP	VtkTypes.hpp	2;"	d
ValidCopyID	TiledLattice.hpp	/^		enum class ValidCopyID$/;"	c	class:microflow::TiledLatticeBaseTwoCopies
VectorType	PackedNodeNormalSet.hpp	/^		typedef Direction::D  VectorType ;$/;"	t	class:microflow::PackedNodeNormalSet
VelocityArray	Tile.hpp	/^		typedef DataType VelocityArray [LatticeArrangement::getD()][Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
VoxelMatrix	apps/stl2vtk.cpp	/^typedef Matrix <char, 3> VoxelMatrix ;$/;"	t	file:
VtkTypes	VtkTypes.hpp	/^class VtkTypes <double>$/;"	c	namespace:microflow
W	Direction.hpp	/^constexpr Direction::D   W   = Direction::WEST ;$/;"	m	namespace:microflow
WB	Direction.hpp	/^constexpr Direction::D   WB  = Direction::WEST + Direction::BOTTOM ;$/;"	m	namespace:microflow
WEST	Direction.cpp	/^constexpr Direction::D Direction::WEST   ;$/;"	m	class:microflow::Direction	file:
WEST	Direction.hpp	/^		static constexpr D WEST   = 0b00000011 ; \/\/ x = -1$/;"	m	class:microflow::Direction
WEST	NodeType.hpp	/^	WEST   = 4,$/;"	m	class:microflow::NodeClass::PlacementModifier
WRITER	Writer.hh	162;"	d
WRITER	Writer.hh	26;"	d
WRITER_HH	Writer.hh	2;"	d
WRITER_HPP	Writer.hpp	2;"	d
WRITER_VTK_HH	WriterVtk.hh	2;"	d
WRITER_VTK_HPP	WriterVtk.hpp	2;"	d
WT	Direction.hpp	/^constexpr Direction::D   WT  = Direction::WEST + Direction::TOP ;$/;"	m	namespace:microflow
WhereSaveF	NodeCalculator.hpp	/^enum class WhereSaveF$/;"	c	namespace:microflow
Writer	Writer.hh	/^Writer (TiledLatticeType & tiledLattice) $/;"	f	class:microflow::WRITER
Writer	Writer.hpp	/^class Writer$/;"	c	namespace:microflow
WriterVtk	apps/stl2vtk.cpp	/^class WriterVtk : public vtkXMLImageDataWriter$/;"	c	file:
WriterVtk	apps/stl2vtk.cpp	/^vtkStandardNewMacro (WriterVtk) ;$/;"	v
WriterVtk::write	apps/stl2vtk.cpp	/^		void write $/;"	f	class:WriterVtk
WriterVtkBase	WriterVtk.hpp	/^class WriterVtkBase : public VtkXmlWriterClass$/;"	c	namespace:microflow
WriterVtkImage	WriterVtk.hpp	/^class WriterVtkImage $/;"	c	namespace:microflow
WriterVtkUnstructured	WriterVtk.cpp	/^vtkStandardNewMacro (WriterVtkUnstructured) ;$/;"	v
WriterVtkUnstructured	WriterVtk.hpp	/^class WriterVtkUnstructured$/;"	c	namespace:microflow
X	Axis.hpp	/^	X = 0,$/;"	m	class:microflow::Axis
X	Axis.hpp	/^static constexpr unsigned X = 0 ;$/;"	m	class:microflow::Axis
XYZ	MultidimensionalMappers.hpp	/^class XYZ$/;"	c	namespace:microflow
XYZ	TileDataArrangement.hpp	/^	XYZ , 	\/\/ Default, all data in row-order.$/;"	m	class:microflow::TileDataArrangement
Y	Axis.hpp	/^	Y = 1,$/;"	m	class:microflow::Axis
Y	Axis.hpp	/^static constexpr unsigned Y = 1 ;$/;"	m	class:microflow::Axis
YXZ	MultidimensionalMappers.hpp	/^class YXZ$/;"	c	namespace:microflow
Z	Axis.hpp	/^	Z = 2$/;"	m	class:microflow::Axis
Z	Axis.hpp	/^static constexpr unsigned Z = 2 ;$/;"	m	class:microflow::Axis
ZigzagNE	MultidimensionalMappers.hpp	/^class ZigzagNE$/;"	c	namespace:microflow
_Nx	Settings.hpp	/^		unsigned _Nx ;$/;"	m	class:microflow::Settings
_Ny	Settings.hpp	/^		unsigned _Ny ;$/;"	m	class:microflow::Settings
_rbi	Settings.hpp	/^		RubyInterpreter * _rbi ; \/\/FIXME: unique_ptr$/;"	m	class:microflow::Settings
addBoundaryDefinition	BoundaryDefinitions.hh	/^addBoundaryDefinition( double velocityX, double velocityY, double velocityZ, $/;"	f	class:microflow::BoundaryDefinitions
addCellFromCorner	WriterVtk.hh	/^addCellFromCorner$/;"	f	class:microflow::WriterVtkUnstructured
addCellsFromEdgeSB	WriterVtk.hh	/^addCellsFromEdgeSB$/;"	f	class:microflow::WriterVtkUnstructured
addCellsFromEdgeSW	WriterVtk.hh	/^addCellsFromEdgeSW$/;"	f	class:microflow::WriterVtkUnstructured
addCellsFromEdgeWB	WriterVtk.hh	/^addCellsFromEdgeWB$/;"	f	class:microflow::WriterVtkUnstructured
addCellsFromPlaneB	WriterVtk.hh	/^addCellsFromPlaneB$/;"	f	class:microflow::WriterVtkUnstructured
addCellsFromPlaneS	WriterVtk.hh	/^addCellsFromPlaneS$/;"	f	class:microflow::WriterVtkUnstructured
addCellsFromPlaneW	WriterVtk.hh	/^addCellsFromPlaneW$/;"	f	class:microflow::WriterVtkUnstructured
addCellsFromTile	WriterVtk.hh	/^addCellsFromTile$/;"	f	class:microflow::WriterVtkUnstructured
addDataToGrid	WriterVtk.hh	/^addDataToGrid$/;"	f	class:microflow::WriterVtkUnstructured
addNode	TilingStatistic.cpp	/^addNode( const NodeType & nodeType )$/;"	f	class:microflow::TilingStatistic
addNormalVector	PackedNodeNormalSet.hh	/^addNormalVector( const Direction & normalVector )$/;"	f	class:microflow::PackedNodeNormalSet
addRhoBoundaryPhysical	ModificationRhoU.hh	/^addRhoBoundaryPhysical (Coordinates coordinates, double rho)$/;"	f	class:microflow::ModificationRhoU
addRhoPhysical	ModificationRhoU.hh	/^addRhoPhysical (Coordinates coordinates, double rho)$/;"	f	class:microflow::ModificationRhoU
addTile	TilingStatistic.cpp	/^addTile( const TileType & tile, const TileLayoutType & tileLayout )$/;"	f	class:microflow::TilingStatistic
addUBoundaryPhysical	ModificationRhoU.hh	/^addUBoundaryPhysical (Coordinates coordinates, double ux, double uy, double uz)$/;"	f	class:microflow::ModificationRhoU
addUPhysical	ModificationRhoU.hh	/^addUPhysical (Coordinates coordinates, double ux, double uy, double uz)$/;"	f	class:microflow::ModificationRhoU
allValues_	Tile.hpp	/^		Storage< DataType > & allValues_ ;$/;"	m	class:microflow::TileBase
allValues_	TiledLattice.hpp	/^		StorageInKernel< DataType > allValues_ ;$/;"	m	class:microflow::TiledLattice
allValues_	TiledLattice.hpp	/^		StorageOnCPU< DataType > allValues_ ;$/;"	m	class:microflow::TiledLattice
allValues_	TiledLattice.hpp	/^		StorageOnGPU< DataType > allValues_ ;$/;"	m	class:microflow::TiledLattice
allocateArray1D	WriterVtk.hh	/^allocateArray1D (unsigned nElements)$/;"	f	class:microflow::WriterVtkBase
allocateArray3D	WriterVtk.hh	/^allocateArray3D (unsigned nElements)$/;"	f	class:microflow::WriterVtkBase
apply	LBMOperatorChooser.hh	/^apply (Calculator & calculator, Element & element)$/;"	f	class:microflow::RhoBB2Calculator
apply	LBMOperatorChooser.hh	/^apply( Calculator & calculator, Element & element )$/;"	f	class:microflow::BoundaryProcessor
apply	LBMOperatorChooser.hh	/^apply( Calculator & calculator, Element & element )$/;"	f	class:microflow::Collider
apply	LBMOperatorChooser.hh	/^apply( Calculator & calculator, Element & element )$/;"	f	class:microflow::InitializatorAtEquilibrium
apply	LBMOperatorChooser.hh	/^apply( Calculator & calculator, Element & element )$/;"	f	class:microflow::Propagator
areCoordinatesInLimits	Size.hh	/^areCoordinatesInLimits(Coordinates coordinates) const$/;"	f	class:microflow::Size
areCoordinatesInLimits	Size.hh	/^areCoordinatesInLimits(size_t x, size_t y, size_t z) const$/;"	f	class:microflow::Size
areEqual	NodeFromTileTest.hpp	/^bool areEqual (NodeFromTile <Tile,DataStorage> & node1, $/;"	f	namespace:microflow
areEqual	TiledLatticeTest.hpp	/^bool areEqual (TiledLattice const & tLattice1, TiledLattice const & tLattice2)$/;"	f	namespace:microflow
areFloatsNotEqual	TestTools.hpp	/^bool areFloatsNotEqual( D f1, D f2 )$/;"	f
ball	modifyNodeLayout.rb	/^def ball( origin, radius )                                      \\n$/;"	f	class:box
baseType	Simulation.hpp	/^				NodeBaseType baseType ;$/;"	m	struct:microflow::Simulation::NodeLB
baseType_	NodeType.hpp	/^				PackedDataType baseType_                : BITS_PER_BASE_TYPE                 ; $/;"	m	struct:microflow::NodeClass::NodeType::__anon3::__anon4
begin	LinearizedMatrix.hh	/^begin() const$/;"	f	class:microflow::LINEARIZED_MATRIX
begin	LinearizedMatrix.hh	/^begin()$/;"	f	class:microflow::LINEARIZED_MATRIX
begin	NodeLayout.hh	/^begin() $/;"	f	class:microflow::NodeLayout
begin	NodeLayout.hh	/^begin() const $/;"	f	class:microflow::NodeLayout
begin	PerformanceMeter.hpp	/^				TimePoint begin ;$/;"	m	class:microflow::PerformanceMeter::Measure
bitMaskVector3D	PackedDirectionVector.hpp	/^		static constexpr unsigned bitMaskVector3D = 0b00111111 ;$/;"	m	class:microflow::PackedDirectionVector
bitSetGPU	BitSetTest.cc	/^static __device__ BitSet bitSetGPU ;$/;"	v	file:
bitTest_testGPU	BitSetTest.cc	/^bool bitTest_testGPU (unsigned pos)$/;"	f
bitsPerVector3D	PackedDirectionVector.hpp	/^		static constexpr unsigned bitsPerVector3D = 3*2 ;$/;"	m	class:microflow::PackedDirectionVector
boundary	ClassificatorBoundaryAtLocation.cpp	109;"	d	file:
boundary	ClassificatorBoundaryAtLocation.cpp	93;"	d	file:
boundaryAssignments_	ColoredPixelClassificator.hpp	/^		std::vector< ColorAssignment > boundaryAssignments_ ;$/;"	m	class:microflow::ColoredPixelClassificator
boundaryAtLocations_	ClassificatorBoundaryAtLocation.hpp	/^		std::vector <BoundaryAtLocations> boundaryAtLocations_ ;$/;"	m	class:microflow::ClassificatorBoundaryAtLocation
boundaryDefinitionIndex_	NodeType.hpp	/^				PackedDataType boundaryDefinitionIndex_ : BITS_PER_BOUNDARY_DEFINITION_INDEX ;$/;"	m	struct:microflow::NodeClass::NodeType::__anon3::__anon4
boundaryDefinitions_	NodeLayout.hpp	/^		BoundaryDefinitions boundaryDefinitions_ ;$/;"	m	class:microflow::NodeLayout
box	modifyNodeLayout.rb	/^def box( corner1, corner2, params={} )$/;"	f
buildBoundaryRhoLBArray	WriterVtk.hh	/^buildBoundaryRhoLBArray$/;"	f	class:microflow::WriterVtkUnstructured
buildBoundaryVelocityLBArray	WriterVtk.hh	/^buildBoundaryVelocityLBArray$/;"	f	class:microflow::WriterVtkUnstructured
buildBoundaryVelocityPhysicalArray	WriterVtk.hh	/^buildBoundaryVelocityPhysicalArray$/;"	f	class:microflow::WriterVtkUnstructured
buildCross	WriterTest.cc	/^void buildCross (NodeLayout & nodeLayout, Coordinates origin)$/;"	f
buildFArray	WriterVtk.hh	/^buildFArray$/;"	f	class:microflow::WriterVtkUnstructured
buildFArrayName	BaseIO.hpp	/^buildFArrayName (const std::string & prefix,$/;"	f	namespace:microflow
buildNodeArrays	WriterVtk.hh	/^buildNodeArrays$/;"	f	class:microflow::WriterVtkUnstructured
buildNodeType	Settings.cpp	/^	buildNodeType (const std::string name) const$/;"	f	class:microflow::Settings
buildPressureArray	WriterVtk.hh	/^buildPressureArray$/;"	f	class:microflow::WriterVtkUnstructured
buildRhoLBArray	WriterVtk.hh	/^buildRhoLBArray$/;"	f	class:microflow::WriterVtkUnstructured
buildRhoT0LBArray	WriterVtk.hh	/^buildRhoT0LBArray$/;"	f	class:microflow::WriterVtkUnstructured
buildTileLayoutForCase	TileLayoutTest.cc	/^void buildTileLayoutForCase (const string caseName)$/;"	f
buildUnstructuredGrid	WriterVtk.hh	/^buildUnstructuredGrid$/;"	f	class:microflow::WriterVtkUnstructured
buildVelocityLBArray	WriterVtk.hh	/^buildVelocityLBArray$/;"	f	class:microflow::WriterVtkUnstructured
buildVelocityPhysicalArray	WriterVtk.hh	/^buildVelocityPhysicalArray$/;"	f	class:microflow::WriterVtkUnstructured
buildVelocityT0LBArray	WriterVtk.hh	/^buildVelocityT0LBArray$/;"	f	class:microflow::WriterVtkUnstructured
build_2T_angle	WriterTest.cc	/^void build_2T_angle (NodeLayout & nodeLayout)$/;"	f
build_2T_cross	WriterTest.cc	/^void build_2T_cross (NodeLayout & nodeLayout)$/;"	f
build_2T_fluid	WriterTest.cc	/^void build_2T_fluid (NodeLayout & nodeLayout)$/;"	f
build_2Tx2Tx2T_fluid	WriterTest.cc	/^void build_2Tx2Tx2T_fluid (NodeLayout & nodeLayout)$/;"	f
bytesToHuman	microflowTools.cpp	/^string bytesToHuman (size_t numberOfBytes)$/;"	f	namespace:microflow
c	LatticeArrangementD3Q19.cpp	/^constexpr Direction::D LatticeArrangement<3,19>::c[] ;$/;"	m	class:microflow::LatticeArrangement	file:
c	LatticeArrangementD3Q19.hpp	/^		static constexpr Direction::D c[19] = { O,$/;"	m	class:microflow::LatticeArrangement
c	LatticeArrangementD3Q27.cpp	/^constexpr Direction::D LatticeArrangement<3,27>::c[] ;$/;"	m	class:microflow::LatticeArrangement	file:
c	LatticeArrangementD3Q27.hpp	/^		static constexpr Direction::D c[27] = { O,$/;"	m	class:microflow::LatticeArrangement
cGPU	LatticeArrangementD3Q19Test.cc	/^static __device__ Direction::D cGPU ;$/;"	v	file:
calculateResultantNormalVector	PackedNodeNormalSet.hh	/^calculateResultantNormalVector()$/;"	f	class:microflow::PackedNodeNormalSet
callKernelTileGatherProcessBoundaryCollide	LatticeCalculator.tcc	/^callKernelTileGatherProcessBoundaryCollide$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
canContinue	ProgramParameters.cpp	/^canContinue()$/;"	f	class:microflow::ProgramParameters
canContinue_	ProgramParameters.hpp	/^		bool canContinue_ ;$/;"	m	class:microflow::ProgramParameters
casePath_	ProgramParameters.hpp	/^		std::string casePath_ ;$/;"	m	class:microflow::ProgramParameters
castPtr	Tile.hh	/^castPtr( DataType * ptr )$/;"	f	class:microflow::TILE_BASE
characteristicLengthLB_	Settings.hpp	/^		double characteristicLengthLB_ ;$/;"	m	class:microflow::Settings
characteristicLengthPhysical_	Settings.hpp	/^		double characteristicLengthPhysical_   ; \/\/ [m]$/;"	m	class:microflow::Settings
characteristicVelocityLB_	Settings.hpp	/^		double characteristicVelocityLB_ ;$/;"	m	class:microflow::Settings
characteristicVelocityPhysical_	Settings.hpp	/^		double characteristicVelocityPhysical_ ; \/\/ [m\/s]$/;"	m	class:microflow::Settings
checkNode	SimulationTest.cc	/^void checkNode( const Simulation::NodeLB & node,$/;"	f
checkTile	TileTest.hpp	/^void checkTile (Tile & tile, unsigned & val)$/;"	f	namespace:microflow
checkTileNodes	TileTest.hpp	/^void checkTileNodes (Tile & tile, unsigned & val)$/;"	f	namespace:microflow
checkTileNodesWithPointers	NodeFromTileTest.cc	/^void checkTileNodesWithPointers( TiledLattice & tiledLattice, $/;"	f	file:
checkVolFileHeader	NodeLayoutWriterTest.cc	/^void checkVolFileHeader(istream & str, unsigned dimX, unsigned dimY, unsigned dimZ)$/;"	f
classificatorBoundaryAtLocation_	Simulation.hpp	/^		std::unique_ptr <ClassificatorBoundaryAtLocation> classificatorBoundaryAtLocation_ ;$/;"	m	class:microflow::Simulation
classifyNodesPlacedOnBoundary	ExpandedNodeLayout.cpp	/^classifyNodesPlacedOnBoundary (const Settings & settings)$/;"	f	class:microflow::ExpandedNodeLayout
classifyPlacementForBoundaryNodes	ExpandedNodeLayout.cpp	/^classifyPlacementForBoundaryNodes (const Settings & settings)$/;"	f	class:microflow::ExpandedNodeLayout
cleanDirectory	fileUtils.cpp	/^void cleanDirectory( const string directoryPath )$/;"	f	namespace:microflow
clear	BitSet.hh	/^clear()$/;"	f	class:microflow::BitSet
clear	PerformanceMeter.hh	/^clear()$/;"	f	class:microflow::PerformanceMeter
close	gzstream.cpp	/^gzstreambuf * gzstreambuf::close() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
close	gzstream.cpp	/^void gzstreambase::close() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
closeMRubyInterpreter	MRubyInterpreter.cpp	/^    closeMRubyInterpreter()$/;"	f	class:microflow::MRubyInterpreter
collide	LatticeCalculator.hh	/^collide( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
collide	LatticeCalculator.tcc	/^collide( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
collide	NodeCalculator.hh	/^collide( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_D3Q19
collide	TileCalculator.hh	/^collide( TileType & tile )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
collideAndPropagate	Simulation.cpp	/^collideAndPropagate (bool shouldComputeRhoU)$/;"	f	class:microflow::Simulation
collideAndPropagate	SimulationEngine.hh	/^collideAndPropagate (bool shouldComputeRhoU __attribute__((unused)))$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
collideAndPropagate	SimulationEngine.tcc	/^collideAndPropagate (bool shouldComputeRhoU)$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
collideBGK	NodeCalculator.hh	/^collideBGK( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_BASE
collideBounceBack2	NodeCalculator.hh	/^collideBounceBack2 (Node & node)$/;"	f	class:microflow::NODE_CALCULATOR_BASE
collideMRT	NodeCalculator.hh	/^collideMRT( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_D3Q19
collideOpt	LatticeCalculator.tcc	/^collideOpt (TiledLatticeType & tiledLattice)$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
collisionModelName_	Settings.hpp	/^		std::string collisionModelName_      ;$/;"	m	class:microflow::Settings
colorEquals	ColorAssignment.hh	/^colorEquals(const png::rgb_pixel & color) const$/;"	f	class:microflow::ColorAssignment
color_	ColorAssignment.hpp	/^		png::rgb_pixel color_ ;$/;"	m	class:microflow::ColorAssignment
coloredPixelClassificator_	Simulation.hpp	/^		std::unique_ptr< ColoredPixelClassificator > coloredPixelClassificator_ ;$/;"	m	class:microflow::Simulation
compare	LatticeCalculatorTest.cc	/^bool compare (const TiledLattice & tl1, const TiledLattice & tl2)$/;"	f	file:
compareNodeBaseTypes	ReaderVtk.hh	/^compareNodeBaseTypes (TiledLattice & tiledLattice, $/;"	f	class:microflow::ReaderVtkBase
compareNodes	kernelTileGatherProcessBoundaryCollideTest.cc	/^void compareNodes (Coordinates tileCorner, int x, int y, int z,$/;"	f
comparePlacementModifiers	ReaderVtk.hh	/^comparePlacementModifiers (TiledLattice & tiledLattice, $/;"	f	class:microflow::ReaderVtkBase
computationalEngineName_	Settings.hpp	/^		std::string computationalEngineName_ ;$/;"	m	class:microflow::Settings
computeAverageDuration	PerformanceMeter.cpp	/^computeAverageDuration()$/;"	f	class:microflow::PerformanceMeter
computeAverageTileUtilisation	TilingStatistic.cpp	/^computeAverageTileUtilisation() const$/;"	f	class:microflow::TilingStatistic
computeBlockDimension	ThreadMapper.hh	/^computeBlockDimension() const$/;"	f	class:microflow::ThreadMapper
computeBoundaryToFluidNodesRatio	TilingStatistic.cpp	/^computeBoundaryToFluidNodesRatio() const $/;"	f	class:microflow::TilingStatistic
computeDataBlockInTileIndex	Tile.hh	/^computeDataBlockInTileIndex (Data data, Axis axis)$/;"	f	class:microflow::TILE_BASE
computeDataBlockInTileIndex	Tile.hh	/^computeDataBlockInTileIndex (Data data, Axis axis, Direction::DirectionIndex fIndex)$/;"	f	class:microflow::TILE_BASE
computeDataBlockInTileIndex	Tile.hh	/^computeDataBlockInTileIndex (Data data, Direction::DirectionIndex fIndex)$/;"	f	class:microflow::TILE_BASE
computeDirectionOfPlaneWithAllSolidNeighbors	SolidNeighborMask.hh	/^computeDirectionOfPlaneWithAllSolidNeighbors() const$/;"	f	class:microflow::SolidNeighborMask
computeDurationInMicroseconds	PerformanceMeter.hh	/^computeDurationInMicroseconds() const$/;"	f	class:microflow::PerformanceMeter::Measure
computeError	LatticeCalculator.hh	/^computeError( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
computeError	Simulation.cpp	/^computeError( bool shouldSaveVelocityT0 )$/;"	f	class:microflow::Simulation
computeError	SimulationEngine.hh	/^computeError( bool shouldSaveVelocityT0 )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
computeError	SimulationEngine.tcc	/^computeError( bool shouldSaveVelocityT0 )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
computeErrorFromCPU	SimulationEngine.hh	/^computeErrorFromCPU( bool shouldSaveVelocityT0 )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
computeFInTileIndex	Tile.hh	/^computeFInTileIndex$/;"	f	class:microflow::IndexCalculator
computeFeq	FluidModels.hh	/^computeFeq$/;"	f	class:microflow::FluidModelIncompressible
computeFeq	FluidModels.hh	/^computeFeq$/;"	f	class:microflow::FluidModelQuasicompressible
computeGeometryDensity	TilingStatistic.cpp	/^computeGeometryDensity() const$/;"	f	class:microflow::TilingStatistic
computeGlobalIndex	WriterVtk.hh	/^computeGlobalIndex (Tile & tile,$/;"	f	class:microflow::WriterVtkUnstructured
computeGridDimension	ThreadMapper.hh	/^computeGridDimension() const$/;"	f	class:microflow::ThreadMapper
computeIndexInFArray	Tile.hh	/^computeIndexInFArray (unsigned nodeInTileX, unsigned nodeInTileY, unsigned nodeInTileZ,$/;"	f	class:microflow::TILE_BASE
computeInternalIndex	LinearizedMatrix.hh	/^computeInternalIndex( const Coordinates & coordinates ) const$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
computeInternalIndex	LinearizedMatrix.hh	/^computeInternalIndex( const Coordinates & coordinates, const Size & size ) const$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
computeInverse	Direction.hh	/^computeInverse() const$/;"	f	class:microflow::Direction
computeMEQ	NodeCalculator.hh	/^computeMEQ$/;"	f	class:microflow::NODE_CALCULATOR_D3Q19::MEQCalculator
computeNTotalNodes	TilingStatistic.cpp	/^computeNTotalNodes() const $/;"	f	class:microflow::TilingStatistic
computeNeighborTileX	kernelTileGatherProcessBoundaryCollide.tcc	/^int computeNeighborTileX()$/;"	f	namespace:microflow
computeNoTilesTotal	TileLayout.cpp	/^computeNoTilesTotal() const$/;"	f	class:microflow::TileLayout
computeNodeDataIndex	NodeFromTile.hh	/^computeNodeDataIndex (typename Tile::Data data, Axis axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
computeNodeDataIndex	NodeFromTile.hh	/^computeNodeDataIndex (typename Tile::Data data, Direction::DirectionIndex fIndex)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
computeNodeDataIndex	Tile.hh	/^computeNodeDataIndex (unsigned nodeInTileX, unsigned nodeInTileY, unsigned nodeInTileZ,$/;"	f	class:microflow::TILE_BASE
computeNodeInTileIndex	TileTraitsCommon.hh	/^computeNodeInTileIndex (unsigned nodeInTileX, unsigned nodeInTileY, unsigned nodeInTileZ)$/;"	f	class:microflow::TILE_TRAITS_COMMON
computeNodeIndex	NodeFromTile.hh	/^computeNodeIndex() const$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
computeNodeIndex	TileTraitsCommon.hh	/^computeNodeIndex (unsigned nodeInTileX, $/;"	f	class:microflow::TILE_TRAITS_COMMON
computeNonEmptyTilesFactor	TilingStatistic.cpp	/^computeNonEmptyTilesFactor() const$/;"	f	class:microflow::TilingStatistic
computeNormalVectors	ExpandedNodeLayout.cpp	/^computeNormalVectors()$/;"	f	class:microflow::ExpandedNodeLayout
computeNumberOfBlocks	ThreadMapper.hh	/^computeNumberOfBlocks() const$/;"	f	class:microflow::ThreadMapper
computeNumberOfPoints	ReaderVtk.hh	/^computeNumberOfPoints()$/;"	f	class:microflow::ReaderVtkImage
computeNumberOfPoints	ReaderVtk.hh	/^computeNumberOfPoints()$/;"	f	class:microflow::ReaderVtkUnstructured
computeNumberOfWarps	ThreadMapper.hh	/^computeNumberOfWarps() const$/;"	f	class:microflow::ThreadMapper
computeNumberOfWarpsPerBlock	ThreadMapper.hh	/^computeNumberOfWarpsPerBlock() const$/;"	f	class:microflow::ThreadMapper
computeRhoForBB2Nodes	LatticeCalculator.hh	/^computeRhoForBB2Nodes (TiledLatticeType & tiledLattice)$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
computeRhoForBB2Nodes	TileCalculator.hh	/^computeRhoForBB2Nodes (TileType & tile)$/;"	f	class:microflow::TILE_CALCULATOR_CPU
computeSolidNeighborMasks	ExpandedNodeLayout.cpp	/^computeSolidNeighborMasks()$/;"	f	class:microflow::ExpandedNodeLayout
computeStandardDeviation	PerformanceMeter.cpp	/^computeStandardDeviation()$/;"	f	class:microflow::PerformanceMeter
computeStatistics	TilingStatistic.cpp	/^computeStatistics() const$/;"	f	class:microflow::TilingStatistic
computeTileDataBeginIndex	Tile.hh	/^computeTileDataBeginIndex (unsigned tileIndex)$/;"	f	class:microflow::TILE_BASE
computeTileDataBeginIndex	Tile.hh	/^computeTileDataBeginIndex (unsigned tileIndex, Data data, $/;"	f	class:microflow::TILE_BASE
computeTileDataBeginIndex	Tile.hh	/^computeTileDataBeginIndex (unsigned tileIndex, Data data, Axis axis)$/;"	f	class:microflow::TILE_BASE
computeTileDataBeginIndex	Tile.hh	/^computeTileDataBeginIndex() const$/;"	f	class:microflow::TILE_BASE
computeTileNodesBeginIndex	TileTraitsCommon.hh	/^computeTileNodesBeginIndex (unsigned tileIndex)$/;"	f	class:microflow::TILE_TRAITS_COMMON
computeTilingStatistic	TileLayout.cpp	/^computeTilingStatistic() const$/;"	f	class:microflow::TileLayout
computeVolume	Size.hh	/^computeVolume() const$/;"	f	class:microflow::Size
const_iterator	Storage.hpp	/^		typedef size_t const_iterator ;$/;"	t	class:microflow::StorageInKernel
context_	MRubyInterpreter.hpp	/^        mrbc_context * context_ ;$/;"	m	class:microflow::MRubyInterpreter
convertTo	MRubyInterpreter.cpp	/^    bool convertTo<bool> (mrb_value rubyVariable)$/;"	f	namespace:microflow
convertTo	MRubyInterpreter.cpp	/^    double convertTo<double> (mrb_value rubyVariable)$/;"	f	namespace:microflow
convertTo	MRubyInterpreter.cpp	/^    int convertTo<int> (mrb_value rubyVariable)$/;"	f	namespace:microflow
convertTo	MRubyInterpreter.cpp	/^    string convertTo<string> (mrb_value rubyVariable)$/;"	f	namespace:microflow
convertTo	MRubyInterpreter.cpp	/^    unsigned convertTo<unsigned> (mrb_value rubyVariable) $/;"	f	namespace:microflow
convertTo	RubyInterpreter.cpp	/^template<> bool convertTo<bool>(VALUE rubyVariable)$/;"	f	namespace:microflow
convertTo	RubyInterpreter.cpp	/^template<> double convertTo<double>(VALUE rubyVariable)$/;"	f	namespace:microflow
convertTo	RubyInterpreter.cpp	/^template<> std::string convertTo<std::string>(VALUE rubyVariable)$/;"	f	namespace:microflow
convertTo	RubyInterpreter.cpp	/^template<> unsigned int convertTo<unsigned int>(VALUE rubyVariable)$/;"	f	namespace:microflow
coordinates	ModificationRhoU.hpp	/^					Coordinates coordinates ;$/;"	m	class:microflow::ModificationRhoU::Modification
coordinates	Simulation.hpp	/^				Coordinates coordinates ;$/;"	m	struct:microflow::Simulation::NodeLB
coordinates	modifyNodeLayout.rb	/^def coordinates( x,y,z )$/;"	f
copy	Storage.hh	/^	copy( Storage1<T> & destination, const Storage2<T> & source )$/;"	f	namespace:microflow::__anon1
copyBitSetFromGPU	BitSetTest.cc	/^BitSet copyBitSetFromGPU()$/;"	f
copyFromCPU	TileLayout.tcc	/^copyFromCPU( const TileLayout< StorageOnCPU > & tileLayoutCPU )$/;"	f	class:microflow::TILE_LAYOUT_GPU
copyFromCPU	TileLayout.tcc	/^copyFromCPU()$/;"	f	class:microflow::TILE_LAYOUT_GPU
copyFromCPU	TiledLattice.tcc	/^copyFromCPU (const TiledLattice <LatticeArrangement, DataType, StorageOnCPU, DataArrangement> $/;"	f	class:microflow::TILED_LATTICE_GPU
copyFromCPU	TiledLattice.tcc	/^copyFromCPU()$/;"	f	class:microflow::TILED_LATTICE_GPU
copyTestResultFromGPU	BitSetTest.cc	/^bool copyTestResultFromGPU()$/;"	f
copyToCPU	TileLayout.tcc	/^copyToCPU( TileLayout< StorageOnCPU > & tileLayoutCPU ) const$/;"	f	class:microflow::TILE_LAYOUT_GPU
copyToCPU	TileLayout.tcc	/^copyToCPU() const$/;"	f	class:microflow::TILE_LAYOUT_GPU
copyToCPU	TiledLattice.tcc	/^copyToCPU (TiledLattice <LatticeArrangement, DataType, StorageOnCPU, DataArrangement> $/;"	f	class:microflow::TILED_LATTICE_GPU
copyToCPU	TiledLattice.tcc	/^copyToCPU() const$/;"	f	class:microflow::TILED_LATTICE_GPU
create	SimulationEngine.hh	/^create$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
create	SimulationEngine.tcc	/^create$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
createDirectory	fileUtils.cpp	/^void createDirectory( const string directoryPath )$/;"	f	namespace:microflow
createFluidNodeLayout	NodeLayoutTest.cc	/^NodeLayout createFluidNodeLayout( unsigned width, unsigned height, unsigned depth)$/;"	f	namespace:microflow
createHomogenousNodeLayout	NodeLayoutTest.cc	/^NodeLayout createHomogenousNodeLayout( unsigned width, unsigned height, unsigned depth,$/;"	f	namespace:microflow
createNode	ColoredPixelClassificator.cpp	/^createNode( const png::rgb_pixel & pixel ) const$/;"	f	class:microflow::ColoredPixelClassificator
createNodeLayout	NodeLayoutWriterTest.cc	/^NodeLayout createNodeLayout(unsigned depth)$/;"	f
createRandomLayoutImage	NodeLayoutTest.cc	/^Image createRandomLayoutImage( unsigned width, unsigned height )$/;"	f	namespace:microflow
createRubyObject	RubyInterpreter.cpp	/^VALUE createRubyObject (std::string className)$/;"	f	namespace:microflow
createSolidLayoutImage	NodeLayoutTest.cc	/^Image createSolidLayoutImage( unsigned width, unsigned height )$/;"	f	namespace:microflow
createSolidNodeLayout	NodeLayoutTest.cc	/^NodeLayout createSolidNodeLayout( unsigned width, unsigned height, unsigned depth)$/;"	f	namespace:microflow
crossProduct	Direction.hh	/^crossProduct (const Direction & d1, const Direction & d2)$/;"	f	namespace:microflow
csq	LatticeArrangementD3Q19.cpp	/^constexpr double       LatticeArrangement<3,19>::csq ;$/;"	m	class:microflow::LatticeArrangement	file:
csq	LatticeArrangementD3Q19.hpp	/^		static constexpr double csq = 1.0 \/ 3.0 ;$/;"	m	class:microflow::LatticeArrangement
currentMeasure_	PerformanceMeter.hpp	/^    Measure currentMeasure_ ;$/;"	m	class:microflow::PerformanceMeter
currentTileIndex_	Tile.hpp	/^		TileIterator currentTileIndex_ ;$/;"	m	class:microflow::TileBase
dataPointer_	Storage.hpp	/^		T * dataPointer_ ;$/;"	m	class:microflow::StorageInKernel
dataTypeName_	Settings.hpp	/^		std::string dataTypeName_            ;$/;"	m	class:microflow::Settings
data_	LinearizedMatrix.hpp	/^		Storage<T> data_ ;$/;"	m	class:microflow::LinearizedMatrixBase
defaultEdgeToPerpendicularWallNode_	Settings.hpp	/^    NodeType defaultEdgeToPerpendicularWallNode_ ;$/;"	m	class:microflow::Settings
defaultExternalCornerNode_	Settings.hpp	/^    NodeType defaultExternalCornerNode_          ;$/;"	m	class:microflow::Settings
defaultExternalCornerPressureNode_	LatticeCalculator.hpp	/^		const NodeType defaultExternalCornerPressureNode_ ; $/;"	m	class:microflow::LatticeCalculator
defaultExternalCornerPressureNode_	NodeCalculator.hpp	/^		const NodeType defaultExternalCornerPressureNode_ ;$/;"	m	class:microflow::NodeCalculator
defaultExternalCornerPressureNode_	Settings.hpp	/^    NodeType defaultExternalCornerPressureNode_  ;$/;"	m	class:microflow::Settings
defaultExternalCornerPressureNode_	TileCalculator.hpp	/^		const NodeType defaultExternalCornerPressureNode_ ; $/;"	m	class:microflow::TileCalculator
defaultExternalEdgeNode_	Settings.hpp	/^    NodeType defaultExternalEdgeNode_            ;$/;"	m	class:microflow::Settings
defaultExternalEdgePressureNode_	LatticeCalculator.hpp	/^		const NodeType defaultExternalEdgePressureNode_ ;$/;"	m	class:microflow::LatticeCalculator
defaultExternalEdgePressureNode_	NodeCalculator.hpp	/^		const NodeType defaultExternalEdgePressureNode_ ;$/;"	m	class:microflow::NodeCalculator
defaultExternalEdgePressureNode_	Settings.hpp	/^    NodeType defaultExternalEdgePressureNode_    ;$/;"	m	class:microflow::Settings
defaultExternalEdgePressureNode_	TileCalculator.hpp	/^		const NodeType defaultExternalEdgePressureNode_ ;$/;"	m	class:microflow::TileCalculator
defaultInternalCornerNode_	Settings.hpp	/^    NodeType defaultInternalCornerNode_          ;$/;"	m	class:microflow::Settings
defaultInternalEdgeNode_	Settings.hpp	/^    NodeType defaultInternalEdgeNode_            ;$/;"	m	class:microflow::Settings
defaultNotIdentifiedNode_	Settings.hpp	/^    NodeType defaultNotIdentifiedNode_           ;$/;"	m	class:microflow::Settings
defaultWallNode_	Settings.hpp	/^    NodeType defaultWallNode_                    ;$/;"	m	class:microflow::Settings
defineNodeTypeMethod	read_config.rb	/^def defineNodeTypeMethod (name)$/;"	f
differ	Storage.hh	/^bool differ( const T & lhs, const T & rhs ) $/;"	f	namespace:microflow
differ	Storage.hh	/^bool differ( const double & lhs, const double & rhs )$/;"	f	namespace:microflow
dotProduct	Coordinates.hh	/^dotProduct (const UniversalCoordinates<T> & c1, const UniversalCoordinates<T> & c2)$/;"	f	namespace:microflow
dotProduct	Direction.hh	/^dotProduct (const Direction & d1, const Direction & d2)$/;"	f	namespace:microflow
each	modifyNodeLayout.rb	/^	def each          \\n$/;"	f	class:Coordinates
end	LinearizedMatrix.hh	/^end() const$/;"	f	class:microflow::LINEARIZED_MATRIX
end	LinearizedMatrix.hh	/^end()$/;"	f	class:microflow::LINEARIZED_MATRIX
end	NodeLayout.hh	/^end() $/;"	f	class:microflow::NodeLayout
end	NodeLayout.hh	/^end() const $/;"	f	class:microflow::NodeLayout
end	PerformanceMeter.hpp	/^				TimePoint end ;$/;"	m	class:microflow::PerformanceMeter::Measure
error	LatticeCalculator.hpp	/^		DataType error ;$/;"	m	class:microflow::ComputationError
estimateBytesPerNode	Writer.hh	/^estimateBytesPerNode (const Settings & settings) const$/;"	f	class:microflow::WRITER
estimateDataSizeForStructuredGrid	Writer.hh	/^estimateDataSizeForStructuredGrid (const Settings & settings) const$/;"	f	class:microflow::WRITER
estimateDataSizeForUnstructuredGrid	Writer.hh	/^estimateDataSizeForUnstructuredGrid (const Settings & settings) const$/;"	f	class:microflow::WRITER
expandedNodeLayout_	Simulation.hpp	/^		std::unique_ptr< ExpandedNodeLayout        > expandedNodeLayout_        ;$/;"	m	class:microflow::Simulation
export_to_global	read_config.rb	/^def export_to_global( var_name )$/;"	f
extractNormalVector	PackedNodeNormalSet.hh	/^extractNormalVector( unsigned vectorIndex ) const$/;"	f	class:microflow::PackedNodeNormalSet
extractSigned2Bits	PackedDirectionVector.hh	/^extractSigned2Bits( unsigned positionLSB ) const $/;"	f	class:microflow::PackedDirectionVector
extractSignedBits	PackedDirectionVector.hh	/^extractSignedBits( unsigned positionLSB, unsigned noOfBits ) const $/;"	f	class:microflow::PackedDirectionVector
extractStepNumberFromVtkFileName	fileUtils.cpp	/^int extractStepNumberFromVtkFileName( const string vtkFileName, $/;"	f	namespace:microflow
extractUnsignedBits	PackedDirectionVector.hh	/^extractUnsignedBits( unsigned positionLSB, unsigned noOfBits ) const $/;"	f	class:microflow::PackedDirectionVector
f	NodeCalculator.hh	1470;"	d
f	NodeCalculator.hh	368;"	d
f	NodeCalculator.hh	379;"	d
f	NodeCalculator.hh	410;"	d
f	NodeCalculator.hh	420;"	d
f	NodeCalculator.hh	861;"	d
f	NodeCalculatorTest.cc	/^		HD double & f (Direction direction)$/;"	f	class:TestNode
f	NodeCalculatorTest.cc	/^		HD double & f (Direction::D direction)$/;"	f	class:TestNode
f	NodeCalculatorTest.cc	/^		HD double & f (Direction::DirectionIndex directionIndex)$/;"	f	class:TestNode
f	NodeFromTile.hh	/^f (Direction direction)$/;"	f	class:microflow::NODE_FROM_TILE_COPY
f	NodeFromTile.hh	/^f (Direction direction)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
f	NodeFromTile.hh	/^f (Direction::D direction)$/;"	f	class:microflow::NODE_FROM_TILE_COPY
f	NodeFromTile.hh	/^f (Direction::D direction)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
f	NodeFromTile.hh	/^f (Direction::DirectionIndex index)$/;"	f	class:microflow::NODE_FROM_TILE_COPY
f	NodeFromTile.hh	/^f (Direction::DirectionIndex index)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
f	NodeFromTile.hh	/^f( Direction direction )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
f	NodeFromTile.hh	/^f( Direction::D direction )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
f	NodeFromTile.hh	/^f( Direction::DirectionIndex index )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
f	Simulation.hpp	/^				std::vector< double > f ;$/;"	m	struct:microflow::Simulation::NodeLB
f	Tile.hh	/^f( Direction direction )$/;"	f	class:microflow::TILE_BASE
f	Tile.hh	/^f()$/;"	f	class:microflow::TILE_BASE
fPost	NodeCalculator.hh	1471;"	d
fPost	NodeCalculator.hh	862;"	d
fPost	NodeCalculatorTest.cc	/^		HD double & fPost (Direction direction)$/;"	f	class:TestNode
fPost	NodeCalculatorTest.cc	/^		HD double & fPost (Direction::D direction)$/;"	f	class:TestNode
fPost	NodeCalculatorTest.cc	/^		HD double & fPost (Direction::DirectionIndex directionIndex)$/;"	f	class:TestNode
fPost	NodeFromTile.hh	/^fPost (Direction direction)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
fPost	NodeFromTile.hh	/^fPost (Direction::D direction)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
fPost	NodeFromTile.hh	/^fPost (Direction::DirectionIndex index)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
fPost	NodeFromTile.hh	/^fPost( Direction direction )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
fPost	NodeFromTile.hh	/^fPost( Direction::D direction )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
fPost	NodeFromTile.hh	/^fPost( Direction::DirectionIndex index )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
fPost	Simulation.hpp	/^				std::vector< double > fPost ;$/;"	m	struct:microflow::Simulation::NodeLB
fPost	Tile.hh	/^fPost( Direction direction )$/;"	f	class:microflow::TILE_BASE
fPost	Tile.hh	/^fPost()$/;"	f	class:microflow::TILE_BASE
fPost_	NodeCalculatorTest.cc	/^		double fPost_[19] ;$/;"	m	class:TestNode	file:
f_	NodeCalculatorTest.cc	/^		double f_[19] ;$/;"	m	class:TestNode	file:
f_	NodeFromTile.hpp	/^		typename Tile::DataTypeType f_ [Tile::LatticeArrangementType::getQ()] ;$/;"	m	class:microflow::NodeFromTile
factoryMap_	SimulationEngine.hpp	/^		FactoryMap factoryMap_ ;$/;"	m	class:microflow::SimulationEngineFactory
fileExists	fileUtils.cpp	/^bool fileExists (const std::string filePath)$/;"	f	namespace:microflow
fileNames_	BoundaryAtLocations.hpp	/^		std::vector <std::string> fileNames_ ;$/;"	m	class:microflow::BoundaryAtLocations
fill	Image.hh	/^fill(const Pixel & p)$/;"	f	class:microflow::Image
fillArray	WriterVtk.hh	/^fillArray (vtkAbstractArray * dataArray, double value)$/;"	f	class:microflow::WriterVtkBase
fillGeometryWithConsecutiveValuesEqFPostF	LatticeCalculatorTest.cc	/^void fillGeometryWithConsecutiveValuesEqFPostF(TiledLattice & tiledLattice)$/;"	f	file:
fillTile	TileTest.hpp	/^void fillTile (Tile & tile, unsigned & val)$/;"	f	namespace:microflow
fillTileWithFluidNodes	LatticeCalculatorTest.cc	/^void fillTileWithFluidNodes( NodeLayout & nodeLayout, $/;"	f	file:
fillWithConsecutiveValues	TiledLatticeTest.hpp	/^void fillWithConsecutiveValues (TiledLattice & tiledLattice)$/;"	f	namespace:microflow
finalModify	Settings.cpp	/^	finalModify (NodeLayout & nodeLayout)$/;"	f	class:microflow::Settings
findArrayDataElement	ReaderVtk.hh	/^findArrayDataElement (vtkXMLDataElement * dataElements, std::string name)$/;"	f	class:microflow::ReaderVtkBase
findCheckpointFile	Simulation.cpp	/^findCheckpointFile()$/;"	f	class:microflow::Simulation
findColorAssignment	ColoredPixelClassificator.cpp	/^findColorAssignment( const png::rgb_pixel & color,$/;"	f	class:microflow::ColoredPixelClassificator
findMaxDuration	PerformanceMeter.cpp	/^findMaxDuration()$/;"	f	class:microflow::PerformanceMeter
findMinDuration	PerformanceMeter.cpp	/^findMinDuration()$/;"	f	class:microflow::PerformanceMeter
fluidModelName_	Settings.hpp	/^		std::string fluidModelName_          ;$/;"	m	class:microflow::Settings
flush_buffer	gzstream.cpp	/^int gzstreambuf::flush_buffer() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
forEachNode	TiledLattice.hh	/^forEachNode (Functor functor)$/;"	f	class:microflow::TILED_LATTICE
forEachNode	WriterVtk.hh	/^forEachNode (TiledLattice const & tiledLattice, Functor functor)$/;"	f	class:microflow::WriterVtkBase
forEachTile	TiledLattice.hh	/^forEachTile (Functor functor)$/;"	f	class:microflow::TILED_LATTICE
fromString	NodeBaseType.cpp	/^NodeBaseType fromString<NodeBaseType>( const std::string & name )$/;"	f	namespace:microflow
fromString	NodeType.hh	/^PlacementModifier fromString (const std::string & name)$/;"	f	namespace:microflow
gatherF	kernelTileGatherProcessBoundaryCollide.tcc	/^gatherF $/;"	f	namespace:microflow
gatherProcessBoundaryCollide	LatticeCalculator.tcc	/^gatherProcessBoundaryCollide $/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
generateLayoutWithMarkedTiles	TileLayout.cpp	/^generateLayoutWithMarkedTiles() const$/;"	f	class:microflow::TileLayout
generateNoTilesLayout	TileLayoutTest.hpp	/^TileLayout<StorageOnCPU> generateNoTilesLayout()$/;"	f
generateNoTilesLayout	TileLayoutTest.hpp	/^TileLayout<StorageOnCPU> generateNoTilesLayout(const size_t width, const size_t height, const size_t depth)$/;"	f
generateSingleTileLayout	TileLayoutTest.hpp	/^TileLayout<StorageOnCPU> generateSingleTileLayout()$/;"	f
generateSingleTileLayout	TileLayoutTest.hpp	/^TileLayout<StorageOnCPU> generateSingleTileLayout(const size_t width, const size_t height, const size_t depth)$/;"	f
generateSummary	PerformanceMeter.cpp	/^generateSummary()$/;"	f	class:microflow::PerformanceMeter
generateTwoTilesLayout	TileLayoutTest.hpp	/^TileLayout<StorageOnCPU> generateTwoTilesLayout()$/;"	f
generateTwoTilesLayout	TileLayoutTest.hpp	/^TileLayout<StorageOnCPU> generateTwoTilesLayout(const size_t width, const size_t height, const size_t depth)$/;"	f
geometryOrigin_	Settings.hpp	/^		UniversalCoordinates<double> geometryOrigin_ ;$/;"	m	class:microflow::Settings
get	Direction.hh	/^get() const$/;"	f	class:microflow::Direction
getAllValues	TiledLattice.tcc	/^getAllValues()$/;"	f	class:microflow::TILED_LATTICE_GPU
getAllValuesPointer	TiledLattice.hpp	/^		DataType * getAllValuesPointer() { return & allValues_[0] ; }$/;"	f	class:microflow::TiledLattice
getAllValuesPointer	TiledLattice.hpp	/^		DataType * getAllValuesPointer() { return allValues_.getPointer() ; }$/;"	f	class:microflow::TiledLattice
getAndUpdatePointId	ReaderVtk.hh	/^getAndUpdatePointId (Coordinates const & pointCoordinates __attribute__((unused))) $/;"	f	class:microflow::ReaderVtkUnstructured
getAndUpdatePointId	ReaderVtk.hh	/^getAndUpdatePointId (Coordinates const & pointCoordinates) $/;"	f	class:microflow::ReaderVtkImage
getBaseType	NodeType.hh	/^getBaseType() const$/;"	f	class:microflow::NodeType
getBeginOfNodes	TileLayout.hh	/^getBeginOfNodes() const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
getBeginOfNonEmptyTiles	TileLayout.hh	/^getBeginOfNonEmptyTiles() const$/;"	f	class:microflow::TileLayoutBase
getBeginOfNonEmptyTiles	TileLayout.hh	/^getBeginOfNonEmptyTiles()$/;"	f	class:microflow::TileLayoutBase
getBeginOfTiles	TiledLattice.hh	/^getBeginOfTiles() const$/;"	f	class:microflow::TILED_LATTICE
getBeginOfTiles	TiledLattice.hh	/^getBeginOfTiles()$/;"	f	class:microflow::TILED_LATTICE
getBlockDimX	ThreadMapper.hh	/^getBlockDimX()$/;"	f	class:microflow::ThreadMapper
getBlockDimY	ThreadMapper.hh	/^getBlockDimY()$/;"	f	class:microflow::ThreadMapper
getBlockDimZ	ThreadMapper.hh	/^getBlockDimZ()$/;"	f	class:microflow::ThreadMapper
getBoundaryDefinitionIndex	NodeType.hh	/^getBoundaryDefinitionIndex() const$/;"	f	class:microflow::NodeType
getBoundaryDefinitions	ClassificatorBoundaryAtLocation.cpp	/^getBoundaryDefinitions() const$/;"	f	class:ClassificatorBoundaryAtLocation
getBoundaryDefinitions	ColoredPixelClassificator.cpp	/^getBoundaryDefinitions() const$/;"	f	class:microflow::ColoredPixelClassificator
getBoundaryDefinitions	NodeLayout.hh	/^getBoundaryDefinitions() const$/;"	f	class:microflow::NodeLayout
getBoundaryPressure	BoundaryDefinitions.hh	/^getBoundaryPressure( unsigned short boundaryDefinitionIndex ) const$/;"	f	class:microflow::BoundaryDefinitions
getBoundaryVelocityX	BoundaryDefinitions.hh	/^getBoundaryVelocityX( unsigned short boundaryDefinitionIndex ) const$/;"	f	class:microflow::BoundaryDefinitions
getBoundaryVelocityY	BoundaryDefinitions.hh	/^getBoundaryVelocityY( unsigned short boundaryDefinitionIndex ) const$/;"	f	class:microflow::BoundaryDefinitions
getBoundaryVelocityZ	BoundaryDefinitions.hh	/^getBoundaryVelocityZ( unsigned short boundaryDefinitionIndex ) const$/;"	f	class:microflow::BoundaryDefinitions
getC	LatticeArrangementD3Q19.hh	/^getC( Direction::DirectionIndex index ) $/;"	f	class:microflow::LatticeArrangement
getCasePath	ProgramParameters.cpp	/^getCasePath()$/;"	f	class:microflow::ProgramParameters
getCharacteristicLengthLB	Settings.hh	/^getCharacteristicLengthLB() const$/;"	f	class:microflow::Settings
getCharacteristicLengthPhysical	Settings.hh	/^getCharacteristicLengthPhysical() const$/;"	f	class:microflow::Settings
getCharacteristicVelocityLB	Settings.hh	/^getCharacteristicVelocityLB() const$/;"	f	class:microflow::Settings
getCharacteristicVelocityPhysical	Settings.hh	/^getCharacteristicVelocityPhysical() const$/;"	f	class:microflow::Settings
getCheckpointDirectoryPath	Settings.hh	/^getCheckpointDirectoryPath() const$/;"	f	class:microflow::Settings
getClass	NodeType.hh	/^getClass() const$/;"	f	class:microflow::NodeType
getCollisionModelName	Settings.hh	/^getCollisionModelName() const$/;"	f	class:microflow::Settings
getCollisionModelName	SimulationEngine.hh	/^getCollisionModelName() const$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
getCollisionModelName	TypeNamesExtractor.hh	/^getCollisionModelName()$/;"	f	class:microflow::TYPE_NAMES_EXTRACTOR
getComputationalEngineName	Settings.hh	/^getComputationalEngineName() const$/;"	f	class:microflow::Settings
getComputationalEngineName	SimulationEngine.hh	/^getComputationalEngineName() const$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
getCoordinate	PackedDirectionVector.hh	/^getCoordinate( unsigned index ) const$/;"	f	class:microflow::PackedDirectionVector
getCornerPosition	Tile.hh	/^getCornerPosition() const$/;"	f	class:microflow::TILE
getCornerPosition	TileLayout.hh	/^getCornerPosition() const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
getCurrentTileIndex	Tile.hh	/^getCurrentTileIndex() const$/;"	f	class:microflow::TILE_BASE
getD	LatticeArrangement.hh	/^getD()$/;"	f	class:microflow::LatticeArrangementBase
getDataPointer	LinearizedMatrix.hpp	/^		T * getDataPointer() { return data_.getPointer() ; }$/;"	f	class:microflow::LinearizedMatrixBase
getDataTypeName	Settings.hh	/^getDataTypeName() const$/;"	f	class:microflow::Settings
getDataTypeName	SimulationEngine.hh	/^getDataTypeName() const$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
getDataTypeName	TypeNamesExtractor.hh	/^getDataTypeName()$/;"	f	class:microflow::TYPE_NAMES_EXTRACTOR
getDefaultEdgeToPerpendicularWallNode	Settings.hh	/^inline NodeType Settings::getDefaultEdgeToPerpendicularWallNode() const$/;"	f	class:microflow::Settings
getDefaultExternalCornerNode	Settings.hh	/^inline NodeType Settings::getDefaultExternalCornerNode() const$/;"	f	class:microflow::Settings
getDefaultExternalCornerPressureNode	Settings.hh	/^inline NodeType Settings::getDefaultExternalCornerPressureNode() const$/;"	f	class:microflow::Settings
getDefaultExternalEdgeNode	Settings.hh	/^inline NodeType Settings::getDefaultExternalEdgeNode() const$/;"	f	class:microflow::Settings
getDefaultExternalEdgePressureNode	Settings.hh	/^inline NodeType Settings::getDefaultExternalEdgePressureNode() const$/;"	f	class:microflow::Settings
getDefaultInternalCornerNode	Settings.hh	/^inline NodeType Settings::getDefaultInternalCornerNode() const$/;"	f	class:microflow::Settings
getDefaultInternalEdgeNode	Settings.hh	/^inline NodeType Settings::getDefaultInternalEdgeNode() const$/;"	f	class:microflow::Settings
getDefaultNotIdentifiedNode	Settings.hh	/^inline NodeType Settings::getDefaultNotIdentifiedNode() const$/;"	f	class:microflow::Settings
getDefaultPixelClassificator	ColoredPixelClassificatorTest.cc	/^ColoredPixelClassificator getDefaultPixelClassificator()$/;"	f
getDefaultWallNode	Settings.hh	/^inline NodeType Settings::getDefaultWallNode() const$/;"	f	class:microflow::Settings
getDepth	Size.hh	/^getDepth() const$/;"	f	class:microflow::Size
getEdgeNodeType	PackedNodeNormalSet.hh	/^getEdgeNodeType() const$/;"	f	class:microflow::PackedNodeNormalSet
getEndOfNodes	TileLayout.hh	/^getEndOfNodes() const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
getEndOfNonEmptyTiles	TileLayout.hh	/^getEndOfNonEmptyTiles() const$/;"	f	class:microflow::TileLayoutBase
getEndOfNonEmptyTiles	TileLayout.hh	/^getEndOfNonEmptyTiles()$/;"	f	class:microflow::TileLayoutBase
getEndOfTiles	TiledLattice.hh	/^getEndOfTiles() const$/;"	f	class:microflow::TILED_LATTICE
getEndOfTiles	TiledLattice.hh	/^getEndOfTiles()$/;"	f	class:microflow::TILED_LATTICE
getFPostPtr	Tile.hh	/^getFPostPtr( Direction direction )$/;"	f	class:microflow::TILE_BASE
getFPtr	Tile.hh	/^getFPtr( Direction direction )$/;"	f	class:microflow::TILE_BASE
getFileExtension	fileUtils.cpp	/^std::string getFileExtension (const string & fileName)$/;"	f	namespace:microflow
getFileNames	BoundaryAtLocations.cpp	/^getFileNames() const$/;"	f	class:BoundaryAtLocations
getFileNamesFromDirectory	fileUtils.cpp	/^vector<string> getFileNamesFromDirectory( const string directoryPath )$/;"	f	namespace:microflow
getFinalGeometryModificatorPath	Settings.hh	/^getFinalGeometryModificatorPath() const$/;"	f	class:microflow::Settings
getFluidModelName	Settings.hh	/^getFluidModelName() const$/;"	f	class:microflow::Settings
getFluidModelName	SimulationEngine.hh	/^getFluidModelName() const$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
getFluidModelName	TypeNamesExtractor.hh	/^getFluidModelName()$/;"	f	class:microflow::TYPE_NAMES_EXTRACTOR
getFreePhysicalMemoryInBytes	microflowTools.cpp	/^size_t getFreePhysicalMemoryInBytes()$/;"	f	namespace:microflow
getGeometryDirectoryPath	Settings.hh	/^getGeometryDirectoryPath() const$/;"	f	class:microflow::Settings
getGeometryOrigin	CheckpointSettings.hpp	/^		UniversalCoordinates<double> getGeometryOrigin() const$/;"	f	class:microflow::CheckpointSettings
getGeometryOrigin	Settings.hh	/^getGeometryOrigin() const$/;"	f	class:microflow::Settings
getGeometryPngImagePath	Settings.hh	/^getGeometryPngImagePath() const$/;"	f	class:microflow::Settings
getGeometryVtiImagePath	Settings.hh	/^getGeometryVtiImagePath() const$/;"	f	class:microflow::Settings
getGpuId	ProgramParameters.cpp	/^getGpuId()$/;"	f	class:microflow::ProgramParameters
getHeight	Size.hh	/^getHeight() const$/;"	f	class:microflow::Size
getIndex	LatticeArrangement.hh	/^getIndex( Direction::D direction )$/;"	f	class:microflow::LatticeArrangementBase
getIndex	LatticeArrangementD3Q19.hh	/^getIndex( Direction::D direction )$/;"	f	class:microflow::LatticeArrangement
getIndex	LatticeArrangementD3Q27.hpp	/^		HD static constexpr Direction::DirectionIndex getIndex( Direction::D direction )$/;"	f	class:microflow::LatticeArrangement
getIndex	TileLayout.hh	/^getIndex() const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
getIndexD3Q27	Direction.hh	/^getIndexD3Q27() const$/;"	f	class:microflow::Direction
getInitialGeometryModificatorPath	Settings.hh	/^getInitialGeometryModificatorPath() const$/;"	f	class:microflow::Settings
getInitialVelocityLB	Settings.hh	/^getInitialVelocityLB( Axis axis ) const$/;"	f	class:microflow::Settings
getInitialVolumetricMassDensityLB	Settings.hh	/^getInitialVolumetricMassDensityLB() const$/;"	f	class:microflow::Settings
getInitialVolumetricMassDensityPhysical	Settings.hh	/^getInitialVolumetricMassDensityPhysical() const$/;"	f	class:microflow::Settings
getInstalledPhysicalMemoryInBytes	microflowTools.cpp	/^size_t getInstalledPhysicalMemoryInBytes()$/;"	f	namespace:microflow
getInternalStorage	PackedDirectionVector.hh	/^getInternalStorage() const$/;"	f	class:microflow::PackedDirectionVector
getInterpreter	RubyInterpreter.cpp	/^getInterpreter() $/;"	f	class:microflow::RubyInterpreter
getKinematicViscosityLB	Settings.hh	/^getKinematicViscosityLB() const$/;"	f	class:microflow::Settings
getKinematicViscosityPhysical	Settings.hh	/^getKinematicViscosityPhysical() const$/;"	f	class:microflow::Settings
getLatticeArrangementName	Settings.hh	/^getLatticeArrangementName() const $/;"	f	class:microflow::Settings
getLatticeArrangementName	SimulationEngine.hh	/^getLatticeArrangementName() const$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
getLatticeArrangementName	TypeNamesExtractor.hh	/^getLatticeArrangementName()$/;"	f	class:microflow::TYPE_NAMES_EXTRACTOR
getLatticeCalculator	SimulationEngine.hh	/^getLatticeCalculator()$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
getLatticeCalculatorCPU	SimulationEngine.hh	/^getLatticeCalculatorCPU()$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
getLatticeSpacingPhysical	CheckpointSettings.hpp	/^		double getLatticeSpacingPhysical() const { return 1.0 ; }$/;"	f	class:microflow::CheckpointSettings
getLatticeSpacingPhysical	Settings.hh	/^getLatticeSpacingPhysical() const$/;"	f	class:microflow::Settings
getLatticeTimeStepPhysical	Settings.hh	/^getLatticeTimeStepPhysical() const$/;"	f	class:microflow::Settings
getMRubyInterpreter	MRubyInterpreter.cpp	/^    getMRubyInterpreter ()$/;"	f	class:microflow::MRubyInterpreter
getMRubyVariable	MRubyInterpreter.cpp	/^    getMRubyVariable( const std::string & variableName )$/;"	f	class:microflow::MRubyInterpreter
getMapPosition	TileLayout.hh	/^getMapPosition() const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
getMaxNumberOfCheckpoints	Settings.hh	/^getMaxNumberOfCheckpoints() const$/;"	f	class:microflow::Settings
getMaxNumberOfVtkFiles	Settings.hh	/^getMaxNumberOfVtkFiles() const$/;"	f	class:microflow::Settings
getModificationRhoU	Settings.hh	/^inline const ModificationRhoU & Settings::getModificationRhoU() const$/;"	f	class:microflow::Settings
getNBoundaryNodes	TilingStatistic.cpp	/^getNBoundaryNodes() const$/;"	f	class:microflow::TilingStatistic
getNEmptyTiles	TilingStatistic.cpp	/^getNEmptyTiles() const$/;"	f	class:microflow::TilingStatistic
getNFluidNodes	TilingStatistic.cpp	/^getNFluidNodes() const$/;"	f	class:microflow::TilingStatistic
getNFsPerNode	Tile.hh	/^getNFsPerNode()$/;"	f	class:microflow::TILE_BASE
getNFsPerTile	Tile.hh	/^getNFsPerTile()$/;"	f	class:microflow::TILE_BASE
getNNodesInNonEmptyTiles	TilingStatistic.cpp	/^getNNodesInNonEmptyTiles() const$/;"	f	class:microflow::TilingStatistic
getNNodesPerEdge	TileTraitsCommon.hh	/^getNNodesPerEdge()$/;"	f	class:microflow::TILE_TRAITS_COMMON
getNNodesPerTile	TileTraitsCommon.hh	/^getNNodesPerTile()$/;"	f	class:microflow::TILE_TRAITS_COMMON
getNNodesPerTileEdge	TiledLattice.hpp	/^		static constexpr unsigned getNNodesPerTileEdge() { return DEFAULT_3D_TILE_EDGE ; } ;$/;"	f	class:microflow::TiledLatticeBase
getNNonEmptyTiles	TilingStatistic.cpp	/^getNNonEmptyTiles() const$/;"	f	class:microflow::TilingStatistic
getNNonSolidNodes	TilingStatistic.cpp	/^getNNonSolidNodes() const$/;"	f	class:microflow::TilingStatistic
getNOfTiles	TiledLattice.hh	/^getNOfTiles() const$/;"	f	class:microflow::TILED_LATTICE
getNOfTiles	TiledLattice.tcc	/^getNOfTiles() const$/;"	f	class:microflow::TILED_LATTICE_GPU
getNSolidNodesInTiles	TilingStatistic.cpp	/^getNSolidNodesInTiles() const$/;"	f	class:microflow::TilingStatistic
getNSolidNodesInTotal	TilingStatistic.cpp	/^getNSolidNodesInTotal() const$/;"	f	class:microflow::TilingStatistic
getNTotalTiles	TilingStatistic.cpp	/^getNTotalTiles() const$/;"	f	class:microflow::TilingStatistic
getNUnknownNodes	TilingStatistic.cpp	/^getNUnknownNodes() const$/;"	f	class:microflow::TilingStatistic
getNValuesPerNode	Tile.hh	/^getNValuesPerNode()$/;"	f	class:microflow::TILE_BASE
getNValuesPerTile	Tile.hh	/^getNValuesPerTile()$/;"	f	class:microflow::TILE_BASE
getName	CollisionModels.hpp	/^		static const std::string getName() { return "CollisionModelBGK" ; } ;$/;"	f	class:microflow::CollisionModelBGK
getName	CollisionModels.hpp	/^		static const std::string getName() { return "CollisionModelMRT" ; } ;$/;"	f	class:microflow::CollisionModelMRT
getName	ComputationalEngine.hpp	/^		static const std::string getName() { return "CPU" ; }$/;"	f	class:microflow::ComputationalEngineCPU
getName	ComputationalEngine.hpp	/^		static const std::string getName() { return "GPU" ; }$/;"	f	class:microflow::ComputationalEngineGPU
getName	FluidModels.hh	/^getName()$/;"	f	class:microflow::FluidModelIncompressible
getName	FluidModels.hh	/^getName()$/;"	f	class:microflow::FluidModelQuasicompressible
getName	LatticeArrangement.hh	/^getName()$/;"	f	class:microflow::LatticeArrangementBase
getName	Storage.hpp	/^		static const std::string getName() { return "StorageOnCPU" ; }$/;"	f	class:microflow::StorageOnCPU
getName	Storage.hpp	/^		static const std::string getName() { return "StorageOnGPU" ; }$/;"	f	class:microflow::StorageOnGPU
getNeighbor	Tile.hh	/^getNeighbor( Direction direction )$/;"	f	class:microflow::TILE_BASE
getNeighborIndex	TileLayout.hh	/^getNeighborIndex( Iterator currentTile, Direction direction ) const$/;"	f	class:microflow::TileLayoutBase
getNeighbour	TileLayout.hh	/^getNeighbour( const TileLayoutBase<Storage>::NonEmptyTile & tile, Direction direction ) const$/;"	f	class:microflow::TileLayoutBase
getNeighbour	TileLayout.hh	/^getNeighbour( const TileLayoutBase<Storage>::NonEmptyTile & tile, Direction direction )$/;"	f	class:microflow::TileLayoutBase
getNoNonEmptyTiles	TileLayout.hh	/^getNoNonEmptyTiles() const$/;"	f	class:microflow::TileLayoutBase
getNode	RubyInterpreter.cpp	/^static VALUE getNode (VALUE self, VALUE x, VALUE y, VALUE z)$/;"	f	namespace:microflow
getNode	Simulation.cpp	/^getNode( Coordinates coordinates ) $/;"	f	class:microflow::Simulation
getNode	SimulationEngine.hh	/^getNode( Coordinates coordinates )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
getNode	SimulationEngine.tcc	/^getNode( Coordinates coordinates )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
getNode	Tile.hh	/^getNode( unsigned x, unsigned y, unsigned z )$/;"	f	class:microflow::TILE_BASE
getNodeBaseType	BoundaryDescription.hh	/^getNodeBaseType() const$/;"	f	class:microflow::BoundaryDescription
getNodeFromCPU	SimulationEngine.hh	/^getNodeFromCPU( Coordinates coordinates )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
getNodeGridSize	TilingStatistic.cpp	/^getNodeGridSize() const $/;"	f	class:microflow::TilingStatistic
getNodeHelper	Tile.hh	/^getNodeHelper( unsigned x, unsigned y, unsigned z, StorageWrapper<DataStorageMethod::POINTERS> )$/;"	f	class:microflow::TILE_BASE
getNodeHelper	Tile.hh	/^getNodeHelper( unsigned x, unsigned y, unsigned z, StorageWrapper<DataStorageMethod::REFERENCE> )$/;"	f	class:microflow::TILE_BASE
getNodeLayout	ExpandedNodeLayout.hh	/^getNodeLayout() const$/;"	f	class:microflow::ExpandedNodeLayout
getNodeLayout	TileLayout.hh	/^getNodeLayout() const$/;"	f	class:microflow::TileLayout
getNodeLocations	BoundaryAtLocations.hpp	/^		const std::vector <Coordinates> & getNodeLocations() const$/;"	f	class:microflow::BoundaryAtLocations
getNodeNormals	Tile.hh	/^getNodeNormals()$/;"	f	class:microflow::TILE_BASE
getNodeNormals	TiledLattice.tcc	/^getNodeNormals()$/;"	f	class:microflow::TILED_LATTICE_GPU
getNodeNormalsPointer	TiledLattice.hpp	/^		PackedNodeNormalSet * getNodeNormalsPointer() { return & nodeNormals_[0] ; }$/;"	f	class:microflow::TiledLattice
getNodeNormalsPointer	TiledLattice.hpp	/^		PackedNodeNormalSet * getNodeNormalsPointer() { return nodeNormals_.getPointer() ; }$/;"	f	class:microflow::TiledLattice
getNodeNormalsPtr	Tile.hh	/^getNodeNormalsPtr()$/;"	f	class:microflow::TILE_BASE
getNodeSolidNeighborMasks	Tile.hh	/^getNodeSolidNeighborMasks()$/;"	f	class:microflow::TILE_BASE
getNodeSolidNeighborMasksPtr	Tile.hh	/^getNodeSolidNeighborMasksPtr()$/;"	f	class:microflow::TILE_BASE
getNodeType	NodeLayout.hh	/^getNodeType( Coordinates coordinates ) const$/;"	f	class:microflow::NodeLayout
getNodeType	NodeLayout.hh	/^getNodeType( size_t x, size_t y, size_t z) const $/;"	f	class:microflow::NodeLayout
getNodeType	TileLayout.hh	/^getNodeType( Coordinates coordinates ) const$/;"	f	class:microflow::TileLayout
getNodeTypes	Tile.hh	/^getNodeTypes()$/;"	f	class:microflow::TILE_BASE
getNodeTypes	TiledLattice.tcc	/^getNodeTypes()$/;"	f	class:microflow::TILED_LATTICE_GPU
getNodeTypesPointer	TiledLattice.hpp	/^		NodeType * getNodeTypesPointer() { return & nodeTypes_[0] ; }$/;"	f	class:microflow::TiledLattice
getNodeTypesPointer	TiledLattice.hpp	/^		NodeType * getNodeTypesPointer() { return nodeTypes_.getPointer() ; }$/;"	f	class:microflow::TiledLattice
getNodeTypesPtr	Tile.hh	/^getNodeTypesPtr()$/;"	f	class:microflow::TILE_BASE
getNodesPerTile	TilingStatistic.hpp	/^		static constexpr unsigned getNodesPerTile()$/;"	f	class:microflow::TilingStatistic
getNonEmptyTilePosition	TileLayout.hh	/^getNonEmptyTilePosition( typename TileLayoutBase::NonEmptyTile::TileIndex tileIndex ) const$/;"	f	class:microflow::TileLayoutBase
getNormalVector	PackedNodeNormalSet.hh	/^getNormalVector( unsigned vectorIndex ) const$/;"	f	class:microflow::PackedNodeNormalSet
getNormalVectors	ExpandedNodeLayout.hh	/^getNormalVectors( unsigned x, unsigned y, unsigned z) const$/;"	f	class:microflow::ExpandedNodeLayout
getNormalVectors	ExpandedNodeLayout.hh	/^getNormalVectors(const Coordinates & coordinates) const$/;"	f	class:microflow::ExpandedNodeLayout
getNormalVectorsCounter	PackedNodeNormalSet.hh	/^getNormalVectorsCounter() const $/;"	f	class:microflow::PackedNodeNormalSet
getNumberOfElements	Storage.hh	/^getNumberOfElements()$/;"	f	class:microflow::StorageOnGPU
getNumberOfMeasures	PerformanceMeter.hh	/^getNumberOfMeasures() const$/;"	f	class:microflow::PerformanceMeter
getNumberOfStepsBetweenCheckpointSaves	Settings.hh	/^getNumberOfStepsBetweenCheckpointSaves() const$/;"	f	class:microflow::Settings
getNumberOfStepsBetweenErrorComputation	Settings.hh	/^getNumberOfStepsBetweenErrorComputation() const$/;"	f	class:microflow::Settings
getNumberOfStepsBetweenVtkSaves	Settings.hh	/^getNumberOfStepsBetweenVtkSaves() const$/;"	f	class:microflow::Settings
getOutputDirectoryPath	Settings.hh	/^getOutputDirectoryPath() const$/;"	f	class:microflow::Settings
getPhysicalOrigin	ReaderVtk.hpp	/^		UniversalCoordinates<double> getPhysicalOrigin() const $/;"	f	class:microflow::ReaderVtkImage
getPhysicalSpacing	ReaderVtk.hpp	/^		double getPhysicalSpacing() const$/;"	f	class:microflow::ReaderVtkImage
getPixel	Image.hh	/^getPixel(unsigned int x, unsigned int y) const $/;"	f	class:microflow::Image
getPixelColorDefinitionsFilePath	Settings.hh	/^getPixelColorDefinitionsFilePath() const$/;"	f	class:microflow::Settings
getPlacementModifier	NodeType.hh	/^getPlacementModifier() const$/;"	f	class:microflow::NodeType
getPointId	ReaderVtk.hh	/^getPointId (Coordinates const & pointCoordinates __attribute__((unused)))$/;"	f	class:microflow::ReaderVtkUnstructured
getPointId	ReaderVtk.hh	/^getPointId (Coordinates const & pointCoordinates) $/;"	f	class:microflow::ReaderVtkImage
getPointer	Storage.hh	/^getPointer()$/;"	f	class:microflow::StorageOnGPU
getPressure	BoundaryDescription.hh	/^getPressure() const$/;"	f	class:microflow::BoundaryDescription
getPtr	Tile.hh	/^getPtr( unsigned dataIndex )$/;"	f	class:microflow::TILE_BASE
getQ	LatticeArrangement.hh	/^getQ()$/;"	f	class:microflow::LatticeArrangementBase
getRequiredVelocityRelativeError	Settings.hh	/^getRequiredVelocityRelativeError() const$/;"	f	class:microflow::Settings
getResultantNormalVector	PackedNodeNormalSet.hh	/^getResultantNormalVector() const$/;"	f	class:microflow::PackedNodeNormalSet
getReynoldsNumber	Settings.hh	/^getReynoldsNumber() const$/;"	f	class:microflow::Settings
getRho0Ptr	Tile.hh	/^getRho0Ptr()$/;"	f	class:microflow::TILE_BASE
getRhoBoundaryPtr	Tile.hh	/^getRhoBoundaryPtr()$/;"	f	class:microflow::TILE_BASE
getRhoPtr	Tile.hh	/^getRhoPtr()$/;"	f	class:microflow::TILE_BASE
getRubyVariable	RubyInterpreter.cpp	/^getRubyVariable( const std::string & variableName )$/;"	f	class:microflow::RubyInterpreter
getSettings	Simulation.cpp	/^getSettings()$/;"	f	class:microflow::Simulation
getSettingsDirectoryPath	Settings.hh	/^getSettingsDirectoryPath() const$/;"	f	class:microflow::Settings
getSimulationDirectoryPath	Settings.hh	/^getSimulationDirectoryPath() const$/;"	f	class:microflow::Settings
getSize	ExpandedNodeLayout.hh	/^getSize() const$/;"	f	class:microflow::ExpandedNodeLayout
getSize	LinearizedMatrix.hh	/^getSize() const$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
getSize	NodeLayout.hh	/^getSize() const$/;"	f	class:microflow::NodeLayout
getSize	RubyInterpreter.cpp	/^static VALUE getSize (VALUE self)$/;"	f	namespace:microflow
getSize	Simulation.cpp	/^getSize() const$/;"	f	class:microflow::Simulation
getSize	TileLayout.hh	/^getSize() const$/;"	f	class:microflow::TileLayoutBase
getSize	TileLayout.hpp	/^		Size getSize() { return tileLayoutCPU_.getNodeLayout().getSize() ;  }$/;"	f	class:microflow::TileLayout
getSolidNeighborMask	ExpandedNodeLayout.hh	/^getSolidNeighborMask( const Coordinates & coordinates ) const$/;"	f	class:microflow::ExpandedNodeLayout
getSolidNeighborMask	ExpandedNodeLayout.hh	/^getSolidNeighborMask( unsigned x, unsigned y, unsigned z ) const$/;"	f	class:microflow::ExpandedNodeLayout
getSolidNeighborMasks	TiledLattice.tcc	/^getSolidNeighborMasks()$/;"	f	class:microflow::TILED_LATTICE_GPU
getSolidNeighborMasksPointer	TiledLattice.hpp	/^		SolidNeighborMask * getSolidNeighborMasksPointer() { return & solidNeighborMasks_[0] ; }$/;"	f	class:microflow::TiledLattice
getSolidNeighborMasksPointer	TiledLattice.hpp	/^		SolidNeighborMask * getSolidNeighborMasksPointer() { return solidNeighborMasks_.getPointer() ; }$/;"	f	class:microflow::TiledLattice
getState	MRubyInterpreter.cpp	/^    getState ()$/;"	f	class:microflow::MRubyInterpreter
getTau	Settings.hh	/^getTau() const$/;"	f	class:microflow::Settings
getTile	TileLayout.hh	/^getTile( Coordinates nodeCoordinates ) const$/;"	f	class:microflow::TileLayoutBase
getTile	TileLayout.hh	/^getTile( TileLayoutBase<Storage>::ConstIterator it ) const$/;"	f	class:microflow::TileLayoutBase
getTile	TileLayout.hh	/^getTile( TileLayoutBase<Storage>::Iterator it )$/;"	f	class:microflow::TileLayoutBase
getTile	TiledLattice.hh	/^getTile( ConstIterator tileIndex ) const$/;"	f	class:microflow::TILED_LATTICE
getTile	TiledLattice.hh	/^getTile( Iterator tileIndex )$/;"	f	class:microflow::TILED_LATTICE
getTile	TiledLattice.tcc	/^getTile( Iterator tileIndex )$/;"	f	class:microflow::TILED_LATTICE_KERNEL
getTileCalculator	LatticeCalculator.hh	/^getTileCalculator()$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
getTileEdge	TilingStatistic.hpp	/^		static constexpr unsigned getTileEdge() {return DEFAULT_3D_TILE_EDGE ;} ;$/;"	f	class:microflow::TilingStatistic
getTileGridSize	TilingStatistic.cpp	/^getTileGridSize() const $/;"	f	class:microflow::TilingStatistic
getTileIndex	NodeFromTile.hh	/^getTileIndex() const$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
getTileLayout	TiledLattice.hh	/^getTileLayout() $/;"	f	class:microflow::TILED_LATTICE
getTileLayout	TiledLattice.hh	/^getTileLayout() const$/;"	f	class:microflow::TILED_LATTICE
getTileLayout	TiledLattice.tcc	/^getTileLayout()$/;"	f	class:microflow::TILED_LATTICE_GPU
getTileMap	TileLayout.hh	/^getTileMap() const$/;"	f	class:microflow::TileLayout
getTileMapPointer	TileLayout.hpp	/^		unsigned int * getTileMapPointer() { return tileMap_.getDataPointer() ; }$/;"	f	class:microflow::TileLayoutBase
getTilesX0Pointer	TileLayout.hpp	/^		size_t * getTilesX0Pointer() { return tilesX0_.getPointer() ; }$/;"	f	class:microflow::TileLayoutBase
getTilesY0Pointer	TileLayout.hpp	/^		size_t * getTilesY0Pointer() { return tilesY0_.getPointer() ; }$/;"	f	class:microflow::TileLayoutBase
getTilesZ0Pointer	TileLayout.hpp	/^		size_t * getTilesZ0Pointer() { return tilesZ0_.getPointer() ; }$/;"	f	class:microflow::TileLayoutBase
getUBoundaryPtr	Tile.hh	/^getUBoundaryPtr( Axis axis )$/;"	f	class:microflow::TILE_BASE
getUPtr	Tile.hh	/^getUPtr( Axis axis )$/;"	f	class:microflow::TILE_BASE
getUT0Ptr	Tile.hh	/^getUT0Ptr( Axis axis )$/;"	f	class:microflow::TILE_BASE
getValidCopyID	TiledLattice.hh	/^getValidCopyID() const$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
getValue	LinearizedMatrix.hh	/^getValue( const Coordinates & coordinates ) const$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
getValue	MRubyInterpreter.cpp	/^    getValue () const$/;"	f	class:microflow::MRubyInterpreter
getVector3D	PackedDirectionVector.hh	/^getVector3D( unsigned vectorIndex ) const$/;"	f	class:microflow::PackedDirectionVector
getVelocity	BoundaryDescription.hh	/^const double (& BoundaryDescription::getVelocity() const) [3]$/;"	f	namespace:microflow
getVtkDefaultRhoForBB2Nodes	Settings.hh	/^getVtkDefaultRhoForBB2Nodes() const$/;"	f	class:microflow::Settings
getW	LatticeArrangementD3Q19.hh	/^getW( Direction::DirectionIndex index ) $/;"	f	class:microflow::LatticeArrangement
getWidth	Size.hh	/^getWidth() const$/;"	f	class:microflow::Size
getX	Coordinates.hh	/^getX() const$/;"	f	class:microflow::UniversalCoordinates
getX	Direction.hh	/^getX() const$/;"	f	class:microflow::Direction
getXmlPointData	ReaderVtk.hh	/^getXmlPointData ()$/;"	f	class:microflow::ReaderVtkImage
getXmlPointData	ReaderVtk.hh	/^getXmlPointData ()$/;"	f	class:microflow::ReaderVtkUnstructured
getY	Coordinates.hh	/^getY() const$/;"	f	class:microflow::UniversalCoordinates
getY	Direction.hh	/^getY() const$/;"	f	class:microflow::Direction
getZ	Coordinates.hh	/^getZ() const$/;"	f	class:microflow::UniversalCoordinates
getZ	Direction.hh	/^getZ() const$/;"	f	class:microflow::Direction
getZExpandDepth	Settings.hh	/^getZExpandDepth() const$/;"	f	class:microflow::Settings
gpuId_	ProgramParameters.hpp	/^		unsigned int gpuId_ ;$/;"	m	class:microflow::ProgramParameters
gzstreambase	gzstream.cpp	/^gzstreambase::gzstreambase( const char* name, int mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
handleSigInt	apps/microflow.cpp	/^void handleSigInt(int s)$/;"	f
hasAllStraightAndSlantingNeighborsNonSolid	SolidNeighborMask.hh	/^hasAllStraightAndSlantingNeighborsNonSolid() const$/;"	f	class:microflow::SolidNeighborMask
hasAllStraightNeighborsNonSolid	SolidNeighborMask.hh	/^hasAllStraightNeighborsNonSolid() const$/;"	f	class:microflow::SolidNeighborMask
hasMicrosecondSupport	PerformanceMeter.hh	/^hasMicrosecondSupport()$/;"	f	class:microflow::PerformanceMeter
hasMicrosecondSupport	PerformanceMeter.hh	/^hasMicrosecondSupport()$/;"	f	class:microflow::PerformanceMeter::Measure
hasNeighbour	TileLayout.hh	/^hasNeighbour( const TileLayoutBase<Storage>::NonEmptyTile & tile, Direction direction ) const$/;"	f	class:microflow::TileLayoutBase
hasNodeSolidNeighbors	NodeLayout.hh	/^hasNodeSolidNeighbors( const Coordinates & coordinates ) const $/;"	f	class:microflow::NodeLayout
hasSolidNeighbor	SolidNeighborMask.hpp	/^		bool hasSolidNeighbor() const { return not solidNeighborMask_.isClear() ; }$/;"	f	class:microflow::SolidNeighborMask
image_	Simulation.hpp	/^		std::unique_ptr< Image                     > image_                     ;$/;"	m	class:microflow::Simulation
increaseNonemptyTilesCounter	TilingStatistic.cpp	/^increaseNonemptyTilesCounter()$/;"	f	class:microflow::TilingStatistic
indexFromDirection_	LatticeArrangement.hpp	/^		static constexpr Direction::DirectionIndex indexFromDirection_[ 0b00111111 + 1 ] =$/;"	m	class:microflow::LatticeArrangementBase
indexFromDirection_	LatticeArrangementD3Q19.cpp	/^constexpr Direction::DirectionIndex LatticeArrangement<3,19>::indexFromDirection_[] ;$/;"	m	class:microflow::LatticeArrangement	file:
indexFromDirection_	LatticeArrangementD3Q19.hpp	/^		static constexpr Direction::DirectionIndex indexFromDirection_[ 0b00111111 + 1 ] =$/;"	m	class:microflow::LatticeArrangement
indexFromDirection_	LatticeArrangementD3Q27.cpp	/^constexpr Direction::DirectionIndex LatticeArrangement<3,27>::indexFromDirection_[] ;$/;"	m	class:microflow::LatticeArrangement	file:
indexFromDirection_	LatticeArrangementD3Q27.hpp	/^		static constexpr Direction::DirectionIndex indexFromDirection_[ 0b00111111 + 1 ] =$/;"	m	class:microflow::LatticeArrangement
indexGPU	LatticeArrangementD3Q19Test.cc	/^static __device__ unsigned indexGPU ;$/;"	v	file:
initialModify	Settings.cpp	/^	initialModify (NodeLayout & nodeLayout)$/;"	f	class:microflow::Settings
initialVelocityLB_	Settings.hpp	/^		double initialVelocityLB_ [ 3 ] ;$/;"	m	class:microflow::Settings
initialVolumetricMassDensityLB_	Settings.hpp	/^		double initialVolumetricMassDensityLB_ ;$/;"	m	class:microflow::Settings
initialVolumetricMassDensityPhysical_	Settings.hpp	/^		double initialVolumetricMassDensityPhysical_ ;$/;"	m	class:microflow::Settings
initializeAtEquilibrium	LatticeCalculator.hh	/^initializeAtEquilibrium( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
initializeAtEquilibrium	LatticeCalculator.tcc	/^initializeAtEquilibrium( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
initializeAtEquilibrium	NodeCalculator.hh	/^initializeAtEquilibrium( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_BASE
initializeAtEquilibrium	Simulation.cpp	/^initializeAtEquilibrium()$/;"	f	class:microflow::Simulation
initializeAtEquilibrium	SimulationEngine.hh	/^initializeAtEquilibrium()$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
initializeAtEquilibrium	SimulationEngine.tcc	/^initializeAtEquilibrium()$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
initializeAtEquilibrium	TileCalculator.hh	/^initializeAtEquilibrium( TileType & tile )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
initializeAtEquilibriumForGather	LatticeCalculator.tcc	/^initializeAtEquilibriumForGather (TiledLatticeType & tiledLattice)$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
initializeMRubyInterpreter	MRubyInterpreter.cpp	/^    initializeMRubyInterpreter()$/;"	f	class:microflow::MRubyInterpreter
initializeRubyInterpreter	RubyInterpreter.cpp	/^initializeRubyInterpreter()$/;"	f	class:microflow::RubyInterpreter
initializeRubyModifyLayout	MRubyInterpreter.cpp	/^    initializeRubyModifyLayout()$/;"	f	namespace:microflow
initializeRubyModifyLayout	RubyInterpreter.cpp	/^initializeRubyModifyLayout()$/;"	f	namespace:microflow
instance_	RubyInterpreter.cpp	/^RubyInterpreter* RubyInterpreter::instance_ = NULL ;$/;"	m	class:microflow::RubyInterpreter	file:
instance_	RubyInterpreter.hpp	/^		static RubyInterpreter * instance_ ;$/;"	m	class:microflow::RubyInterpreter
invRho0LB_	Calculator.hpp	/^		DataType invRho0LB_ ;$/;"	m	class:microflow::Calculator
invTau_	Calculator.hpp	/^		DataType invTau_ ;$/;"	m	class:microflow::Calculator
isBGK	CollisionModels.hpp	/^		static constexpr bool isBGK = false ;$/;"	m	class:microflow::CollisionModelBase
isBGK	CollisionModels.hpp	/^		static constexpr bool isBGK = true ;$/;"	m	class:microflow::CollisionModelBGK
isBoundary	BoundaryDescription.hh	/^isBoundary() const$/;"	f	class:microflow::BoundaryDescription
isBoundary	NodeBaseType.hpp	/^HD bool isBoundary( NodeBaseType const & type )$/;"	f	namespace:microflow
isBoundary	NodeType.hh	/^isBoundary() const$/;"	f	class:microflow::NodeType
isCPUCopyValid_	SimulationEngine.hpp	/^		bool isCPUCopyValid_ ;$/;"	m	class:microflow::SimulationEngineSpecialization
isCharacteristicLengthMarker	BoundaryDescription.hh	/^isCharacteristicLengthMarker() const$/;"	f	class:microflow::BoundaryDescription
isCharacteristicLengthMarker_	BoundaryDescription.hpp	/^		bool isCharacteristicLengthMarker_ ;$/;"	m	class:microflow::BoundaryDescription
isClear	BitSet.hpp	/^		HD bool isClear() const { return 0 == set_ ; }$/;"	f	class:microflow::BitSet
isCompressible	FluidModels.hpp	/^		static constexpr bool isCompressible   = false ;$/;"	m	class:microflow::FluidModel
isCompressible	FluidModels.hpp	/^		static constexpr bool isCompressible = true ;$/;"	m	class:microflow::FluidModelQuasicompressible
isEmpty	Tile.hh	/^isEmpty() const$/;"	f	class:microflow::TILE_BASE
isFluid	BoundaryDescription.hh	/^isFluid() const$/;"	f	class:microflow::BoundaryDescription
isFluid	NodeBaseType.hpp	/^HD bool isFluid( NodeBaseType const & type )$/;"	f	namespace:microflow
isFluid	NodeType.hh	/^isFluid() const$/;"	f	class:microflow::NodeType
isGeometryDefinedByPng	Settings.cpp	/^	isGeometryDefinedByPng() const$/;"	f	class:microflow::Settings
isGeometryDefinedByVti	Settings.cpp	/^	isGeometryDefinedByVti() const$/;"	f	class:microflow::Settings
isIncompressible	FluidModels.hpp	/^		static constexpr bool isIncompressible = false ;$/;"	m	class:microflow::FluidModel
isIncompressible	FluidModels.hpp	/^		static constexpr bool isIncompressible = true ;$/;"	m	class:microflow::FluidModelIncompressible
isInitialized	PerformanceMeter.hh	/^isInitialized( const TimePoint & timePoint ) $/;"	f	class:microflow::PerformanceMeter::Measure
isMRT	CollisionModels.hpp	/^		static constexpr bool isMRT = false ;$/;"	m	class:microflow::CollisionModelBase
isMRT	CollisionModels.hpp	/^		static constexpr bool isMRT = true ;$/;"	m	class:microflow::CollisionModelMRT
isNeighborSolid	SolidNeighborMask.hh	/^isNeighborSolid( const Direction & direction ) const$/;"	f	class:microflow::SolidNeighborMask
isNodePlacedOnBoundary	ExpandedNodeLayout.hh	/^isNodePlacedOnBoundary (unsigned x, unsigned y, unsigned z) const$/;"	f	class:microflow::ExpandedNodeLayout
isNodePlacedOnBoundary	NodeLayout.hh	/^isNodePlacedOnBoundary(size_t x, size_t y, size_t z) const$/;"	f	class:microflow::NodeLayout
isSolid	BoundaryDescription.hh	/^isSolid() const$/;"	f	class:microflow::BoundaryDescription
isSolid	NodeBaseType.hpp	/^HD bool isSolid( NodeBaseType const & type )$/;"	f	namespace:microflow
isSolid	NodeType.hh	/^isSolid() const$/;"	f	class:microflow::NodeType
isTileEmpty	TileLayout.cpp	/^isTileEmpty(size_t tileX0, size_t tileY0, size_t tileZ0) const$/;"	f	class:microflow::TileLayout
isValidCopyID	TiledLattice.hh	/^isValidCopyID (ValidCopyID validCopyID) const$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
isValidCopyIDF	TiledLattice.hh	/^isValidCopyIDF () const$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
isValidCopyIDFPost	TiledLattice.hh	/^isValidCopyIDFPost () const$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
isValidCopyIDNone	TiledLattice.hh	/^isValidCopyIDNone () const$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
iterator	Storage.hpp	/^		typedef size_t iterator ;$/;"	t	class:microflow::StorageInKernel
kernelBitSet_Clear	BitSetTest.cc	/^kernelBitSet_Clear()$/;"	f
kernelBitSet_Set	BitSetTest.cc	/^kernelBitSet_Set( size_t pos )$/;"	f
kernelBitSet_Test	BitSetTest.cc	/^kernelBitSet_Test( size_t pos )$/;"	f
kernelCheckTileLayout	TileLayoutTest.cc	/^kernelCheckTileLayout( TileLayout<StorageInKernel> tileLayout )$/;"	f
kernelGetC	LatticeArrangementD3Q19Test.cc	/^kernelGetC(Direction::DirectionIndex index)$/;"	f
kernelGetIndex	LatticeArrangementD3Q19Test.cc	/^kernelGetIndex(Direction::D d)$/;"	f
kernelGetW	LatticeArrangementD3Q19Test.cc	/^kernelGetW(Direction::DirectionIndex index)$/;"	f
kernelLoadCopyOfNodeTypesTest	kernelTileGatherProcessBoundaryCollideTest.cc	/^kernelLoadCopyOfNodeTypesTest$/;"	f
kernelLoadCopyOfTileMapTest	kernelTileGatherProcessBoundaryCollideTest.cc	/^kernelLoadCopyOfTileMapTest$/;"	f
kernelProcessTile	LatticeCalculator.tcc	/^kernelProcessTile$/;"	f	namespace:microflow
kernelSwapFPostWithF	LatticeCalculator.tcc	/^kernelSwapFPostWithF$/;"	f	namespace:microflow
kernelTestTiledLatticeGPU	TiledLatticeTest.cc	/^kernelTestTiledLatticeGPU$/;"	f
kernelTileCollideOpt	kernelTileCollide.tcc	/^kernelTileCollideOpt$/;"	f	namespace:microflow
kernelTileGatherProcessBoundaryCollide	kernelTileGatherProcessBoundaryCollide.tcc	/^kernelTileGatherProcessBoundaryCollide$/;"	f	namespace:microflow
kernelTileProcessBoundaryOpt	kernelTileProcessBoundary.tcc	/^kernelTileProcessBoundaryOpt$/;"	f	namespace:microflow
kernelTilePropagateOpt	kernelTilePropagate.tcc	/^kernelTilePropagateOpt$/;"	f	namespace:microflow
kinematicViscosityLB_	Settings.hpp	/^		double kinematicViscosityLB_ ;$/;"	m	class:microflow::Settings
kinematicViscosityPhysical_	Settings.hpp	/^		double kinematicViscosityPhysical_ ; \/\/ [m^2\/s]$/;"	m	class:microflow::Settings
latticeArrangementName_	Settings.hpp	/^		std::string latticeArrangementName_  ;$/;"	m	class:microflow::Settings
latticeCalculatorCPU_	SimulationEngine.hpp	/^		std::unique_ptr<LatticeCalculatorTypeCPU> latticeCalculatorCPU_ ;$/;"	m	class:microflow::SimulationEngineSpecializationBase
latticeCalculator_	SimulationEngine.hpp	/^		std::unique_ptr<LatticeCalculatorType> latticeCalculator_ ;$/;"	m	class:microflow::SimulationEngineSpecializationBase
latticeSpacingPhysical_	Settings.hpp	/^		double latticeSpacingPhysical_ ;$/;"	m	class:microflow::Settings
latticeTimeStepPhysical_	Settings.hpp	/^		double latticeTimeStepPhysical_ ;$/;"	m	class:microflow::Settings
layoutBorderNode	TileLayout.hpp	/^const NodeType layoutBorderNode = NodeBaseType::MARKER ;$/;"	m	namespace:microflow
linearize	MultidimensionalMappers.hh	/^linearize  (unsigned x, unsigned y, unsigned z,$/;"	f	class:microflow::XYZ
linearize	MultidimensionalMappers.hh	/^linearize  (unsigned x, unsigned y, unsigned z,$/;"	f	class:microflow::YXZ
linearize	MultidimensionalMappers.hh	/^linearize  (unsigned x, unsigned y, unsigned z,$/;"	f	class:microflow::ZigzagNE
linearizeXYZ	Size.hh	/^linearizeXYZ(const Coordinates & coordinates, const Size & size )$/;"	f	namespace:microflow
linearizeXYZ	Tile.hh	672;"	d
linearizeXYZ	Tile.hh	681;"	d
linearizeYXZ	Tile.hh	673;"	d
linearizeYXZ	Tile.hh	682;"	d
linearizeZigzagNE	Tile.hh	674;"	d
linearizeZigzagNE	Tile.hh	683;"	d
loadCPUFromCheckpoint	SimulationEngine.hh	/^loadCPUFromCheckpoint( std::string checkpointFilePath )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
loadCheckpoint	Simulation.cpp	/^loadCheckpoint()$/;"	f	class:microflow::Simulation
loadCheckpoint	SimulationEngine.hh	/^loadCheckpoint( std::string checkpointFilePath )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
loadCheckpoint	SimulationEngine.tcc	/^loadCheckpoint( std::string checkpointFilePath )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
loadConfiguration	Settings.cpp	/^	loadConfiguration( size_t geometryWidthInCells, $/;"	f	class:microflow::Settings
loadCopyOfTileMap	kernelTileGatherProcessBoundaryCollide.tcc	/^void loadCopyOfTileMap$/;"	f	namespace:microflow
loadCsvFile	BoundaryAtLocations.cpp	/^loadCsvFile (const string & filePath)$/;"	f	class:BoundaryAtLocations
loadLocationFiles	BoundaryAtLocations.cpp	/^loadLocationFiles (const string & directoryPath)$/;"	f	class:BoundaryAtLocations
logger	Logger.cpp	/^std::ostream & logger = std::cout ;$/;"	m	namespace:microflow	file:
main	apps/microflow.cpp	/^int main(int argc, char ** argv)$/;"	f
main	apps/stl2vtk.cpp	/^int main(int argc, const char * const argv[])$/;"	f
markSolidNeighbor	SolidNeighborMask.hh	/^markSolidNeighbor( const Direction & direction )$/;"	f	class:microflow::SolidNeighborMask
markSolidNeighbor	SolidNeighborMask.hh	/^markSolidNeighbor( const Direction::DirectionIndex & directionIndex )$/;"	f	class:microflow::SolidNeighborMask
mask	BitSet.hh	/^mask (size_t pos)$/;"	f	class:microflow::BitSet
max	Size.hh	/^Size max( const Size & s1, const Size & s2 )$/;"	f	namespace:microflow
maxNumberOfCheckpoints_	Settings.hpp	/^		unsigned maxNumberOfCheckpoints_ ;$/;"	m	class:microflow::Settings
maxNumberOfVtkFiles_	Settings.hpp	/^		unsigned maxNumberOfVtkFiles_ ;$/;"	m	class:microflow::Settings
maxVelocityLB	LatticeCalculator.hpp	/^		DataType maxVelocityLB ;$/;"	m	class:microflow::ComputationError
maxVelocityNodeCoordinates	LatticeCalculator.hpp	/^		Coordinates maxVelocityNodeCoordinates ;$/;"	m	class:microflow::ComputationError
measures_	PerformanceMeter.hpp	/^    std::vector<Measure> measures_ ;$/;"	m	class:microflow::PerformanceMeter
microflow	Axis.hpp	/^namespace microflow$/;"	n
microflow	BaseIO.hpp	/^namespace microflow$/;"	n
microflow	BitSet.hh	/^namespace microflow$/;"	n
microflow	BitSet.hpp	/^namespace microflow$/;"	n
microflow	BoundaryAtLocations.hpp	/^namespace microflow$/;"	n
microflow	BoundaryDefinitions.hh	/^namespace microflow$/;"	n
microflow	BoundaryDefinitions.hpp	/^namespace microflow$/;"	n
microflow	BoundaryDescription.hh	/^namespace microflow$/;"	n
microflow	BoundaryDescription.hpp	/^namespace microflow$/;"	n
microflow	Calculator.hh	/^namespace microflow$/;"	n
microflow	Calculator.hpp	/^namespace microflow$/;"	n
microflow	CheckpointSettings.hpp	/^namespace microflow$/;"	n
microflow	ClassificatorBoundaryAtLocation.hpp	/^namespace microflow$/;"	n
microflow	CollisionModels.hpp	/^namespace microflow$/;"	n
microflow	ColorAssignment.cpp	/^namespace microflow$/;"	n	file:
microflow	ColorAssignment.hh	/^namespace microflow$/;"	n
microflow	ColorAssignment.hpp	/^namespace microflow$/;"	n
microflow	ColoredPixelClassificator.cpp	/^namespace microflow$/;"	n	file:
microflow	ColoredPixelClassificator.hpp	/^namespace microflow$/;"	n
microflow	ComputationalEngine.hpp	/^namespace microflow$/;"	n
microflow	Coordinates.hh	/^namespace microflow$/;"	n
microflow	Coordinates.hpp	/^namespace microflow$/;"	n
microflow	Cuboid.hh	/^namespace microflow$/;"	n
microflow	Cuboid.hpp	/^namespace microflow$/;"	n
microflow	DataFlowDirection.hpp	/^namespace microflow$/;"	n
microflow	Direction.cpp	/^namespace microflow$/;"	n	file:
microflow	Direction.hh	/^namespace microflow$/;"	n
microflow	Direction.hpp	/^namespace microflow$/;"	n
microflow	Exceptions.hpp	/^namespace microflow$/;"	n
microflow	ExpandedNodeLayout.cpp	/^namespace microflow$/;"	n	file:
microflow	ExpandedNodeLayout.hh	/^namespace microflow$/;"	n
microflow	ExpandedNodeLayout.hpp	/^namespace microflow$/;"	n
microflow	FluidModels.hh	/^namespace microflow$/;"	n
microflow	FluidModels.hpp	/^namespace microflow$/;"	n
microflow	Image.hh	/^namespace microflow$/;"	n
microflow	Image.hpp	/^namespace microflow$/;"	n
microflow	LBMOperatorChooser.hh	/^namespace microflow$/;"	n
microflow	LBMOperatorChooser.hpp	/^namespace microflow$/;"	n
microflow	LatticeArrangement.hh	/^namespace microflow$/;"	n
microflow	LatticeArrangement.hpp	/^namespace microflow$/;"	n
microflow	LatticeArrangementD3Q19.cpp	/^namespace microflow$/;"	n	file:
microflow	LatticeArrangementD3Q19.hh	/^namespace microflow$/;"	n
microflow	LatticeArrangementD3Q19.hpp	/^namespace microflow$/;"	n
microflow	LatticeArrangementD3Q27.cpp	/^namespace microflow$/;"	n	file:
microflow	LatticeArrangementD3Q27.hh	/^namespace microflow$/;"	n
microflow	LatticeArrangementD3Q27.hpp	/^namespace microflow$/;"	n
microflow	LatticeCalculator.hh	/^namespace microflow$/;"	n
microflow	LatticeCalculator.hpp	/^namespace microflow$/;"	n
microflow	LatticeCalculator.tcc	/^namespace microflow$/;"	n	file:
microflow	LinearizedMatrix.hh	/^namespace microflow$/;"	n
microflow	LinearizedMatrix.hpp	/^namespace microflow$/;"	n
microflow	Logger.cpp	/^namespace microflow$/;"	n	file:
microflow	Logger.hpp	/^namespace microflow$/;"	n
microflow	MRubyInterpreter.cpp	/^namespace microflow$/;"	n	file:
microflow	MRubyInterpreter.hpp	/^namespace microflow$/;"	n
microflow	ModificationRhoU.hh	/^namespace microflow$/;"	n
microflow	ModificationRhoU.hpp	/^namespace microflow$/;"	n
microflow	MultidimensionalMappers.hh	/^namespace microflow$/;"	n
microflow	MultidimensionalMappers.hpp	/^namespace microflow$/;"	n
microflow	NodeBaseType.cpp	/^namespace microflow$/;"	n	file:
microflow	NodeBaseType.hpp	/^namespace microflow$/;"	n
microflow	NodeCalculator.hh	/^namespace microflow$/;"	n
microflow	NodeCalculator.hpp	/^namespace microflow$/;"	n
microflow	NodeFromTile.hh	/^namespace microflow$/;"	n
microflow	NodeFromTile.hpp	/^namespace microflow$/;"	n
microflow	NodeFromTileTest.hpp	/^namespace microflow$/;"	n
microflow	NodeLayout.cpp	/^namespace microflow$/;"	n	file:
microflow	NodeLayout.hh	/^namespace microflow$/;"	n
microflow	NodeLayout.hpp	/^namespace microflow$/;"	n
microflow	NodeLayoutTest.cc	/^namespace microflow$/;"	n	file:
microflow	NodeLayoutTest.hpp	/^namespace microflow$/;"	n
microflow	NodeLayoutWriter.cpp	/^namespace microflow$/;"	n	file:
microflow	NodeLayoutWriter.hpp	/^namespace microflow$/;"	n
microflow	NodeType.hh	/^namespace microflow$/;"	n
microflow	NodeType.hpp	/^namespace microflow$/;"	n
microflow	Optimization.hpp	/^namespace microflow$/;"	n
microflow	PackedDirectionVector.hh	/^namespace microflow$/;"	n
microflow	PackedDirectionVector.hpp	/^namespace microflow$/;"	n
microflow	PackedNodeNormalSet.hh	/^namespace microflow$/;"	n
microflow	PackedNodeNormalSet.hpp	/^namespace microflow$/;"	n
microflow	PerformanceMeter.cpp	/^namespace microflow$/;"	n	file:
microflow	PerformanceMeter.hh	/^namespace microflow$/;"	n
microflow	PerformanceMeter.hpp	/^namespace microflow$/;"	n
microflow	ProgramParameters.cpp	/^namespace microflow$/;"	n	file:
microflow	ProgramParameters.hpp	/^namespace microflow$/;"	n
microflow	ReaderVtk.hh	/^namespace microflow$/;"	n
microflow	ReaderVtk.hpp	/^namespace microflow$/;"	n
microflow	RubyInterpreter.cpp	/^namespace microflow$/;"	n	file:
microflow	RubyInterpreter.hpp	/^namespace microflow$/;"	n
microflow	Settings.cpp	/^namespace microflow$/;"	n	file:
microflow	Settings.hh	/^namespace microflow$/;"	n
microflow	Settings.hpp	/^namespace microflow$/;"	n
microflow	Simulation.cpp	/^namespace microflow$/;"	n	file:
microflow	Simulation.hpp	/^namespace microflow$/;"	n
microflow	SimulationEngine.hh	/^namespace microflow$/;"	n
microflow	SimulationEngine.hpp	/^namespace microflow$/;"	n
microflow	SimulationEngine.tcc	/^namespace microflow$/;"	n	file:
microflow	Size.hh	/^namespace microflow$/;"	n
microflow	Size.hpp	/^namespace microflow$/;"	n
microflow	SolidNeighborMask.hh	/^namespace microflow$/;"	n
microflow	SolidNeighborMask.hpp	/^namespace microflow$/;"	n
microflow	Storage.hh	/^namespace microflow$/;"	n
microflow	Storage.hpp	/^namespace microflow$/;"	n
microflow	ThreadMapper.hh	/^namespace microflow$/;"	n
microflow	ThreadMapper.hpp	/^namespace microflow$/;"	n
microflow	Tile.hh	/^namespace microflow$/;"	n
microflow	Tile.hpp	/^namespace microflow$/;"	n
microflow	TileCalculator.hh	/^namespace microflow$/;"	n
microflow	TileCalculator.hpp	/^namespace microflow$/;"	n
microflow	TileDataArrangement.hpp	/^namespace microflow$/;"	n
microflow	TileDefinitions.hpp	/^namespace microflow$/;"	n
microflow	TileIterator.hpp	/^namespace microflow$/;"	n
microflow	TileLayout.cpp	/^namespace microflow$/;"	n	file:
microflow	TileLayout.hh	/^namespace microflow$/;"	n
microflow	TileLayout.hpp	/^namespace microflow$/;"	n
microflow	TileLayout.tcc	/^namespace microflow$/;"	n	file:
microflow	TileTest.hpp	/^namespace microflow$/;"	n
microflow	TileTraitsCommon.hh	/^namespace microflow$/;"	n
microflow	TileTraitsCommon.hpp	/^namespace microflow$/;"	n
microflow	TiledLattice.cpp	/^namespace microflow$/;"	n	file:
microflow	TiledLattice.hh	/^namespace microflow$/;"	n
microflow	TiledLattice.hpp	/^namespace microflow$/;"	n
microflow	TiledLattice.tcc	/^namespace microflow$/;"	n	file:
microflow	TiledLatticeTest.hpp	/^namespace microflow$/;"	n
microflow	TilingStatistic.cpp	/^namespace microflow$/;"	n	file:
microflow	TilingStatistic.hpp	/^namespace microflow$/;"	n
microflow	TypeNamesExtractor.hh	/^namespace microflow$/;"	n
microflow	TypeNamesExtractor.hpp	/^namespace microflow$/;"	n
microflow	VtkTypes.hpp	/^namespace microflow$/;"	n
microflow	Writer.hh	/^namespace microflow$/;"	n
microflow	Writer.hpp	/^namespace microflow$/;"	n
microflow	WriterVtk.hh	/^namespace microflow$/;"	n
microflow	WriterVtk.hpp	/^namespace microflow$/;"	n
microflow	fileUtils.cpp	/^namespace microflow$/;"	n	file:
microflow	fileUtils.hpp	/^namespace microflow$/;"	n
microflow	gpuAlgorithms.hh	/^namespace microflow$/;"	n
microflow	gpuTools.hpp	/^namespace microflow$/;"	n
microflow	kernelTileCollide.hpp	/^namespace microflow$/;"	n
microflow	kernelTileCollide.tcc	/^namespace microflow$/;"	n	file:
microflow	kernelTileGatherProcessBoundaryCollide.hpp	/^namespace microflow$/;"	n
microflow	kernelTileGatherProcessBoundaryCollide.tcc	/^namespace microflow$/;"	n	file:
microflow	kernelTileProcessBoundary.hpp	/^namespace microflow$/;"	n
microflow	kernelTileProcessBoundary.tcc	/^namespace microflow$/;"	n	file:
microflow	kernelTilePropagate.hpp	/^namespace microflow$/;"	n
microflow	kernelTilePropagate.tcc	/^namespace microflow$/;"	n	file:
microflow	microflowTools.cpp	/^namespace microflow$/;"	n	file:
microflow	microflowTools.hpp	/^namespace microflow$/;"	n
microflow::Axis	Axis.hpp	/^enum class Axis$/;"	c	namespace:microflow
microflow::Axis::X	Axis.hpp	/^	X = 0,$/;"	m	class:microflow::Axis
microflow::Axis::X	Axis.hpp	/^static constexpr unsigned X = 0 ;$/;"	m	class:microflow::Axis
microflow::Axis::Y	Axis.hpp	/^	Y = 1,$/;"	m	class:microflow::Axis
microflow::Axis::Y	Axis.hpp	/^static constexpr unsigned Y = 1 ;$/;"	m	class:microflow::Axis
microflow::Axis::Z	Axis.hpp	/^	Z = 2$/;"	m	class:microflow::Axis
microflow::Axis::Z	Axis.hpp	/^static constexpr unsigned Z = 2 ;$/;"	m	class:microflow::Axis
microflow::Axis::toAxis	Axis.hpp	/^enum Axis toAxis(unsigned i)$/;"	f	class:microflow::Axis
microflow::B	Direction.hpp	/^constexpr Direction::D   B   = Direction::BOTTOM ;$/;"	m	namespace:microflow
microflow::BitSet	BitSet.hpp	/^class BitSet$/;"	c	namespace:microflow
microflow::BitSet::clear	BitSet.hh	/^clear()$/;"	f	class:microflow::BitSet
microflow::BitSet::isClear	BitSet.hpp	/^		HD bool isClear() const { return 0 == set_ ; }$/;"	f	class:microflow::BitSet
microflow::BitSet::mask	BitSet.hh	/^mask (size_t pos)$/;"	f	class:microflow::BitSet
microflow::BitSet::operator ==	BitSet.hh	/^operator== (const BitSet & arg) const$/;"	f	class:microflow::BitSet
microflow::BitSet::operator |	BitSet.hh	/^operator| (const BitSet & arg) const$/;"	f	class:microflow::BitSet
microflow::BitSet::set	BitSet.hh	/^set (size_t pos)$/;"	f	class:microflow::BitSet
microflow::BitSet::set_	BitSet.hpp	/^		unsigned int set_ ;$/;"	m	class:microflow::BitSet
microflow::BitSet::test	BitSet.hh	/^test (size_t pos) const$/;"	f	class:microflow::BitSet
microflow::BoundaryAtLocations	BoundaryAtLocations.hpp	/^class BoundaryAtLocations : public BoundaryDescription$/;"	c	namespace:microflow
microflow::BoundaryAtLocations::fileNames_	BoundaryAtLocations.hpp	/^		std::vector <std::string> fileNames_ ;$/;"	m	class:microflow::BoundaryAtLocations
microflow::BoundaryAtLocations::getNodeLocations	BoundaryAtLocations.hpp	/^		const std::vector <Coordinates> & getNodeLocations() const$/;"	f	class:microflow::BoundaryAtLocations
microflow::BoundaryAtLocations::nodeLocations_	BoundaryAtLocations.hpp	/^		std::vector <Coordinates> nodeLocations_ ;$/;"	m	class:microflow::BoundaryAtLocations
microflow::BoundaryDefinitions	BoundaryDefinitions.hpp	/^class BoundaryDefinitions$/;"	c	namespace:microflow
microflow::BoundaryDefinitions::addBoundaryDefinition	BoundaryDefinitions.hh	/^addBoundaryDefinition( double velocityX, double velocityY, double velocityZ, $/;"	f	class:microflow::BoundaryDefinitions
microflow::BoundaryDefinitions::getBoundaryPressure	BoundaryDefinitions.hh	/^getBoundaryPressure( unsigned short boundaryDefinitionIndex ) const$/;"	f	class:microflow::BoundaryDefinitions
microflow::BoundaryDefinitions::getBoundaryVelocityX	BoundaryDefinitions.hh	/^getBoundaryVelocityX( unsigned short boundaryDefinitionIndex ) const$/;"	f	class:microflow::BoundaryDefinitions
microflow::BoundaryDefinitions::getBoundaryVelocityY	BoundaryDefinitions.hh	/^getBoundaryVelocityY( unsigned short boundaryDefinitionIndex ) const$/;"	f	class:microflow::BoundaryDefinitions
microflow::BoundaryDefinitions::getBoundaryVelocityZ	BoundaryDefinitions.hh	/^getBoundaryVelocityZ( unsigned short boundaryDefinitionIndex ) const$/;"	f	class:microflow::BoundaryDefinitions
microflow::BoundaryDefinitions::pressure_	BoundaryDefinitions.hpp	/^		std::vector<double> pressure_ ;$/;"	m	class:microflow::BoundaryDefinitions
microflow::BoundaryDefinitions::velocityX_	BoundaryDefinitions.hpp	/^		std::vector<double> velocityX_ ;$/;"	m	class:microflow::BoundaryDefinitions
microflow::BoundaryDefinitions::velocityY_	BoundaryDefinitions.hpp	/^		std::vector<double> velocityY_ ;$/;"	m	class:microflow::BoundaryDefinitions
microflow::BoundaryDefinitions::velocityZ_	BoundaryDefinitions.hpp	/^		std::vector<double> velocityZ_ ;$/;"	m	class:microflow::BoundaryDefinitions
microflow::BoundaryDescription	BoundaryDescription.hpp	/^class BoundaryDescription$/;"	c	namespace:microflow
microflow::BoundaryDescription::BoundaryDescription	BoundaryDescription.hh	/^BoundaryDescription()$/;"	f	class:microflow::BoundaryDescription
microflow::BoundaryDescription::getNodeBaseType	BoundaryDescription.hh	/^getNodeBaseType() const$/;"	f	class:microflow::BoundaryDescription
microflow::BoundaryDescription::getPressure	BoundaryDescription.hh	/^getPressure() const$/;"	f	class:microflow::BoundaryDescription
microflow::BoundaryDescription::isBoundary	BoundaryDescription.hh	/^isBoundary() const$/;"	f	class:microflow::BoundaryDescription
microflow::BoundaryDescription::isCharacteristicLengthMarker	BoundaryDescription.hh	/^isCharacteristicLengthMarker() const$/;"	f	class:microflow::BoundaryDescription
microflow::BoundaryDescription::isCharacteristicLengthMarker_	BoundaryDescription.hpp	/^		bool isCharacteristicLengthMarker_ ;$/;"	m	class:microflow::BoundaryDescription
microflow::BoundaryDescription::isFluid	BoundaryDescription.hh	/^isFluid() const$/;"	f	class:microflow::BoundaryDescription
microflow::BoundaryDescription::isSolid	BoundaryDescription.hh	/^isSolid() const$/;"	f	class:microflow::BoundaryDescription
microflow::BoundaryDescription::nodeBaseType_	BoundaryDescription.hpp	/^		NodeBaseType nodeBaseType_ ;$/;"	m	class:microflow::BoundaryDescription
microflow::BoundaryDescription::pressure_	BoundaryDescription.hpp	/^		double pressure_    ;$/;"	m	class:microflow::BoundaryDescription
microflow::BoundaryDescription::velocity_	BoundaryDescription.hpp	/^		double velocity_[3] ;$/;"	m	class:microflow::BoundaryDescription
microflow::BoundaryDescription::~BoundaryDescription	BoundaryDescription.hpp	/^		virtual ~BoundaryDescription() {} ;$/;"	f	class:microflow::BoundaryDescription
microflow::BoundaryProcessor	LBMOperatorChooser.hpp	/^class BoundaryProcessor$/;"	c	namespace:microflow
microflow::BoundaryProcessor::apply	LBMOperatorChooser.hh	/^apply( Calculator & calculator, Element & element )$/;"	f	class:microflow::BoundaryProcessor
microflow::COPY	NodeFromTile.hpp	/^	COPY$/;"	e	enum:microflow::DataStorageMethod
microflow::Calculator	Calculator.hpp	/^class Calculator$/;"	c	namespace:microflow
microflow::Calculator::Calculator	Calculator.hh	/^Calculator(DataType rho0LB, $/;"	f	class:microflow::Calculator
microflow::Calculator::invRho0LB_	Calculator.hpp	/^		DataType invRho0LB_ ;$/;"	m	class:microflow::Calculator
microflow::Calculator::invTau_	Calculator.hpp	/^		DataType invTau_ ;$/;"	m	class:microflow::Calculator
microflow::Calculator::rho0LB_	Calculator.hpp	/^		DataType rho0LB_ ;$/;"	m	class:microflow::Calculator
microflow::Calculator::tau_	Calculator.hpp	/^		DataType tau_ ;$/;"	m	class:microflow::Calculator
microflow::Calculator::u0LB_	Calculator.hpp	/^		DataType u0LB_[ LatticeArrangement::getD() ] ;$/;"	m	class:microflow::Calculator
microflow::CheckpointSettings	CheckpointSettings.hpp	/^class CheckpointSettings$/;"	c	namespace:microflow
microflow::CheckpointSettings::getGeometryOrigin	CheckpointSettings.hpp	/^		UniversalCoordinates<double> getGeometryOrigin() const$/;"	f	class:microflow::CheckpointSettings
microflow::CheckpointSettings::getLatticeSpacingPhysical	CheckpointSettings.hpp	/^		double getLatticeSpacingPhysical() const { return 1.0 ; }$/;"	f	class:microflow::CheckpointSettings
microflow::CheckpointSettings::shouldSaveMassFlowFractions	CheckpointSettings.hpp	/^		bool shouldSaveMassFlowFractions      () const { return true ; }$/;"	f	class:microflow::CheckpointSettings
microflow::CheckpointSettings::shouldSaveNodes	CheckpointSettings.hpp	/^		bool shouldSaveNodes                  () const { return true ; }$/;"	f	class:microflow::CheckpointSettings
microflow::CheckpointSettings::shouldSavePressurePhysical	CheckpointSettings.hpp	/^		bool shouldSavePressurePhysical() const { return false ; }$/;"	f	class:microflow::CheckpointSettings
microflow::CheckpointSettings::shouldSaveVelocityLB	CheckpointSettings.hpp	/^		bool shouldSaveVelocityLB             () const { return true ; }$/;"	f	class:microflow::CheckpointSettings
microflow::CheckpointSettings::shouldSaveVelocityPhysical	CheckpointSettings.hpp	/^		bool shouldSaveVelocityPhysical() const { return false ; }$/;"	f	class:microflow::CheckpointSettings
microflow::CheckpointSettings::shouldSaveVolumetricMassDensityLB	CheckpointSettings.hpp	/^		bool shouldSaveVolumetricMassDensityLB() const { return true ; }$/;"	f	class:microflow::CheckpointSettings
microflow::CheckpointSettings::transformVelocityLBToPhysical	CheckpointSettings.hpp	/^		double transformVelocityLBToPhysical (double) const$/;"	f	class:microflow::CheckpointSettings
microflow::CheckpointSettings::transformVolumetricMassDensityLBToPressurePhysical	CheckpointSettings.hpp	/^		double transformVolumetricMassDensityLBToPressurePhysical (double) const$/;"	f	class:microflow::CheckpointSettings
microflow::ClassificatorBoundaryAtLocation	ClassificatorBoundaryAtLocation.hpp	/^class ClassificatorBoundaryAtLocation$/;"	c	namespace:microflow
microflow::ClassificatorBoundaryAtLocation::boundaryAtLocations_	ClassificatorBoundaryAtLocation.hpp	/^		std::vector <BoundaryAtLocations> boundaryAtLocations_ ;$/;"	m	class:microflow::ClassificatorBoundaryAtLocation
microflow::Collider	LBMOperatorChooser.hpp	/^class Collider$/;"	c	namespace:microflow
microflow::Collider::apply	LBMOperatorChooser.hh	/^apply( Calculator & calculator, Element & element )$/;"	f	class:microflow::Collider
microflow::CollisionModelBGK	CollisionModels.hpp	/^class CollisionModelBGK$/;"	c	namespace:microflow
microflow::CollisionModelBGK::getName	CollisionModels.hpp	/^		static const std::string getName() { return "CollisionModelBGK" ; } ;$/;"	f	class:microflow::CollisionModelBGK
microflow::CollisionModelBGK::isBGK	CollisionModels.hpp	/^		static constexpr bool isBGK = true ;$/;"	m	class:microflow::CollisionModelBGK
microflow::CollisionModelBase	CollisionModels.hpp	/^class CollisionModelBase$/;"	c	namespace:microflow
microflow::CollisionModelBase::isBGK	CollisionModels.hpp	/^		static constexpr bool isBGK = false ;$/;"	m	class:microflow::CollisionModelBase
microflow::CollisionModelBase::isMRT	CollisionModels.hpp	/^		static constexpr bool isMRT = false ;$/;"	m	class:microflow::CollisionModelBase
microflow::CollisionModelMRT	CollisionModels.hpp	/^class CollisionModelMRT$/;"	c	namespace:microflow
microflow::CollisionModelMRT::getName	CollisionModels.hpp	/^		static const std::string getName() { return "CollisionModelMRT" ; } ;$/;"	f	class:microflow::CollisionModelMRT
microflow::CollisionModelMRT::isMRT	CollisionModels.hpp	/^		static constexpr bool isMRT = true ;$/;"	m	class:microflow::CollisionModelMRT
microflow::ColorAssignment	ColorAssignment.hpp	/^class ColorAssignment : public BoundaryDescription$/;"	c	namespace:microflow
microflow::ColorAssignment::ColorAssignment	ColorAssignment.hh	/^ColorAssignment() : BoundaryDescription()$/;"	f	class:microflow::ColorAssignment
microflow::ColorAssignment::colorEquals	ColorAssignment.hh	/^colorEquals(const png::rgb_pixel & color) const$/;"	f	class:microflow::ColorAssignment
microflow::ColorAssignment::color_	ColorAssignment.hpp	/^		png::rgb_pixel color_ ;$/;"	m	class:microflow::ColorAssignment
microflow::ColorAssignment::readElement	ColorAssignment.cpp	/^readElement (const string & elementName, istream & stream)$/;"	f	class:microflow::ColorAssignment
microflow::ColorAssignment::~ColorAssignment	ColorAssignment.hpp	/^		virtual ~ColorAssignment() {} ;$/;"	f	class:microflow::ColorAssignment
microflow::ColoredPixelClassificator	ColoredPixelClassificator.hpp	/^class ColoredPixelClassificator$/;"	c	namespace:microflow
microflow::ColoredPixelClassificator::ColoredPixelClassificator	ColoredPixelClassificator.cpp	/^ColoredPixelClassificator( std::string pathToColorAssignmentFile )$/;"	f	class:microflow::ColoredPixelClassificator
microflow::ColoredPixelClassificator::boundaryAssignments_	ColoredPixelClassificator.hpp	/^		std::vector< ColorAssignment > boundaryAssignments_ ;$/;"	m	class:microflow::ColoredPixelClassificator
microflow::ColoredPixelClassificator::createNode	ColoredPixelClassificator.cpp	/^createNode( const png::rgb_pixel & pixel ) const$/;"	f	class:microflow::ColoredPixelClassificator
microflow::ColoredPixelClassificator::findColorAssignment	ColoredPixelClassificator.cpp	/^findColorAssignment( const png::rgb_pixel & color,$/;"	f	class:microflow::ColoredPixelClassificator
microflow::ColoredPixelClassificator::getBoundaryDefinitions	ColoredPixelClassificator.cpp	/^getBoundaryDefinitions() const$/;"	f	class:microflow::ColoredPixelClassificator
microflow::ColoredPixelClassificator::solidFluidAssignments_	ColoredPixelClassificator.hpp	/^		std::vector< ColorAssignment > solidFluidAssignments_ ;$/;"	m	class:microflow::ColoredPixelClassificator
microflow::ColoredPixelClassificator::~ColoredPixelClassificator	ColoredPixelClassificator.cpp	/^~ColoredPixelClassificator()$/;"	f	class:microflow::ColoredPixelClassificator
microflow::ComputationError	LatticeCalculator.hpp	/^class ComputationError$/;"	c	namespace:microflow
microflow::ComputationError::error	LatticeCalculator.hpp	/^		DataType error ;$/;"	m	class:microflow::ComputationError
microflow::ComputationError::maxVelocityLB	LatticeCalculator.hpp	/^		DataType maxVelocityLB ;$/;"	m	class:microflow::ComputationError
microflow::ComputationError::maxVelocityNodeCoordinates	LatticeCalculator.hpp	/^		Coordinates maxVelocityNodeCoordinates ;$/;"	m	class:microflow::ComputationError
microflow::ComputationalEngineCPU	ComputationalEngine.hpp	/^class ComputationalEngineCPU$/;"	c	namespace:microflow
microflow::ComputationalEngineCPU::getName	ComputationalEngine.hpp	/^		static const std::string getName() { return "CPU" ; }$/;"	f	class:microflow::ComputationalEngineCPU
microflow::ComputationalEngineGPU	ComputationalEngine.hpp	/^class ComputationalEngineGPU$/;"	c	namespace:microflow
microflow::ComputationalEngineGPU::getName	ComputationalEngine.hpp	/^		static const std::string getName() { return "GPU" ; }$/;"	f	class:microflow::ComputationalEngineGPU
microflow::Coordinates	Coordinates.hpp	/^typedef UniversalCoordinates <size_t> Coordinates ;$/;"	t	namespace:microflow
microflow::CreateSimulationEngineMethod	SimulationEngine.hpp	/^typedef SimulationEngine * ( * CreateSimulationEngineMethod )$/;"	t	namespace:microflow
microflow::Cuboid	Cuboid.hpp	/^class Cuboid$/;"	c	namespace:microflow
microflow::Cuboid::Cuboid	Cuboid.hh	/^Cuboid( unsigned xMin_, unsigned xMax_,$/;"	f	class:microflow::Cuboid
microflow::Cuboid::xMax	Cuboid.hpp	/^		unsigned xMax ;$/;"	m	class:microflow::Cuboid
microflow::Cuboid::xMin	Cuboid.hpp	/^		unsigned xMin ;$/;"	m	class:microflow::Cuboid
microflow::Cuboid::yMax	Cuboid.hpp	/^		unsigned yMax ;$/;"	m	class:microflow::Cuboid
microflow::Cuboid::yMin	Cuboid.hpp	/^		unsigned yMin ;$/;"	m	class:microflow::Cuboid
microflow::Cuboid::zMax	Cuboid.hpp	/^		unsigned zMax ;$/;"	m	class:microflow::Cuboid
microflow::Cuboid::zMin	Cuboid.hpp	/^		unsigned zMin ;$/;"	m	class:microflow::Cuboid
microflow::D3Q19	LatticeArrangementD3Q19.hpp	/^typedef LatticeArrangement<3,19>    D3Q19 ;$/;"	t	namespace:microflow
microflow::D3Q27	LatticeArrangementD3Q27.hpp	/^typedef LatticeArrangement<3,27>    D3Q27 ;$/;"	t	namespace:microflow
microflow::DataFlowDirection	DataFlowDirection.hpp	/^enum class DataFlowDirection$/;"	c	namespace:microflow
microflow::DataFlowDirection::FPOST_TO_F	DataFlowDirection.hpp	/^	FPOST_TO_F ,$/;"	m	class:microflow::DataFlowDirection
microflow::DataStorageMethod	NodeFromTile.hpp	/^enum DataStorageMethod$/;"	g	namespace:microflow
microflow::Direction	Direction.hpp	/^class Direction : private PackedDirectionVector<DIRECTION_TYPE>$/;"	c	namespace:microflow
microflow::Direction::BOTTOM	Direction.cpp	/^constexpr Direction::D Direction::BOTTOM ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::BOTTOM	Direction.hpp	/^		static constexpr D BOTTOM = 0b00110000 ; \/\/ z = -1$/;"	m	class:microflow::Direction
microflow::Direction::D	Direction.hpp	/^		typedef PackedDirectionVector<DIRECTION_TYPE>::InternalStorageType   D ;$/;"	t	class:microflow::Direction
microflow::Direction::D3Q19	Direction.cpp	/^constexpr Direction::D Direction::D3Q19[]    ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::D3Q19	Direction.hpp	/^		static constexpr D D3Q19[] = { STRAIGHT, SLANTING } ;$/;"	m	class:microflow::Direction
microflow::Direction::D3Q27	Direction.cpp	/^constexpr Direction::D Direction::D3Q27[]    ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::D3Q27	Direction.hpp	/^		static constexpr D D3Q27[] = { STRAIGHT, SLANTING, CORNERS } ;$/;"	m	class:microflow::Direction
microflow::Direction::Direction	Direction.hh	/^Direction( Direction::D direction )$/;"	f	class:microflow::Direction
microflow::Direction::Direction	Direction.hh	/^Direction()$/;"	f	class:microflow::Direction
microflow::Direction::DirectionIndex	Direction.hpp	/^		typedef unsigned DirectionIndex ;$/;"	t	class:microflow::Direction
microflow::Direction::EAST	Direction.cpp	/^constexpr Direction::D Direction::EAST   ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::EAST	Direction.hpp	/^		static constexpr D EAST   = 0b00000001 ; \/\/ x = +1$/;"	m	class:microflow::Direction
microflow::Direction::NORTH	Direction.cpp	/^constexpr Direction::D Direction::NORTH  ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::NORTH	Direction.hpp	/^		static constexpr D NORTH  = 0b00000100 ; \/\/ y = +1$/;"	m	class:microflow::Direction
microflow::Direction::RS_STRANGE_MARKING	Direction.cpp	/^constexpr Direction::D Direction::RS_STRANGE_MARKING ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::RS_STRANGE_MARKING	Direction.hpp	/^		static constexpr D RS_STRANGE_MARKING = 0b00101010 ; $/;"	m	class:microflow::Direction
microflow::Direction::SELF	Direction.hpp	/^		static constexpr D SELF   = 0 ;$/;"	m	class:microflow::Direction
microflow::Direction::SOUTH	Direction.cpp	/^constexpr Direction::D Direction::SOUTH  ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::SOUTH	Direction.hpp	/^		static constexpr D SOUTH  = 0b00001100 ; \/\/ y = -1$/;"	m	class:microflow::Direction
microflow::Direction::TOP	Direction.cpp	/^constexpr Direction::D Direction::TOP    ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::TOP	Direction.hpp	/^		static constexpr D TOP    = 0b00010000 ; \/\/ z = +1$/;"	m	class:microflow::Direction
microflow::Direction::WEST	Direction.cpp	/^constexpr Direction::D Direction::WEST   ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::WEST	Direction.hpp	/^		static constexpr D WEST   = 0b00000011 ; \/\/ x = -1$/;"	m	class:microflow::Direction
microflow::Direction::computeInverse	Direction.hh	/^computeInverse() const$/;"	f	class:microflow::Direction
microflow::Direction::get	Direction.hh	/^get() const$/;"	f	class:microflow::Direction
microflow::Direction::getIndexD3Q27	Direction.hh	/^getIndexD3Q27() const$/;"	f	class:microflow::Direction
microflow::Direction::getX	Direction.hh	/^getX() const$/;"	f	class:microflow::Direction
microflow::Direction::getY	Direction.hh	/^getY() const$/;"	f	class:microflow::Direction
microflow::Direction::getZ	Direction.hh	/^getZ() const$/;"	f	class:microflow::Direction
microflow::Direction::operator !=	Direction.hh	/^operator!=( const Direction & direction ) const$/;"	f	class:microflow::Direction
microflow::Direction::operator +	Direction.hh	/^operator+( const Direction & right ) const$/;"	f	class:microflow::Direction
microflow::Direction::operator -	Direction.hh	/^operator-( const Direction & right ) const$/;"	f	class:microflow::Direction
microflow::Direction::operator ==	Direction.hh	/^operator==( const Direction & direction ) const$/;"	f	class:microflow::Direction
microflow::Direction::setX	Direction.hh	/^setX( int value )$/;"	f	class:microflow::Direction
microflow::Direction::setY	Direction.hh	/^setY( int value )$/;"	f	class:microflow::Direction
microflow::Direction::setZ	Direction.hh	/^setZ( int value )$/;"	f	class:microflow::Direction
microflow::Direction::slanting	Direction.cpp	/^constexpr Direction::D Direction::slanting[] ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::slanting	Direction.hpp	/^		static constexpr D slanting[] = { SLANTING } ;$/;"	m	class:microflow::Direction
microflow::Direction::straight	Direction.cpp	/^constexpr Direction::D Direction::straight[] ;$/;"	m	class:microflow::Direction	file:
microflow::Direction::straight	Direction.hpp	/^		static constexpr D straight[] = { STRAIGHT } ;$/;"	m	class:microflow::Direction
microflow::DontSaveRhoU	kernelTileGatherProcessBoundaryCollide.hpp	/^class DontSaveRhoU$/;"	c	namespace:microflow
microflow::DontSaveRhoU::operator ()	kernelTileGatherProcessBoundaryCollide.hpp	/^		HD bool operator() () const { return false ; }$/;"	f	class:microflow::DontSaveRhoU
microflow::E	Direction.hpp	/^constexpr Direction::D   E   = Direction::EAST ;$/;"	m	namespace:microflow
microflow::EB	Direction.hpp	/^constexpr Direction::D   EB  = Direction::EAST + Direction::BOTTOM ;$/;"	m	namespace:microflow
microflow::EMPTY_TILE	TileIterator.hpp	/^constexpr unsigned int EMPTY_TILE = std::numeric_limits<unsigned int>::max() ;$/;"	m	namespace:microflow
microflow::ET	Direction.hpp	/^constexpr Direction::D   ET  = Direction::EAST + Direction::TOP ;$/;"	m	namespace:microflow
microflow::Empty	kernelTilePropagate.tcc	/^class Empty {} ; $/;"	c	namespace:microflow	file:
microflow::Empty2	kernelTilePropagate.tcc	/^template <class,class> class Empty2 {} ;$/;"	c	namespace:microflow	file:
microflow::ExpandedNodeLayout	ExpandedNodeLayout.hpp	/^class ExpandedNodeLayout$/;"	c	namespace:microflow
microflow::ExpandedNodeLayout::ExpandedNodeLayout	ExpandedNodeLayout.cpp	/^ExpandedNodeLayout( NodeLayout & nodeLayout )$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::classifyNodesPlacedOnBoundary	ExpandedNodeLayout.cpp	/^classifyNodesPlacedOnBoundary (const Settings & settings)$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::classifyPlacementForBoundaryNodes	ExpandedNodeLayout.cpp	/^classifyPlacementForBoundaryNodes (const Settings & settings)$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::computeNormalVectors	ExpandedNodeLayout.cpp	/^computeNormalVectors()$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::computeSolidNeighborMasks	ExpandedNodeLayout.cpp	/^computeSolidNeighborMasks()$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::getNodeLayout	ExpandedNodeLayout.hh	/^getNodeLayout() const$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::getNormalVectors	ExpandedNodeLayout.hh	/^getNormalVectors( unsigned x, unsigned y, unsigned z) const$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::getNormalVectors	ExpandedNodeLayout.hh	/^getNormalVectors(const Coordinates & coordinates) const$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::getSize	ExpandedNodeLayout.hh	/^getSize() const$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::getSolidNeighborMask	ExpandedNodeLayout.hh	/^getSolidNeighborMask( const Coordinates & coordinates ) const$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::getSolidNeighborMask	ExpandedNodeLayout.hh	/^getSolidNeighborMask( unsigned x, unsigned y, unsigned z ) const$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::isNodePlacedOnBoundary	ExpandedNodeLayout.hh	/^isNodePlacedOnBoundary (unsigned x, unsigned y, unsigned z) const$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::nodeLayout_	ExpandedNodeLayout.hpp	/^		NodeLayout & nodeLayout_ ;$/;"	m	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::nodeNormals_	ExpandedNodeLayout.hpp	/^		LinearizedMatrix< PackedNodeNormalSet > nodeNormals_ ;$/;"	m	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::rebuildBoundaryNodes	ExpandedNodeLayout.cpp	/^rebuildBoundaryNodes (const Settings & settings)$/;"	f	class:microflow::ExpandedNodeLayout
microflow::ExpandedNodeLayout::solidNeighborMasks_	ExpandedNodeLayout.hpp	/^		LinearizedMatrix< SolidNeighborMask   > solidNeighborMasks_ ;$/;"	m	class:microflow::ExpandedNodeLayout
microflow::FluidModel	FluidModels.hpp	/^class FluidModel$/;"	c	namespace:microflow
microflow::FluidModel::isCompressible	FluidModels.hpp	/^		static constexpr bool isCompressible   = false ;$/;"	m	class:microflow::FluidModel
microflow::FluidModel::isIncompressible	FluidModels.hpp	/^		static constexpr bool isIncompressible = false ;$/;"	m	class:microflow::FluidModel
microflow::FluidModelIncompressible	FluidModels.hpp	/^class FluidModelIncompressible : public FluidModel$/;"	c	namespace:microflow
microflow::FluidModelIncompressible::computeFeq	FluidModels.hh	/^computeFeq$/;"	f	class:microflow::FluidModelIncompressible
microflow::FluidModelIncompressible::getName	FluidModels.hh	/^getName()$/;"	f	class:microflow::FluidModelIncompressible
microflow::FluidModelIncompressible::isIncompressible	FluidModels.hpp	/^		static constexpr bool isIncompressible = true ;$/;"	m	class:microflow::FluidModelIncompressible
microflow::FluidModelQuasicompressible	FluidModels.hpp	/^class FluidModelQuasicompressible : public FluidModel$/;"	c	namespace:microflow
microflow::FluidModelQuasicompressible::computeFeq	FluidModels.hh	/^computeFeq$/;"	f	class:microflow::FluidModelQuasicompressible
microflow::FluidModelQuasicompressible::getName	FluidModels.hh	/^getName()$/;"	f	class:microflow::FluidModelQuasicompressible
microflow::FluidModelQuasicompressible::isCompressible	FluidModels.hpp	/^		static constexpr bool isCompressible = true ;$/;"	m	class:microflow::FluidModelQuasicompressible
microflow::Image	Image.hpp	/^class Image : public png::image<Pixel>$/;"	c	namespace:microflow
microflow::Image::Image	Image.hpp	/^		Image (char        const * filename) : png::image<Pixel>(filename     ) {}$/;"	f	class:microflow::Image
microflow::Image::Image	Image.hpp	/^		Image (size_t width, size_t height)  : png::image<Pixel>(width, height) {}$/;"	f	class:microflow::Image
microflow::Image::Image	Image.hpp	/^		Image (std::string const & filename) : png::image<Pixel>(filename     ) {}$/;"	f	class:microflow::Image
microflow::Image::fill	Image.hh	/^fill(const Pixel & p)$/;"	f	class:microflow::Image
microflow::Image::getPixel	Image.hh	/^getPixel(unsigned int x, unsigned int y) const $/;"	f	class:microflow::Image
microflow::Image::setPixel	Image.hh	/^setPixel (size_t x, size_t y, const Pixel & p)$/;"	f	class:microflow::Image
microflow::IndexCalculator	Tile.hh	/^class IndexCalculator$/;"	c	namespace:microflow
microflow::IndexCalculator::computeFInTileIndex	Tile.hh	/^computeFInTileIndex$/;"	f	class:microflow::IndexCalculator
microflow::InitializatorAtEquilibrium	LBMOperatorChooser.hpp	/^class InitializatorAtEquilibrium$/;"	c	namespace:microflow
microflow::InitializatorAtEquilibrium::apply	LBMOperatorChooser.hh	/^apply( Calculator & calculator, Element & element )$/;"	f	class:microflow::InitializatorAtEquilibrium
microflow::LATTICE_CALCULATOR_CPU::LatticeCalculator	LatticeCalculator.hh	/^LatticeCalculator (DataType rho0LB, $/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
microflow::LATTICE_CALCULATOR_CPU::collide	LatticeCalculator.hh	/^collide( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
microflow::LATTICE_CALCULATOR_CPU::computeError	LatticeCalculator.hh	/^computeError( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
microflow::LATTICE_CALCULATOR_CPU::computeRhoForBB2Nodes	LatticeCalculator.hh	/^computeRhoForBB2Nodes (TiledLatticeType & tiledLattice)$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
microflow::LATTICE_CALCULATOR_CPU::getTileCalculator	LatticeCalculator.hh	/^getTileCalculator()$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
microflow::LATTICE_CALCULATOR_CPU::initializeAtEquilibrium	LatticeCalculator.hh	/^initializeAtEquilibrium( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
microflow::LATTICE_CALCULATOR_CPU::processBoundary	LatticeCalculator.hh	/^processBoundary( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
microflow::LATTICE_CALCULATOR_CPU::processTiles	LatticeCalculator.hh	/^processTiles( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
microflow::LATTICE_CALCULATOR_CPU::propagate	LatticeCalculator.hh	/^propagate( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
microflow::LATTICE_CALCULATOR_GPU::LatticeCalculator	LatticeCalculator.tcc	/^LatticeCalculator (DataType rho0LB, $/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::callKernelTileGatherProcessBoundaryCollide	LatticeCalculator.tcc	/^callKernelTileGatherProcessBoundaryCollide$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::collide	LatticeCalculator.tcc	/^collide( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::collideOpt	LatticeCalculator.tcc	/^collideOpt (TiledLatticeType & tiledLattice)$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::gatherProcessBoundaryCollide	LatticeCalculator.tcc	/^gatherProcessBoundaryCollide $/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::initializeAtEquilibrium	LatticeCalculator.tcc	/^initializeAtEquilibrium( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::initializeAtEquilibriumForGather	LatticeCalculator.tcc	/^initializeAtEquilibriumForGather (TiledLatticeType & tiledLattice)$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::processBoundary	LatticeCalculator.tcc	/^processBoundary( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::processBoundaryOpt	LatticeCalculator.tcc	/^processBoundaryOpt (TiledLatticeType & tiledLattice)$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::processTiles	LatticeCalculator.tcc	/^processTiles( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::propagate	LatticeCalculator.tcc	/^propagate( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::propagateOpt	LatticeCalculator.tcc	/^propagateOpt( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LATTICE_CALCULATOR_GPU::swapFPostWithF	LatticeCalculator.tcc	/^swapFPostWithF (TiledLatticeType & tiledLattice)$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
microflow::LINEARIZED_MATRIX::LinearizedMatrix	LinearizedMatrix.hh	/^LinearizedMatrix()$/;"	f	class:microflow::LINEARIZED_MATRIX
microflow::LINEARIZED_MATRIX::begin	LinearizedMatrix.hh	/^begin() const$/;"	f	class:microflow::LINEARIZED_MATRIX
microflow::LINEARIZED_MATRIX::begin	LinearizedMatrix.hh	/^begin()$/;"	f	class:microflow::LINEARIZED_MATRIX
microflow::LINEARIZED_MATRIX::end	LinearizedMatrix.hh	/^end() const$/;"	f	class:microflow::LINEARIZED_MATRIX
microflow::LINEARIZED_MATRIX::end	LinearizedMatrix.hh	/^end()$/;"	f	class:microflow::LINEARIZED_MATRIX
microflow::LINEARIZED_MATRIX::operator =	LinearizedMatrix.hh	/^operator=( const LinearizedMatrix<T, StorageSource> & sourceMatrix )$/;"	f	class:microflow::LINEARIZED_MATRIX
microflow::LINEARIZED_MATRIX::operator ==	LinearizedMatrix.hh	/^operator==( const LINEARIZED_MATRIX & linearizedMatrix ) const$/;"	f	class:microflow::LINEARIZED_MATRIX
microflow::LINEARIZED_MATRIX::resize	LinearizedMatrix.hh	/^resize( const Size & size, const T & defaultValue )$/;"	f	class:microflow::LINEARIZED_MATRIX
microflow::LINEARIZED_MATRIX::resizeWithContent	LinearizedMatrix.hh	/^resizeWithContent( const Size & newSize, const T & edgeValue )$/;"	f	class:microflow::LINEARIZED_MATRIX
microflow::LINEARIZED_MATRIX_BASE::LinearizedMatrixBase	LinearizedMatrix.hh	/^LinearizedMatrixBase( LinearizedMatrixBase< T, StorageOnGPU > & linearizedMatrixGPU )$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
microflow::LINEARIZED_MATRIX_BASE::LinearizedMatrixBase	LinearizedMatrix.hh	/^LinearizedMatrixBase()$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
microflow::LINEARIZED_MATRIX_BASE::computeInternalIndex	LinearizedMatrix.hh	/^computeInternalIndex( const Coordinates & coordinates ) const$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
microflow::LINEARIZED_MATRIX_BASE::computeInternalIndex	LinearizedMatrix.hh	/^computeInternalIndex( const Coordinates & coordinates, const Size & size ) const$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
microflow::LINEARIZED_MATRIX_BASE::getSize	LinearizedMatrix.hh	/^getSize() const$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
microflow::LINEARIZED_MATRIX_BASE::getValue	LinearizedMatrix.hh	/^getValue( const Coordinates & coordinates ) const$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
microflow::LINEARIZED_MATRIX_BASE::operator []	LinearizedMatrix.hh	/^operator[] ( const Coordinates & coordinates )$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
microflow::LINEARIZED_MATRIX_BASE::setValue	LinearizedMatrix.hh	/^setValue( const Coordinates & coordinates, const T & value ) $/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
microflow::LatticeArrangement	LatticeArrangement.hpp	/^class LatticeArrangement : public LatticeArrangementBase<D,Q>$/;"	c	namespace:microflow
microflow::LatticeArrangement	LatticeArrangementD3Q19.hpp	/^class LatticeArrangement<3,19> : public LatticeArrangementBase<3,19>$/;"	c	namespace:microflow
microflow::LatticeArrangement	LatticeArrangementD3Q27.hpp	/^class LatticeArrangement<3,27> : public LatticeArrangementBase<3,27>$/;"	c	namespace:microflow
microflow::LatticeArrangement::c	LatticeArrangementD3Q19.cpp	/^constexpr Direction::D LatticeArrangement<3,19>::c[] ;$/;"	m	class:microflow::LatticeArrangement	file:
microflow::LatticeArrangement::c	LatticeArrangementD3Q19.hpp	/^		static constexpr Direction::D c[19] = { O,$/;"	m	class:microflow::LatticeArrangement
microflow::LatticeArrangement::c	LatticeArrangementD3Q27.cpp	/^constexpr Direction::D LatticeArrangement<3,27>::c[] ;$/;"	m	class:microflow::LatticeArrangement	file:
microflow::LatticeArrangement::c	LatticeArrangementD3Q27.hpp	/^		static constexpr Direction::D c[27] = { O,$/;"	m	class:microflow::LatticeArrangement
microflow::LatticeArrangement::csq	LatticeArrangementD3Q19.cpp	/^constexpr double       LatticeArrangement<3,19>::csq ;$/;"	m	class:microflow::LatticeArrangement	file:
microflow::LatticeArrangement::csq	LatticeArrangementD3Q19.hpp	/^		static constexpr double csq = 1.0 \/ 3.0 ;$/;"	m	class:microflow::LatticeArrangement
microflow::LatticeArrangement::getC	LatticeArrangementD3Q19.hh	/^getC( Direction::DirectionIndex index ) $/;"	f	class:microflow::LatticeArrangement
microflow::LatticeArrangement::getIndex	LatticeArrangementD3Q19.hh	/^getIndex( Direction::D direction )$/;"	f	class:microflow::LatticeArrangement
microflow::LatticeArrangement::getIndex	LatticeArrangementD3Q27.hpp	/^		HD static constexpr Direction::DirectionIndex getIndex( Direction::D direction )$/;"	f	class:microflow::LatticeArrangement
microflow::LatticeArrangement::getW	LatticeArrangementD3Q19.hh	/^getW( Direction::DirectionIndex index ) $/;"	f	class:microflow::LatticeArrangement
microflow::LatticeArrangement::indexFromDirection_	LatticeArrangementD3Q19.cpp	/^constexpr Direction::DirectionIndex LatticeArrangement<3,19>::indexFromDirection_[] ;$/;"	m	class:microflow::LatticeArrangement	file:
microflow::LatticeArrangement::indexFromDirection_	LatticeArrangementD3Q19.hpp	/^		static constexpr Direction::DirectionIndex indexFromDirection_[ 0b00111111 + 1 ] =$/;"	m	class:microflow::LatticeArrangement
microflow::LatticeArrangement::indexFromDirection_	LatticeArrangementD3Q27.cpp	/^constexpr Direction::DirectionIndex LatticeArrangement<3,27>::indexFromDirection_[] ;$/;"	m	class:microflow::LatticeArrangement	file:
microflow::LatticeArrangement::indexFromDirection_	LatticeArrangementD3Q27.hpp	/^		static constexpr Direction::DirectionIndex indexFromDirection_[ 0b00111111 + 1 ] =$/;"	m	class:microflow::LatticeArrangement
microflow::LatticeArrangement::w	LatticeArrangementD3Q19.cpp	/^constexpr double       LatticeArrangement<3,19>::w[] ;$/;"	m	class:microflow::LatticeArrangement	file:
microflow::LatticeArrangement::w	LatticeArrangementD3Q19.hpp	/^		static constexpr double w[19] = { 1.0\/3.0,$/;"	m	class:microflow::LatticeArrangement
microflow::LatticeArrangementBase	LatticeArrangement.hpp	/^class LatticeArrangementBase$/;"	c	namespace:microflow
microflow::LatticeArrangementBase::NO_INDEX	LatticeArrangement.hpp	/^							NO_INDEX = std::numeric_limits<Direction::DirectionIndex>::max() ;$/;"	m	class:microflow::LatticeArrangementBase
microflow::LatticeArrangementBase::getD	LatticeArrangement.hh	/^getD()$/;"	f	class:microflow::LatticeArrangementBase
microflow::LatticeArrangementBase::getIndex	LatticeArrangement.hh	/^getIndex( Direction::D direction )$/;"	f	class:microflow::LatticeArrangementBase
microflow::LatticeArrangementBase::getName	LatticeArrangement.hh	/^getName()$/;"	f	class:microflow::LatticeArrangementBase
microflow::LatticeArrangementBase::getQ	LatticeArrangement.hh	/^getQ()$/;"	f	class:microflow::LatticeArrangementBase
microflow::LatticeArrangementBase::indexFromDirection_	LatticeArrangement.hpp	/^		static constexpr Direction::DirectionIndex indexFromDirection_[ 0b00111111 + 1 ] =$/;"	m	class:microflow::LatticeArrangementBase
microflow::LatticeCalculator	LatticeCalculator.hpp	/^class LatticeCalculator< FluidModel, CollisionModel, LatticeArrangement, DataType, StorageOnCPU,$/;"	c	namespace:microflow
microflow::LatticeCalculator	LatticeCalculator.hpp	/^class LatticeCalculator< FluidModel, CollisionModel, LatticeArrangement, DataType, StorageOnGPU,$/;"	c	namespace:microflow
microflow::LatticeCalculator::CalculatorType	LatticeCalculator.hpp	/^		typedef Calculator< FluidModel, LatticeArrangement, DataType, StorageOnCPU > CalculatorType ;$/;"	t	class:microflow::LatticeCalculator
microflow::LatticeCalculator::CalculatorType	LatticeCalculator.hpp	/^		typedef Calculator< FluidModel, LatticeArrangement, DataType, StorageOnGPU > CalculatorType ;$/;"	t	class:microflow::LatticeCalculator
microflow::LatticeCalculator::TileCalculatorType	LatticeCalculator.hpp	/^							TileCalculatorType ;$/;"	t	class:microflow::LatticeCalculator
microflow::LatticeCalculator::TiledLatticeType	LatticeCalculator.hpp	/^						TiledLatticeType ;$/;"	t	class:microflow::LatticeCalculator
microflow::LatticeCalculator::defaultExternalCornerPressureNode_	LatticeCalculator.hpp	/^		const NodeType defaultExternalCornerPressureNode_ ; $/;"	m	class:microflow::LatticeCalculator
microflow::LatticeCalculator::defaultExternalEdgePressureNode_	LatticeCalculator.hpp	/^		const NodeType defaultExternalEdgePressureNode_ ;$/;"	m	class:microflow::LatticeCalculator
microflow::LinearizedMatrix	LinearizedMatrix.hpp	/^class LinearizedMatrix$/;"	c	namespace:microflow
microflow::LinearizedMatrix	LinearizedMatrix.hpp	/^class LinearizedMatrix< T, StorageInKernel >$/;"	c	namespace:microflow
microflow::LinearizedMatrix::BaseType	LinearizedMatrix.hpp	/^	private: typedef LinearizedMatrixBase< T, Storage >  BaseType ;$/;"	t	class:microflow::LinearizedMatrix
microflow::LinearizedMatrix::BaseType	LinearizedMatrix.hpp	/^	private: typedef LinearizedMatrixBase< T, StorageInKernel >  BaseType ;$/;"	t	class:microflow::LinearizedMatrix
microflow::LinearizedMatrix::ConstIterator	LinearizedMatrix.hpp	/^    typedef typename Storage<T>::const_iterator ConstIterator;$/;"	t	class:microflow::LinearizedMatrix
microflow::LinearizedMatrix::Iterator	LinearizedMatrix.hpp	/^		typedef typename Storage<T>::iterator Iterator;$/;"	t	class:microflow::LinearizedMatrix
microflow::LinearizedMatrix::LinearizedMatrix	LinearizedMatrix.hh	/^LinearizedMatrix( LinearizedMatrix< T, StorageOnGPU > & linearizedMatrixGPU )$/;"	f	class:microflow::LinearizedMatrix
microflow::LinearizedMatrixBase	LinearizedMatrix.hpp	/^class LinearizedMatrixBase$/;"	c	namespace:microflow
microflow::LinearizedMatrixBase::data_	LinearizedMatrix.hpp	/^		Storage<T> data_ ;$/;"	m	class:microflow::LinearizedMatrixBase
microflow::LinearizedMatrixBase::getDataPointer	LinearizedMatrix.hpp	/^		T * getDataPointer() { return data_.getPointer() ; }$/;"	f	class:microflow::LinearizedMatrixBase
microflow::LinearizedMatrixBase::size_	LinearizedMatrix.hpp	/^		Size       size_ ;$/;"	m	class:microflow::LinearizedMatrixBase
microflow::MRubyInterpreter	MRubyInterpreter.hpp	/^    class MRubyInterpreter$/;"	c	namespace:microflow
microflow::MRubyInterpreter::MRI_instance_	MRubyInterpreter.cpp	/^    MRubyInterpreter* MRubyInterpreter::MRI_instance_ = nullptr ;$/;"	m	class:microflow::MRubyInterpreter	file:
microflow::MRubyInterpreter::MRI_instance_	MRubyInterpreter.hpp	/^        static MRubyInterpreter* MRI_instance_ ; $/;"	m	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::MRubyInterpreter	MRubyInterpreter.cpp	/^    MRubyInterpreter ()$/;"	f	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::closeMRubyInterpreter	MRubyInterpreter.cpp	/^    closeMRubyInterpreter()$/;"	f	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::context_	MRubyInterpreter.hpp	/^        mrbc_context * context_ ;$/;"	m	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::getMRubyInterpreter	MRubyInterpreter.cpp	/^    getMRubyInterpreter ()$/;"	f	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::getMRubyVariable	MRubyInterpreter.cpp	/^    getMRubyVariable( const std::string & variableName )$/;"	f	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::getState	MRubyInterpreter.cpp	/^    getState ()$/;"	f	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::getValue	MRubyInterpreter.cpp	/^    getValue () const$/;"	f	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::initializeMRubyInterpreter	MRubyInterpreter.cpp	/^    initializeMRubyInterpreter()$/;"	f	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::modifyNodeLayout	MRubyInterpreter.cpp	/^    modifyNodeLayout (NodeLayout & nodeLayout, const std::string & rubyCode)$/;"	f	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::parser_	MRubyInterpreter.hpp	/^        struct mrb_parser_state * parser_ ;$/;"	m	class:microflow::MRubyInterpreter	typeref:struct:microflow::MRubyInterpreter::mrb_parser_state
microflow::MRubyInterpreter::proc_	MRubyInterpreter.hpp	/^        struct RProc * proc_ ;$/;"	m	class:microflow::MRubyInterpreter	typeref:struct:microflow::MRubyInterpreter::RProc
microflow::MRubyInterpreter::runScript	MRubyInterpreter.cpp	/^    runScript (const string& code)$/;"	f	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::state_	MRubyInterpreter.hpp	/^        mrb_state* state_ = nullptr ;$/;"	m	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::value_	MRubyInterpreter.hpp	/^        mrb_value value_ ;$/;"	m	class:microflow::MRubyInterpreter
microflow::MRubyInterpreter::~MRubyInterpreter	MRubyInterpreter.cpp	/^    ~MRubyInterpreter ()$/;"	f	class:microflow::MRubyInterpreter
microflow::ModificationRhoU	ModificationRhoU.hpp	/^class ModificationRhoU$/;"	c	namespace:microflow
microflow::ModificationRhoU::Modification	ModificationRhoU.hpp	/^			class Modification$/;"	c	class:microflow::ModificationRhoU
microflow::ModificationRhoU::Modification::Modification	ModificationRhoU.hh	/^Modification (Coordinates c, const DataType & v)$/;"	f	class:microflow::ModificationRhoU::Modification
microflow::ModificationRhoU::Modification::coordinates	ModificationRhoU.hpp	/^					Coordinates coordinates ;$/;"	m	class:microflow::ModificationRhoU::Modification
microflow::ModificationRhoU::Modification::value	ModificationRhoU.hpp	/^					DataType   value ;$/;"	m	class:microflow::ModificationRhoU::Modification
microflow::ModificationRhoU::ModificationRho	ModificationRhoU.hpp	/^		typedef Modification <double> ModificationRho ;$/;"	t	class:microflow::ModificationRhoU
microflow::ModificationRhoU::ModificationU	ModificationRhoU.hpp	/^		typedef Modification <std::array<double,3> > ModificationU ;$/;"	t	class:microflow::ModificationRhoU
microflow::ModificationRhoU::addRhoBoundaryPhysical	ModificationRhoU.hh	/^addRhoBoundaryPhysical (Coordinates coordinates, double rho)$/;"	f	class:microflow::ModificationRhoU
microflow::ModificationRhoU::addRhoPhysical	ModificationRhoU.hh	/^addRhoPhysical (Coordinates coordinates, double rho)$/;"	f	class:microflow::ModificationRhoU
microflow::ModificationRhoU::addUBoundaryPhysical	ModificationRhoU.hh	/^addUBoundaryPhysical (Coordinates coordinates, double ux, double uy, double uz)$/;"	f	class:microflow::ModificationRhoU
microflow::ModificationRhoU::addUPhysical	ModificationRhoU.hh	/^addUPhysical (Coordinates coordinates, double ux, double uy, double uz)$/;"	f	class:microflow::ModificationRhoU
microflow::ModificationRhoU::operator +=	ModificationRhoU.hh	/^ModificationRhoU::operator += (const ModificationRhoU & right)$/;"	f	class:microflow::ModificationRhoU
microflow::ModificationRhoU::rhoBoundaryPhysical	ModificationRhoU.hpp	/^		std::vector <ModificationRho> rhoBoundaryPhysical ;$/;"	m	class:microflow::ModificationRhoU
microflow::ModificationRhoU::rhoPhysical	ModificationRhoU.hpp	/^		std::vector <ModificationRho> rhoPhysical ;$/;"	m	class:microflow::ModificationRhoU
microflow::ModificationRhoU::uBoundaryPhysical	ModificationRhoU.hpp	/^		std::vector <ModificationU  > uBoundaryPhysical ;$/;"	m	class:microflow::ModificationRhoU
microflow::ModificationRhoU::uPhysical	ModificationRhoU.hpp	/^		std::vector <ModificationU  > uPhysical ;$/;"	m	class:microflow::ModificationRhoU
microflow::N	Direction.hpp	/^constexpr Direction::D   N   = Direction::NORTH ;$/;"	m	namespace:microflow
microflow::NB	Direction.hpp	/^constexpr Direction::D   NB  = Direction::NORTH + Direction::BOTTOM ;$/;"	m	namespace:microflow
microflow::NE	Direction.hpp	/^constexpr Direction::D   NE  = Direction::NORTH + Direction::EAST ;$/;"	m	namespace:microflow
microflow::NEB	Direction.hpp	/^constexpr Direction::D   NEB = Direction::NORTH + Direction::EAST + Direction::BOTTOM ;$/;"	m	namespace:microflow
microflow::NET	Direction.hpp	/^constexpr Direction::D   NET = Direction::NORTH + Direction::EAST + Direction::TOP ;$/;"	m	namespace:microflow
microflow::NODE_CALCULATOR_BASE::NodeCalculatorBase	NodeCalculator.hh	/^NodeCalculatorBase( DataType rho0LB, $/;"	f	class:microflow::NODE_CALCULATOR_BASE
microflow::NODE_CALCULATOR_BASE::collideBGK	NodeCalculator.hh	/^collideBGK( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_BASE
microflow::NODE_CALCULATOR_BASE::collideBounceBack2	NodeCalculator.hh	/^collideBounceBack2 (Node & node)$/;"	f	class:microflow::NODE_CALCULATOR_BASE
microflow::NODE_CALCULATOR_BASE::initializeAtEquilibrium	NodeCalculator.hh	/^initializeAtEquilibrium( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_BASE
microflow::NODE_CALCULATOR_BASE::processBoundaryBounceBack2	NodeCalculator.hh	/^processBoundaryBounceBack2( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_BASE
microflow::NODE_CALCULATOR_BASE::processBoundaryFluid	NodeCalculator.hh	/^processBoundaryFluid (Node & node)$/;"	f	class:microflow::NODE_CALCULATOR_BASE
microflow::NODE_CALCULATOR_BASE::processBoundaryFluid_NoOptimizations	NodeCalculator.hh	/^processBoundaryFluid_NoOptimizations (Node & node)$/;"	f	class:microflow::NODE_CALCULATOR_BASE
microflow::NODE_CALCULATOR_BASE::processBoundaryFluid_UnsafeOptimizations	NodeCalculator.hh	/^processBoundaryFluid_UnsafeOptimizations (Node & node)$/;"	f	class:microflow::NODE_CALCULATOR_BASE
microflow::NODE_CALCULATOR_D3Q19::MEQCalculator::computeMEQ	NodeCalculator.hh	/^computeMEQ$/;"	f	class:microflow::NODE_CALCULATOR_D3Q19::MEQCalculator
microflow::NODE_CALCULATOR_D3Q19::NodeCalculator	NodeCalculator.hh	/^NodeCalculator (DataType rho0LB, $/;"	f	class:microflow::NODE_CALCULATOR_D3Q19
microflow::NODE_CALCULATOR_D3Q19::collide	NodeCalculator.hh	/^collide( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_D3Q19
microflow::NODE_CALCULATOR_D3Q19::collideMRT	NodeCalculator.hh	/^collideMRT( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_D3Q19
microflow::NODE_CALCULATOR_D3Q19::processBoundary	NodeCalculator.hh	/^processBoundary( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_D3Q19
microflow::NODE_FROM_TILE_COPY::NodeFromTile	NodeFromTile.hh	/^NodeFromTile$/;"	f	class:microflow::NODE_FROM_TILE_COPY
microflow::NODE_FROM_TILE_COPY::f	NodeFromTile.hh	/^f (Direction direction)$/;"	f	class:microflow::NODE_FROM_TILE_COPY
microflow::NODE_FROM_TILE_COPY::f	NodeFromTile.hh	/^f (Direction::D direction)$/;"	f	class:microflow::NODE_FROM_TILE_COPY
microflow::NODE_FROM_TILE_COPY::f	NodeFromTile.hh	/^f (Direction::DirectionIndex index)$/;"	f	class:microflow::NODE_FROM_TILE_COPY
microflow::NODE_FROM_TILE_COPY::nodeType	NodeFromTile.hh	/^nodeType()$/;"	f	class:microflow::NODE_FROM_TILE_COPY
microflow::NODE_FROM_TILE_COPY::registerSharedU	NodeFromTile.hh	/^registerSharedU $/;"	f	class:microflow::NODE_FROM_TILE_COPY
microflow::NODE_FROM_TILE_COPY::rho	NodeFromTile.hh	/^rho()$/;"	f	class:microflow::NODE_FROM_TILE_COPY
microflow::NODE_FROM_TILE_COPY::u	NodeFromTile.hh	/^u (Axis axis)$/;"	f	class:microflow::NODE_FROM_TILE_COPY
microflow::NODE_FROM_TILE_COPY::u	NodeFromTile.hh	/^u (unsigned axis)$/;"	f	class:microflow::NODE_FROM_TILE_COPY
microflow::NODE_FROM_TILE_POINTERS::NodeFromTile	NodeFromTile.hh	/^NodeFromTile$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::computeNodeDataIndex	NodeFromTile.hh	/^computeNodeDataIndex (typename Tile::Data data, Axis axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::computeNodeDataIndex	NodeFromTile.hh	/^computeNodeDataIndex (typename Tile::Data data, Direction::DirectionIndex fIndex)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::computeNodeIndex	NodeFromTile.hh	/^computeNodeIndex() const$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::f	NodeFromTile.hh	/^f (Direction direction)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::f	NodeFromTile.hh	/^f (Direction::D direction)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::f	NodeFromTile.hh	/^f (Direction::DirectionIndex index)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::fPost	NodeFromTile.hh	/^fPost (Direction direction)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::fPost	NodeFromTile.hh	/^fPost (Direction::D direction)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::fPost	NodeFromTile.hh	/^fPost (Direction::DirectionIndex index)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::getTileIndex	NodeFromTile.hh	/^getTileIndex() const$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::nodeNormals	NodeFromTile.hh	/^nodeNormals()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::nodeType	NodeFromTile.hh	/^nodeType()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::rho	NodeFromTile.hh	/^rho()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::rho0	NodeFromTile.hh	/^rho0()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::rhoBoundary	NodeFromTile.hh	/^rhoBoundary()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::solidNeighborMask	NodeFromTile.hh	/^solidNeighborMask()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::u	NodeFromTile.hh	/^u (Axis axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::u	NodeFromTile.hh	/^u (unsigned axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::uBoundary	NodeFromTile.hh	/^uBoundary (Axis axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::uBoundary	NodeFromTile.hh	/^uBoundary (unsigned axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::uT0	NodeFromTile.hh	/^uT0 (Axis axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_POINTERS::uT0	NodeFromTile.hh	/^uT0 (unsigned axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
microflow::NODE_FROM_TILE_REFERENCE::NodeFromTile	NodeFromTile.hh	/^NodeFromTile (Tile & tile, unsigned x, unsigned y, unsigned z)$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::f	NodeFromTile.hh	/^f( Direction direction )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::f	NodeFromTile.hh	/^f( Direction::D direction )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::f	NodeFromTile.hh	/^f( Direction::DirectionIndex index )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::fPost	NodeFromTile.hh	/^fPost( Direction direction )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::fPost	NodeFromTile.hh	/^fPost( Direction::D direction )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::fPost	NodeFromTile.hh	/^fPost( Direction::DirectionIndex index )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::nodeNormals	NodeFromTile.hh	/^nodeNormals()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::nodeType	NodeFromTile.hh	/^nodeType()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::rho	NodeFromTile.hh	/^rho()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::rho0	NodeFromTile.hh	/^rho0()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::rhoBoundary	NodeFromTile.hh	/^rhoBoundary()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::solidNeighborMask	NodeFromTile.hh	/^solidNeighborMask()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::u	NodeFromTile.hh	/^u( Axis axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::u	NodeFromTile.hh	/^u( unsigned axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::uBoundary	NodeFromTile.hh	/^uBoundary( Axis axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::uBoundary	NodeFromTile.hh	/^uBoundary( unsigned axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::uT0	NodeFromTile.hh	/^uT0( Axis axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NODE_FROM_TILE_REFERENCE::uT0	NodeFromTile.hh	/^uT0( unsigned axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
microflow::NT	Direction.hpp	/^constexpr Direction::D   NT  = Direction::NORTH + Direction::TOP ;$/;"	m	namespace:microflow
microflow::NW	Direction.hpp	/^constexpr Direction::D   NW  = Direction::NORTH + Direction::WEST ;$/;"	m	namespace:microflow
microflow::NWB	Direction.hpp	/^constexpr Direction::D   NWB = Direction::NORTH + Direction::WEST + Direction::BOTTOM ;$/;"	m	namespace:microflow
microflow::NWT	Direction.hpp	/^constexpr Direction::D   NWT = Direction::NORTH + Direction::WEST + Direction::TOP ;$/;"	m	namespace:microflow
microflow::NoOptimizations	Optimization.hpp	/^class NoOptimizations$/;"	c	namespace:microflow
microflow::NoOptimizations::shouldEnableUnsafeOptimizations	Optimization.hpp	/^		HD static constexpr bool shouldEnableUnsafeOptimizations() { return false ; }$/;"	f	class:microflow::NoOptimizations
microflow::NodeBaseType	NodeBaseType.hpp	/^enum class NodeBaseType $/;"	c	namespace:microflow
microflow::NodeBaseType::BOUNCE_BACK_2	NodeBaseType.hpp	/^	BOUNCE_BACK_2 = 2,$/;"	m	class:microflow::NodeBaseType
microflow::NodeBaseType::FLUID	NodeBaseType.hpp	/^	FLUID         = 1, $/;"	m	class:microflow::NodeBaseType
microflow::NodeBaseType::MARKER	NodeBaseType.hpp	/^	MARKER           ,$/;"	m	class:microflow::NodeBaseType
microflow::NodeBaseType::PRESSURE	NodeBaseType.hpp	/^	PRESSURE      = 5,$/;"	m	class:microflow::NodeBaseType
microflow::NodeBaseType::SOLID	NodeBaseType.hpp	/^	SOLID         = 0, $/;"	m	class:microflow::NodeBaseType
microflow::NodeBaseType::VELOCITY	NodeBaseType.hpp	/^	VELOCITY      = 3,$/;"	m	class:microflow::NodeBaseType
microflow::NodeBaseType::VELOCITY_0	NodeBaseType.hpp	/^	VELOCITY_0    = 4,$/;"	m	class:microflow::NodeBaseType
microflow::NodeCalculator	NodeCalculator.hpp	/^class NodeCalculator< FluidModel, CollisionModel, D3Q19, DataType, Storage > :$/;"	c	namespace:microflow
microflow::NodeCalculator::BaseCalculator	NodeCalculator.hpp	/^							BaseCalculator ;$/;"	t	class:microflow::NodeCalculator
microflow::NodeCalculator::MEQCalculator	NodeCalculator.hpp	/^		class MEQCalculator< FluidModelIncompressible, Dummy>$/;"	c	class:microflow::NodeCalculator
microflow::NodeCalculator::MEQCalculator	NodeCalculator.hpp	/^		class MEQCalculator< FluidModelQuasicompressible, Dummy>$/;"	c	class:microflow::NodeCalculator
microflow::NodeCalculator::defaultExternalCornerPressureNode_	NodeCalculator.hpp	/^		const NodeType defaultExternalCornerPressureNode_ ;$/;"	m	class:microflow::NodeCalculator
microflow::NodeCalculator::defaultExternalEdgePressureNode_	NodeCalculator.hpp	/^		const NodeType defaultExternalEdgePressureNode_ ;$/;"	m	class:microflow::NodeCalculator
microflow::NodeCalculatorBase	NodeCalculator.hpp	/^class NodeCalculatorBase :$/;"	c	namespace:microflow
microflow::NodeCalculatorBase::CalculatorType	NodeCalculator.hpp	/^		typedef Calculator< FluidModel, LatticeArrangement, DataType, Storage > CalculatorType ;$/;"	t	class:microflow::NodeCalculatorBase
microflow::NodeClass	NodeType.hpp	/^enum class NodeClass $/;"	c	namespace:microflow
microflow::NodeClass::BOUNDARY	NodeType.hpp	/^	BOUNDARY = 2, $/;"	m	class:microflow::NodeClass
microflow::NodeClass::FLUID	NodeType.hpp	/^	FLUID    = 1, $/;"	m	class:microflow::NodeClass
microflow::NodeClass::NodeType	NodeType.hpp	/^class NodeType$/;"	c	class:microflow::NodeClass
microflow::NodeClass::NodeType::BITS_PER_BASE_TYPE	NodeType.hpp	/^		static constexpr unsigned BITS_PER_BASE_TYPE = $/;"	m	class:microflow::NodeClass::NodeType
microflow::NodeClass::NodeType::BITS_PER_BOUNDARY_DEFINITION_INDEX	NodeType.hpp	/^		static constexpr unsigned BITS_PER_BOUNDARY_DEFINITION_INDEX = 6 ;$/;"	m	class:microflow::NodeClass::NodeType
microflow::NodeClass::NodeType::BITS_PER_NODE_TYPE	NodeType.hpp	/^		static constexpr unsigned BITS_PER_NODE_TYPE = BITS_PER_BASE_TYPE + $/;"	m	class:microflow::NodeClass::NodeType
microflow::NodeClass::NodeType::BITS_PER_PLACEMENT_MODIFIER	NodeType.hpp	/^		static constexpr unsigned BITS_PER_PLACEMENT_MODIFIER = $/;"	m	class:microflow::NodeClass::NodeType
microflow::NodeClass::NodeType::PackedDataType	NodeType.hpp	/^		typedef unsigned short PackedDataType ;$/;"	t	class:microflow::NodeClass::NodeType
microflow::NodeClass::NodeType::__anon3::__anon4::baseType_	NodeType.hpp	/^				PackedDataType baseType_                : BITS_PER_BASE_TYPE                 ; $/;"	m	struct:microflow::NodeClass::NodeType::__anon3::__anon4
microflow::NodeClass::NodeType::__anon3::__anon4::boundaryDefinitionIndex_	NodeType.hpp	/^				PackedDataType boundaryDefinitionIndex_ : BITS_PER_BOUNDARY_DEFINITION_INDEX ;$/;"	m	struct:microflow::NodeClass::NodeType::__anon3::__anon4
microflow::NodeClass::NodeType::__anon3::__anon4::placementModifier_	NodeType.hpp	/^				PackedDataType placementModifier_       : BITS_PER_PLACEMENT_MODIFIER        ;$/;"	m	struct:microflow::NodeClass::NodeType::__anon3::__anon4
microflow::NodeClass::NodeType::__anon3::packedData_	NodeType.hpp	/^			PackedDataType packedData_ ;$/;"	m	union:microflow::NodeClass::NodeType::__anon3
microflow::NodeClass::NodeType::packedData	NodeType.hpp	/^		HD PackedDataType & packedData() { return packedData_ ; }$/;"	f	class:microflow::NodeClass::NodeType
microflow::NodeClass::PlacementModifier	NodeType.hpp	/^enum class PlacementModifier$/;"	c	class:microflow::NodeClass
microflow::NodeClass::PlacementModifier::BOTTOM	NodeType.hpp	/^	BOTTOM = 5,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::CORNER_ON_EDGE_AND_PERPENDICULAR_PLANE	NodeType.hpp	/^	CORNER_ON_EDGE_AND_PERPENDICULAR_PLANE     = 12,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::EAST	NodeType.hpp	/^	EAST   = 3,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::EXTERNAL_CORNER	NodeType.hpp	/^	EXTERNAL_CORNER                            = 10,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::EXTERNAL_CORNER_PRESSURE_TANGENTIAL	NodeType.hpp	/^	EXTERNAL_CORNER_PRESSURE_TANGENTIAL        = 11,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::EXTERNAL_EDGE	NodeType.hpp	/^	EXTERNAL_EDGE                              = 7,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::EXTERNAL_EDGE_PRESSURE_TANGENTIAL	NodeType.hpp	/^	EXTERNAL_EDGE_PRESSURE_TANGENTIAL          = 8,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::INTERNAL_EDGE	NodeType.hpp	/^	INTERNAL_EDGE                              = 9,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::NONE	NodeType.hpp	/^	NONE   = 0,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::NORTH	NodeType.hpp	/^	NORTH  = 1,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::SOUTH	NodeType.hpp	/^	SOUTH  = 2,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::TOP	NodeType.hpp	/^	TOP    = 6,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::PlacementModifier::WEST	NodeType.hpp	/^	WEST   = 4,$/;"	m	class:microflow::NodeClass::PlacementModifier
microflow::NodeClass::SOLID	NodeType.hpp	/^	SOLID    = 0, $/;"	m	class:microflow::NodeClass
microflow::NodeClass::UNKNOWN	NodeType.hpp	/^	UNKNOWN  = 3 $/;"	m	class:microflow::NodeClass
microflow::NodeFromTile	NodeFromTile.hpp	/^class NodeFromTile <Tile, DataStorageMethod::COPY>$/;"	c	namespace:microflow
microflow::NodeFromTile	NodeFromTile.hpp	/^class NodeFromTile <Tile, DataStorageMethod::POINTERS>$/;"	c	namespace:microflow
microflow::NodeFromTile	NodeFromTile.hpp	/^class NodeFromTile <Tile, DataStorageMethod::REFERENCE>$/;"	c	namespace:microflow
microflow::NodeFromTile::Tile::uGPU_	NodeFromTile.hpp	/^		typename Tile::DataTypeType (* uGPU_) $/;"	m	class:microflow::NodeFromTile::Tile
microflow::NodeFromTile::f_	NodeFromTile.hpp	/^		typename Tile::DataTypeType f_ [Tile::LatticeArrangementType::getQ()] ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::nodeType_	NodeFromTile.hpp	/^		NodeType nodeType_ ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::rho_	NodeFromTile.hpp	/^		typename Tile::DataTypeType rho_ ;     $/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::tileIndex_	NodeFromTile.hpp	/^		unsigned tileIndex_ ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::tile_	NodeFromTile.hpp	/^		Tile & tile_ ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::tiledAllValues_	NodeFromTile.hpp	/^		DataTypeType        * tiledAllValues_ ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::tiledNodeNormals_	NodeFromTile.hpp	/^		PackedNodeNormalSet * tiledNodeNormals_ ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::tiledNodeTypes_	NodeFromTile.hpp	/^		NodeType            * tiledNodeTypes_ ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::tiledSolidNeighborMasks_	NodeFromTile.hpp	/^		SolidNeighborMask   * tiledSolidNeighborMasks_ ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::u_	NodeFromTile.hpp	/^		typename Tile::DataTypeType u_ [Tile::LatticeArrangementType::getD()] ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::x_	NodeFromTile.hpp	/^		unsigned x_ ; $/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::x_	NodeFromTile.hpp	/^		unsigned x_ ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::y_	NodeFromTile.hpp	/^		unsigned y_ ; $/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::y_	NodeFromTile.hpp	/^		unsigned y_ ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeFromTile::z_	NodeFromTile.hpp	/^		unsigned z_ ;$/;"	m	class:microflow::NodeFromTile
microflow::NodeLayout	NodeLayout.hpp	/^class NodeLayout$/;"	c	namespace:microflow
microflow::NodeLayout::BOUNDARY_MARKER	NodeLayout.cpp	/^constexpr const enum NodeBaseType NodeLayout::BOUNDARY_MARKER ;$/;"	m	class:microflow::NodeLayout	typeref:enum:microflow::NodeLayout::	file:
microflow::NodeLayout::BOUNDARY_MARKER	NodeLayout.hpp	/^		static constexpr const enum NodeBaseType BOUNDARY_MARKER = NodeBaseType::SIZE ;$/;"	m	class:microflow::NodeLayout	typeref:enum:microflow::NodeLayout::NodeBaseType
microflow::NodeLayout::ConstIterator	NodeLayout.hpp	/^		typedef LinearizedMatrix< NodeType >::ConstIterator ConstIterator ;$/;"	t	class:microflow::NodeLayout
microflow::NodeLayout::Iterator	NodeLayout.hpp	/^		typedef LinearizedMatrix< NodeType >::Iterator Iterator ;$/;"	t	class:microflow::NodeLayout
microflow::NodeLayout::NodeLayout	NodeLayout.cpp	/^NodeLayout( const ColoredPixelClassificator & coloredPixelClassificator,$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::NodeLayout	NodeLayout.cpp	/^NodeLayout( const Size & size )$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::begin	NodeLayout.hh	/^begin() $/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::begin	NodeLayout.hh	/^begin() const $/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::boundaryDefinitions_	NodeLayout.hpp	/^		BoundaryDefinitions boundaryDefinitions_ ;$/;"	m	class:microflow::NodeLayout
microflow::NodeLayout::end	NodeLayout.hh	/^end() $/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::end	NodeLayout.hh	/^end() const $/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::getBoundaryDefinitions	NodeLayout.hh	/^getBoundaryDefinitions() const$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::getNodeType	NodeLayout.hh	/^getNodeType( Coordinates coordinates ) const$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::getNodeType	NodeLayout.hh	/^getNodeType( size_t x, size_t y, size_t z) const $/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::getSize	NodeLayout.hh	/^getSize() const$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::hasNodeSolidNeighbors	NodeLayout.hh	/^hasNodeSolidNeighbors( const Coordinates & coordinates ) const $/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::isNodePlacedOnBoundary	NodeLayout.hh	/^isNodePlacedOnBoundary(size_t x, size_t y, size_t z) const$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::nodeTypes_	NodeLayout.hpp	/^		LinearizedMatrix< NodeType > nodeTypes_ ;$/;"	m	class:microflow::NodeLayout
microflow::NodeLayout::resizeWithContent	NodeLayout.cpp	/^resizeWithContent( const Size & newSize )$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::restoreBoundaryNodes	NodeLayout.cpp	/^restoreBoundaryNodes(const ColoredPixelClassificator & coloredPixelClassificator,$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::safeGetNodeType	NodeLayout.hh	/^safeGetNodeType( Coordinates coordinates ) const$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::setBoundaryDefinitions	NodeLayout.hh	/^setBoundaryDefinitions (BoundaryDefinitions boundaryDefinitions)$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::setNodeType	NodeLayout.hh	/^setNodeType( Coordinates coordinates, NodeType nodeType)$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::setNodeType	NodeLayout.hh	/^setNodeType( size_t x, size_t y, size_t z, NodeType nodeType)$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::temporaryMarkBoundaryNodes	NodeLayout.hh	/^temporaryMarkBoundaryNodes()$/;"	f	class:microflow::NodeLayout
microflow::NodeLayout::temporaryMarkUndefinedBoundaryNodesAndCovers	NodeLayout.hh	/^temporaryMarkUndefinedBoundaryNodesAndCovers()$/;"	f	class:microflow::NodeLayout
microflow::NodeLayoutWriter	NodeLayoutWriter.hpp	/^class NodeLayoutWriter$/;"	c	namespace:microflow
microflow::NodeLayoutWriter::saveToPngFile	NodeLayoutWriter.cpp	/^saveToPngFile( const NodeLayout & nodeLayout, std::string fileName )$/;"	f	class:microflow::NodeLayoutWriter
microflow::NodeLayoutWriter::saveToVolFile	NodeLayoutWriter.cpp	/^saveToVolFile( const NodeLayout & nodeLayout, std::string fileName )$/;"	f	class:microflow::NodeLayoutWriter
microflow::NodeLayoutWriter::saveToVolStream	NodeLayoutWriter.cpp	/^saveToVolStream( const NodeLayout & nodeLayout, std::ostream & stream )$/;"	f	class:microflow::NodeLayoutWriter
microflow::NodeType::NodeType	NodeType.hh	/^NodeType( NodeBaseType nodeBaseType, PlacementModifier placementModifier )$/;"	f	class:microflow::NodeType
microflow::NodeType::NodeType	NodeType.hh	/^NodeType()$/;"	f	class:microflow::NodeType
microflow::NodeType::getBaseType	NodeType.hh	/^getBaseType() const$/;"	f	class:microflow::NodeType
microflow::NodeType::getBoundaryDefinitionIndex	NodeType.hh	/^getBoundaryDefinitionIndex() const$/;"	f	class:microflow::NodeType
microflow::NodeType::getClass	NodeType.hh	/^getClass() const$/;"	f	class:microflow::NodeType
microflow::NodeType::getPlacementModifier	NodeType.hh	/^getPlacementModifier() const$/;"	f	class:microflow::NodeType
microflow::NodeType::isBoundary	NodeType.hh	/^isBoundary() const$/;"	f	class:microflow::NodeType
microflow::NodeType::isFluid	NodeType.hh	/^isFluid() const$/;"	f	class:microflow::NodeType
microflow::NodeType::isSolid	NodeType.hh	/^isSolid() const$/;"	f	class:microflow::NodeType
microflow::NodeType::operator !=	NodeType.hh	/^operator != (const NodeBaseType & nodeBaseType) const$/;"	f	class:microflow::NodeType
microflow::NodeType::operator !=	NodeType.hh	/^operator != (const NodeType & nodeType) const$/;"	f	class:microflow::NodeType
microflow::NodeType::operator ==	NodeType.hh	/^operator == (const NodeBaseType & nodeBaseType) const$/;"	f	class:microflow::NodeType
microflow::NodeType::operator ==	NodeType.hh	/^operator == (const NodeType & nodeType) const$/;"	f	class:microflow::NodeType
microflow::NodeType::setBaseType	NodeType.hh	/^setBaseType( NodeBaseType nodeBaseType )$/;"	f	class:microflow::NodeType
microflow::NodeType::setBoundaryDefinitionIndex	NodeType.hh	/^setBoundaryDefinitionIndex( unsigned char boundaryDefinitionIndex )$/;"	f	class:microflow::NodeType
microflow::NodeType::setPlacementModifier	NodeType.hh	/^setPlacementModifier( PlacementModifier placementModifier )$/;"	f	class:microflow::NodeType
microflow::O	Direction.hpp	/^constexpr Direction::D   O    = Direction::SELF ;$/;"	m	namespace:microflow
microflow::POINTERS	NodeFromTile.hpp	/^	POINTERS,$/;"	e	enum:microflow::DataStorageMethod
microflow::PackedDataType	kernelTileGatherProcessBoundaryCollide.tcc	/^	NodeType::PackedDataType (& nodeTypesCopy) [6][6][6],$/;"	m	namespace:microflow	file:
microflow::PackedDirectionVector	PackedDirectionVector.hpp	/^class PackedDirectionVector$/;"	c	namespace:microflow
microflow::PackedDirectionVector::InternalStorageType	PackedDirectionVector.hpp	/^		typedef T InternalStorageType ;$/;"	t	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::PackedDirectionVector	PackedDirectionVector.hh	/^PackedDirectionVector()$/;"	f	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::PackedDirectionVector	PackedDirectionVector.hh	/^PackedDirectionVector(PackedDirectionVector<T>::InternalStorageType packedVector)$/;"	f	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::bitMaskVector3D	PackedDirectionVector.hpp	/^		static constexpr unsigned bitMaskVector3D = 0b00111111 ;$/;"	m	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::bitsPerVector3D	PackedDirectionVector.hpp	/^		static constexpr unsigned bitsPerVector3D = 3*2 ;$/;"	m	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::extractSigned2Bits	PackedDirectionVector.hh	/^extractSigned2Bits( unsigned positionLSB ) const $/;"	f	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::extractSignedBits	PackedDirectionVector.hh	/^extractSignedBits( unsigned positionLSB, unsigned noOfBits ) const $/;"	f	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::extractUnsignedBits	PackedDirectionVector.hh	/^extractUnsignedBits( unsigned positionLSB, unsigned noOfBits ) const $/;"	f	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::getCoordinate	PackedDirectionVector.hh	/^getCoordinate( unsigned index ) const$/;"	f	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::getInternalStorage	PackedDirectionVector.hh	/^getInternalStorage() const$/;"	f	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::getVector3D	PackedDirectionVector.hh	/^getVector3D( unsigned vectorIndex ) const$/;"	f	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::packedVector_	PackedDirectionVector.hpp	/^		T packedVector_ ;$/;"	m	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::setCoordinate	PackedDirectionVector.hh	/^setCoordinate( unsigned index, char value \/* -1, 0, +1  only *\/ )$/;"	f	class:microflow::PackedDirectionVector
microflow::PackedDirectionVector::setVector3D	PackedDirectionVector.hh	/^setVector3D( unsigned vectorIndex, V vector3D )$/;"	f	class:microflow::PackedDirectionVector
microflow::PackedNodeNormalSet	PackedNodeNormalSet.hpp	/^class PackedNodeNormalSet$/;"	c	namespace:microflow
microflow::PackedNodeNormalSet::CONCAVE_EXTERNAL	PackedNodeNormalSet.hpp	/^			CONCAVE_EXTERNAL = 0 ,$/;"	e	enum:microflow::PackedNodeNormalSet::EdgeNodeType
microflow::PackedNodeNormalSet::CONVEX_INTERNAL	PackedNodeNormalSet.hpp	/^			CONVEX_INTERNAL  = 1 ,$/;"	e	enum:microflow::PackedNodeNormalSet::EdgeNodeType
microflow::PackedNodeNormalSet::CORNER	PackedNodeNormalSet.hpp	/^			CORNER           = 2 ,$/;"	e	enum:microflow::PackedNodeNormalSet::EdgeNodeType
microflow::PackedNodeNormalSet::EdgeNodeType	PackedNodeNormalSet.hpp	/^		enum EdgeNodeType {$/;"	g	class:microflow::PackedNodeNormalSet
microflow::PackedNodeNormalSet::PARALLEL_WALLS	PackedNodeNormalSet.hpp	/^			PARALLEL_WALLS   = 3$/;"	e	enum:microflow::PackedNodeNormalSet::EdgeNodeType
microflow::PackedNodeNormalSet::PackedNodeNormalSet	PackedNodeNormalSet.hh	/^PackedNodeNormalSet()$/;"	f	class:microflow::PackedNodeNormalSet
microflow::PackedNodeNormalSet::VectorType	PackedNodeNormalSet.hpp	/^		typedef Direction::D  VectorType ;$/;"	t	class:microflow::PackedNodeNormalSet
microflow::PackedNodeNormalSet::addNormalVector	PackedNodeNormalSet.hh	/^addNormalVector( const Direction & normalVector )$/;"	f	class:microflow::PackedNodeNormalSet
microflow::PackedNodeNormalSet::calculateResultantNormalVector	PackedNodeNormalSet.hh	/^calculateResultantNormalVector()$/;"	f	class:microflow::PackedNodeNormalSet
microflow::PackedNodeNormalSet::extractNormalVector	PackedNodeNormalSet.hh	/^extractNormalVector( unsigned vectorIndex ) const$/;"	f	class:microflow::PackedNodeNormalSet
microflow::PackedNodeNormalSet::getEdgeNodeType	PackedNodeNormalSet.hh	/^getEdgeNodeType() const$/;"	f	class:microflow::PackedNodeNormalSet
microflow::PackedNodeNormalSet::getNormalVector	PackedNodeNormalSet.hh	/^getNormalVector( unsigned vectorIndex ) const$/;"	f	class:microflow::PackedNodeNormalSet
microflow::PackedNodeNormalSet::getNormalVectorsCounter	PackedNodeNormalSet.hh	/^getNormalVectorsCounter() const $/;"	f	class:microflow::PackedNodeNormalSet
microflow::PackedNodeNormalSet::getResultantNormalVector	PackedNodeNormalSet.hh	/^getResultantNormalVector() const$/;"	f	class:microflow::PackedNodeNormalSet
microflow::PackedNodeNormalSet::setEdgeNodeType	PackedNodeNormalSet.hh	/^setEdgeNodeType( enum PackedNodeNormalSet::EdgeNodeType edgeNodeType )$/;"	f	class:microflow::PackedNodeNormalSet
microflow::PerformanceMeter	PerformanceMeter.hpp	/^class PerformanceMeter$/;"	c	namespace:microflow
microflow::PerformanceMeter::Measure	PerformanceMeter.hpp	/^		class Measure$/;"	c	class:microflow::PerformanceMeter
microflow::PerformanceMeter::Measure::Clock	PerformanceMeter.hpp	/^				typedef std::chrono::high_resolution_clock Clock ;$/;"	t	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::Measure::Measure	PerformanceMeter.hh	/^Measure()$/;"	f	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::Measure::TimePoint	PerformanceMeter.hpp	/^				typedef Clock::time_point TimePoint ;$/;"	t	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::Measure::begin	PerformanceMeter.hpp	/^				TimePoint begin ;$/;"	m	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::Measure::computeDurationInMicroseconds	PerformanceMeter.hh	/^computeDurationInMicroseconds() const$/;"	f	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::Measure::end	PerformanceMeter.hpp	/^				TimePoint end ;$/;"	m	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::Measure::hasMicrosecondSupport	PerformanceMeter.hh	/^hasMicrosecondSupport()$/;"	f	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::Measure::isInitialized	PerformanceMeter.hh	/^isInitialized( const TimePoint & timePoint ) $/;"	f	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::Measure::reset	PerformanceMeter.hh	/^reset()$/;"	f	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::Measure::start	PerformanceMeter.hh	/^start()$/;"	f	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::Measure::stop	PerformanceMeter.hh	/^stop()$/;"	f	class:microflow::PerformanceMeter::Measure
microflow::PerformanceMeter::PerformanceMeter	PerformanceMeter.hh	/^PerformanceMeter( unsigned int initialBufferSize )$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::clear	PerformanceMeter.hh	/^clear()$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::computeAverageDuration	PerformanceMeter.cpp	/^computeAverageDuration()$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::computeStandardDeviation	PerformanceMeter.cpp	/^computeStandardDeviation()$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::currentMeasure_	PerformanceMeter.hpp	/^    Measure currentMeasure_ ;$/;"	m	class:microflow::PerformanceMeter
microflow::PerformanceMeter::findMaxDuration	PerformanceMeter.cpp	/^findMaxDuration()$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::findMinDuration	PerformanceMeter.cpp	/^findMinDuration()$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::generateSummary	PerformanceMeter.cpp	/^generateSummary()$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::getNumberOfMeasures	PerformanceMeter.hh	/^getNumberOfMeasures() const$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::hasMicrosecondSupport	PerformanceMeter.hh	/^hasMicrosecondSupport()$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::measures_	PerformanceMeter.hpp	/^    std::vector<Measure> measures_ ;$/;"	m	class:microflow::PerformanceMeter
microflow::PerformanceMeter::start	PerformanceMeter.hh	/^start()$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::stop	PerformanceMeter.hh	/^stop()$/;"	f	class:microflow::PerformanceMeter
microflow::PerformanceMeter::~PerformanceMeter	PerformanceMeter.hh	/^~PerformanceMeter()$/;"	f	class:microflow::PerformanceMeter
microflow::Pixel	Image.hpp	/^typedef png::rgb_pixel Pixel ;$/;"	t	namespace:microflow
microflow::ProgramParameters	ProgramParameters.hpp	/^class ProgramParameters$/;"	c	namespace:microflow
microflow::ProgramParameters::ProgramParameters	ProgramParameters.cpp	/^ProgramParameters(int argc, char** argv) :$/;"	f	class:microflow::ProgramParameters
microflow::ProgramParameters::canContinue	ProgramParameters.cpp	/^canContinue()$/;"	f	class:microflow::ProgramParameters
microflow::ProgramParameters::canContinue_	ProgramParameters.hpp	/^		bool canContinue_ ;$/;"	m	class:microflow::ProgramParameters
microflow::ProgramParameters::casePath_	ProgramParameters.hpp	/^		std::string casePath_ ;$/;"	m	class:microflow::ProgramParameters
microflow::ProgramParameters::getCasePath	ProgramParameters.cpp	/^getCasePath()$/;"	f	class:microflow::ProgramParameters
microflow::ProgramParameters::getGpuId	ProgramParameters.cpp	/^getGpuId()$/;"	f	class:microflow::ProgramParameters
microflow::ProgramParameters::gpuId_	ProgramParameters.hpp	/^		unsigned int gpuId_ ;$/;"	m	class:microflow::ProgramParameters
microflow::Propagator	LBMOperatorChooser.hpp	/^class Propagator$/;"	c	namespace:microflow
microflow::Propagator::apply	LBMOperatorChooser.hh	/^apply( Calculator & calculator, Element & element )$/;"	f	class:microflow::Propagator
microflow::REFERENCE	NodeFromTile.hpp	/^	REFERENCE,$/;"	e	enum:microflow::DataStorageMethod
microflow::ReaderVtkBase	ReaderVtk.hpp	/^class ReaderVtkBase : public VtkXmlReaderClass$/;"	c	namespace:microflow
microflow::ReaderVtkBase::compareNodeBaseTypes	ReaderVtk.hh	/^compareNodeBaseTypes (TiledLattice & tiledLattice, $/;"	f	class:microflow::ReaderVtkBase
microflow::ReaderVtkBase::comparePlacementModifiers	ReaderVtk.hh	/^comparePlacementModifiers (TiledLattice & tiledLattice, $/;"	f	class:microflow::ReaderVtkBase
microflow::ReaderVtkBase::findArrayDataElement	ReaderVtk.hh	/^findArrayDataElement (vtkXMLDataElement * dataElements, std::string name)$/;"	f	class:microflow::ReaderVtkBase
microflow::ReaderVtkBase::read	ReaderVtk.hh	/^read $/;"	f	class:microflow::ReaderVtkBase
microflow::ReaderVtkBase::readDataArray	ReaderVtk.hh	/^readDataArray (vtkXMLDataElement * dataElements, std::string name, unsigned nValues)$/;"	f	class:microflow::ReaderVtkBase
microflow::ReaderVtkBase::readSkeleton	ReaderVtk.hh	/^readSkeleton (Argument & argument, Reader reader)$/;"	f	class:microflow::ReaderVtkBase
microflow::ReaderVtkBase::readTiledLattice	ReaderVtk.hh	/^readTiledLattice$/;"	f	class:microflow::ReaderVtkBase
microflow::ReaderVtkBase::registerIstream	ReaderVtk.hh	/^registerIstream (std::istream & is)$/;"	f	class:microflow::ReaderVtkBase
microflow::ReaderVtkBase::updateTiledLatticeArray	ReaderVtk.hh	/^updateTiledLatticeArray$/;"	f	class:microflow::ReaderVtkBase
microflow::ReaderVtkImage	ReaderVtk.hpp	/^class ReaderVtkImage $/;"	c	namespace:microflow
microflow::ReaderVtkImage::ReadPrimaryElement	ReaderVtk.hh	/^ReadPrimaryElement (vtkXMLDataElement* ePrimary) $/;"	f	class:microflow::ReaderVtkImage
microflow::ReaderVtkImage::computeNumberOfPoints	ReaderVtk.hh	/^computeNumberOfPoints()$/;"	f	class:microflow::ReaderVtkImage
microflow::ReaderVtkImage::getAndUpdatePointId	ReaderVtk.hh	/^getAndUpdatePointId (Coordinates const & pointCoordinates) $/;"	f	class:microflow::ReaderVtkImage
microflow::ReaderVtkImage::getPhysicalOrigin	ReaderVtk.hpp	/^		UniversalCoordinates<double> getPhysicalOrigin() const $/;"	f	class:microflow::ReaderVtkImage
microflow::ReaderVtkImage::getPhysicalSpacing	ReaderVtk.hpp	/^		double getPhysicalSpacing() const$/;"	f	class:microflow::ReaderVtkImage
microflow::ReaderVtkImage::getPointId	ReaderVtk.hh	/^getPointId (Coordinates const & pointCoordinates) $/;"	f	class:microflow::ReaderVtkImage
microflow::ReaderVtkImage::getXmlPointData	ReaderVtk.hh	/^getXmlPointData ()$/;"	f	class:microflow::ReaderVtkImage
microflow::ReaderVtkImage::physicalOrigin_	ReaderVtk.hpp	/^		double physicalOrigin_ [3] ;$/;"	m	class:microflow::ReaderVtkImage
microflow::ReaderVtkImage::physicalSpacing_	ReaderVtk.hpp	/^		double physicalSpacing_ ;$/;"	m	class:microflow::ReaderVtkImage
microflow::ReaderVtkImage::resetPointId	ReaderVtk.hh	/^resetPointId()$/;"	f	class:microflow::ReaderVtkImage
microflow::ReaderVtkUnstructured	ReaderVtk.hpp	/^class ReaderVtkUnstructured$/;"	c	namespace:microflow
microflow::ReaderVtkUnstructured::computeNumberOfPoints	ReaderVtk.hh	/^computeNumberOfPoints()$/;"	f	class:microflow::ReaderVtkUnstructured
microflow::ReaderVtkUnstructured::getAndUpdatePointId	ReaderVtk.hh	/^getAndUpdatePointId (Coordinates const & pointCoordinates __attribute__((unused))) $/;"	f	class:microflow::ReaderVtkUnstructured
microflow::ReaderVtkUnstructured::getPointId	ReaderVtk.hh	/^getPointId (Coordinates const & pointCoordinates __attribute__((unused)))$/;"	f	class:microflow::ReaderVtkUnstructured
microflow::ReaderVtkUnstructured::getXmlPointData	ReaderVtk.hh	/^getXmlPointData ()$/;"	f	class:microflow::ReaderVtkUnstructured
microflow::ReaderVtkUnstructured::pointId_	ReaderVtk.hpp	/^		vtkIdType pointId_ ;$/;"	m	class:microflow::ReaderVtkUnstructured
microflow::ReaderVtkUnstructured::resetPointId	ReaderVtk.hh	/^resetPointId()$/;"	f	class:microflow::ReaderVtkUnstructured
microflow::RhoBB2Calculator	LBMOperatorChooser.hpp	/^class RhoBB2Calculator$/;"	c	namespace:microflow
microflow::RhoBB2Calculator::apply	LBMOperatorChooser.hh	/^apply (Calculator & calculator, Element & element)$/;"	f	class:microflow::RhoBB2Calculator
microflow::RubyException	RubyInterpreter.cpp	/^class RubyException: public std::exception$/;"	c	namespace:microflow	file:
microflow::RubyInterpreter	RubyInterpreter.hpp	/^class RubyInterpreter$/;"	c	namespace:microflow
microflow::RubyInterpreter::RubyInterpreter	RubyInterpreter.cpp	/^RubyInterpreter()$/;"	f	class:microflow::RubyInterpreter
microflow::RubyInterpreter::getInterpreter	RubyInterpreter.cpp	/^getInterpreter() $/;"	f	class:microflow::RubyInterpreter
microflow::RubyInterpreter::getRubyVariable	RubyInterpreter.cpp	/^getRubyVariable( const std::string & variableName )$/;"	f	class:microflow::RubyInterpreter
microflow::RubyInterpreter::initializeRubyInterpreter	RubyInterpreter.cpp	/^initializeRubyInterpreter()$/;"	f	class:microflow::RubyInterpreter
microflow::RubyInterpreter::instance_	RubyInterpreter.cpp	/^RubyInterpreter* RubyInterpreter::instance_ = NULL ;$/;"	m	class:microflow::RubyInterpreter	file:
microflow::RubyInterpreter::instance_	RubyInterpreter.hpp	/^		static RubyInterpreter * instance_ ;$/;"	m	class:microflow::RubyInterpreter
microflow::RubyInterpreter::modifyNodeLayout	RubyInterpreter.cpp	/^modifyNodeLayout (NodeLayout & nodeLayout, const std::string & rubyCode)$/;"	f	class:microflow::RubyInterpreter
microflow::RubyInterpreter::runScript	RubyInterpreter.cpp	/^runScript(const char * script)$/;"	f	class:microflow::RubyInterpreter
microflow::RubyInterpreter::~RubyInterpreter	RubyInterpreter.cpp	/^~RubyInterpreter()$/;"	f	class:microflow::RubyInterpreter
microflow::S	Direction.hpp	/^constexpr Direction::D   S   = Direction::SOUTH ;$/;"	m	namespace:microflow
microflow::SB	Direction.hpp	/^constexpr Direction::D   SB  = Direction::SOUTH + Direction::BOTTOM ;$/;"	m	namespace:microflow
microflow::SE	Direction.hpp	/^constexpr Direction::D   SE  = Direction::SOUTH + Direction::EAST ;$/;"	m	namespace:microflow
microflow::SEB	Direction.hpp	/^constexpr Direction::D   SEB = Direction::SOUTH + Direction::EAST + Direction::BOTTOM ;$/;"	m	namespace:microflow
microflow::SELF	Direction.hpp	/^constexpr Direction::D   SELF = Direction::SELF ;$/;"	m	namespace:microflow
microflow::SET	Direction.hpp	/^constexpr Direction::D   SET = Direction::SOUTH + Direction::EAST + Direction::TOP ;$/;"	m	namespace:microflow
microflow::SIMULATION_ENGINE_SPECIALIZATION::SimulationEngineSpecialization	SimulationEngine.hh	/^SimulationEngineSpecialization$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
microflow::SIMULATION_ENGINE_SPECIALIZATION::collideAndPropagate	SimulationEngine.hh	/^collideAndPropagate (bool shouldComputeRhoU __attribute__((unused)))$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
microflow::SIMULATION_ENGINE_SPECIALIZATION::computeError	SimulationEngine.hh	/^computeError( bool shouldSaveVelocityT0 )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
microflow::SIMULATION_ENGINE_SPECIALIZATION::create	SimulationEngine.hh	/^create$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
microflow::SIMULATION_ENGINE_SPECIALIZATION::getNode	SimulationEngine.hh	/^getNode( Coordinates coordinates )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
microflow::SIMULATION_ENGINE_SPECIALIZATION::initializeAtEquilibrium	SimulationEngine.hh	/^initializeAtEquilibrium()$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
microflow::SIMULATION_ENGINE_SPECIALIZATION::loadCheckpoint	SimulationEngine.hh	/^loadCheckpoint( std::string checkpointFilePath )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
microflow::SIMULATION_ENGINE_SPECIALIZATION::saveCheckpoint	SimulationEngine.hh	/^saveCheckpoint( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
microflow::SIMULATION_ENGINE_SPECIALIZATION::saveVtk	SimulationEngine.hh	/^saveVtk( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::SimulationEngineSpecializationBase	SimulationEngine.hh	/^SimulationEngineSpecializationBase( TileLayout<StorageOnCPU> & tileLayout,$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::computeErrorFromCPU	SimulationEngine.hh	/^computeErrorFromCPU( bool shouldSaveVelocityT0 )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::getCollisionModelName	SimulationEngine.hh	/^getCollisionModelName() const$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::getComputationalEngineName	SimulationEngine.hh	/^getComputationalEngineName() const$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::getDataTypeName	SimulationEngine.hh	/^getDataTypeName() const$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::getFluidModelName	SimulationEngine.hh	/^getFluidModelName() const$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::getLatticeArrangementName	SimulationEngine.hh	/^getLatticeArrangementName() const$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::getLatticeCalculator	SimulationEngine.hh	/^getLatticeCalculator()$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::getLatticeCalculatorCPU	SimulationEngine.hh	/^getLatticeCalculatorCPU()$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::getNodeFromCPU	SimulationEngine.hh	/^getNodeFromCPU( Coordinates coordinates )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::loadCPUFromCheckpoint	SimulationEngine.hh	/^loadCPUFromCheckpoint( std::string checkpointFilePath )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::saveCPUToVtkFile	SimulationEngine.hh	/^saveCPUToVtkFile( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE::saveCPUtoCheckpoint	SimulationEngine.hh	/^saveCPUtoCheckpoint( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU::SimulationEngineSpecialization	SimulationEngine.tcc	/^SimulationEngineSpecialization$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU::collideAndPropagate	SimulationEngine.tcc	/^collideAndPropagate (bool shouldComputeRhoU)$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU::computeError	SimulationEngine.tcc	/^computeError( bool shouldSaveVelocityT0 )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU::create	SimulationEngine.tcc	/^create$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU::getNode	SimulationEngine.tcc	/^getNode( Coordinates coordinates )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU::initializeAtEquilibrium	SimulationEngine.tcc	/^initializeAtEquilibrium()$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU::loadCheckpoint	SimulationEngine.tcc	/^loadCheckpoint( std::string checkpointFilePath )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU::saveCheckpoint	SimulationEngine.tcc	/^saveCheckpoint( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU::saveVtk	SimulationEngine.tcc	/^saveVtk( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU::synchronizeCPUCopy	SimulationEngine.tcc	/^synchronizeCPUCopy()$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
microflow::ST	Direction.hpp	/^constexpr Direction::D   ST  = Direction::SOUTH + Direction::TOP ;$/;"	m	namespace:microflow
microflow::SW	Direction.hpp	/^constexpr Direction::D   SW  = Direction::SOUTH + Direction::WEST ;$/;"	m	namespace:microflow
microflow::SWB	Direction.hpp	/^constexpr Direction::D   SWB = Direction::SOUTH + Direction::WEST + Direction::BOTTOM ;$/;"	m	namespace:microflow
microflow::SWT	Direction.hpp	/^constexpr Direction::D   SWT = Direction::SOUTH + Direction::WEST + Direction::TOP ;$/;"	m	namespace:microflow
microflow::SYNTAX_ERROR_EXCEPTION	Exceptions.hpp	/^class SYNTAX_ERROR_EXCEPTION $/;"	c	namespace:microflow
microflow::SYNTAX_ERROR_EXCEPTION	microflowTools.cpp	/^class SYNTAX_ERROR_EXCEPTION $/;"	c	namespace:microflow	file:
microflow::SaveRhoU	kernelTileGatherProcessBoundaryCollide.hpp	/^class SaveRhoU$/;"	c	namespace:microflow
microflow::SaveRhoU::operator ()	kernelTileGatherProcessBoundaryCollide.hpp	/^		HD bool operator() () const { return true ; }$/;"	f	class:microflow::SaveRhoU
microflow::Settings	Settings.hpp	/^class Settings$/;"	c	namespace:microflow
microflow::Settings::DefaultValue	Settings.hpp	/^		enum class DefaultValue$/;"	c	class:microflow::Settings
microflow::Settings::DefaultValue::NOT_A_NUMBER	Settings.hpp	/^			NOT_A_NUMBER, $/;"	m	class:microflow::Settings::DefaultValue
microflow::Settings::Settings	Settings.cpp	/^	Settings()$/;"	f	class:microflow::Settings
microflow::Settings::Settings	Settings.cpp	/^	Settings(const std::string simulationDirectoryPath) :$/;"	f	class:microflow::Settings
microflow::Settings::_Nx	Settings.hpp	/^		unsigned _Nx ;$/;"	m	class:microflow::Settings
microflow::Settings::_Ny	Settings.hpp	/^		unsigned _Ny ;$/;"	m	class:microflow::Settings
microflow::Settings::_rbi	Settings.hpp	/^		RubyInterpreter * _rbi ; \/\/FIXME: unique_ptr$/;"	m	class:microflow::Settings
microflow::Settings::buildNodeType	Settings.cpp	/^	buildNodeType (const std::string name) const$/;"	f	class:microflow::Settings
microflow::Settings::characteristicLengthLB_	Settings.hpp	/^		double characteristicLengthLB_ ;$/;"	m	class:microflow::Settings
microflow::Settings::characteristicLengthPhysical_	Settings.hpp	/^		double characteristicLengthPhysical_   ; \/\/ [m]$/;"	m	class:microflow::Settings
microflow::Settings::characteristicVelocityLB_	Settings.hpp	/^		double characteristicVelocityLB_ ;$/;"	m	class:microflow::Settings
microflow::Settings::characteristicVelocityPhysical_	Settings.hpp	/^		double characteristicVelocityPhysical_ ; \/\/ [m\/s]$/;"	m	class:microflow::Settings
microflow::Settings::collisionModelName_	Settings.hpp	/^		std::string collisionModelName_      ;$/;"	m	class:microflow::Settings
microflow::Settings::computationalEngineName_	Settings.hpp	/^		std::string computationalEngineName_ ;$/;"	m	class:microflow::Settings
microflow::Settings::dataTypeName_	Settings.hpp	/^		std::string dataTypeName_            ;$/;"	m	class:microflow::Settings
microflow::Settings::defaultEdgeToPerpendicularWallNode_	Settings.hpp	/^    NodeType defaultEdgeToPerpendicularWallNode_ ;$/;"	m	class:microflow::Settings
microflow::Settings::defaultExternalCornerNode_	Settings.hpp	/^    NodeType defaultExternalCornerNode_          ;$/;"	m	class:microflow::Settings
microflow::Settings::defaultExternalCornerPressureNode_	Settings.hpp	/^    NodeType defaultExternalCornerPressureNode_  ;$/;"	m	class:microflow::Settings
microflow::Settings::defaultExternalEdgeNode_	Settings.hpp	/^    NodeType defaultExternalEdgeNode_            ;$/;"	m	class:microflow::Settings
microflow::Settings::defaultExternalEdgePressureNode_	Settings.hpp	/^    NodeType defaultExternalEdgePressureNode_    ;$/;"	m	class:microflow::Settings
microflow::Settings::defaultInternalCornerNode_	Settings.hpp	/^    NodeType defaultInternalCornerNode_          ;$/;"	m	class:microflow::Settings
microflow::Settings::defaultInternalEdgeNode_	Settings.hpp	/^    NodeType defaultInternalEdgeNode_            ;$/;"	m	class:microflow::Settings
microflow::Settings::defaultNotIdentifiedNode_	Settings.hpp	/^    NodeType defaultNotIdentifiedNode_           ;$/;"	m	class:microflow::Settings
microflow::Settings::defaultWallNode_	Settings.hpp	/^    NodeType defaultWallNode_                    ;$/;"	m	class:microflow::Settings
microflow::Settings::finalModify	Settings.cpp	/^	finalModify (NodeLayout & nodeLayout)$/;"	f	class:microflow::Settings
microflow::Settings::fluidModelName_	Settings.hpp	/^		std::string fluidModelName_          ;$/;"	m	class:microflow::Settings
microflow::Settings::geometryOrigin_	Settings.hpp	/^		UniversalCoordinates<double> geometryOrigin_ ;$/;"	m	class:microflow::Settings
microflow::Settings::getCharacteristicLengthLB	Settings.hh	/^getCharacteristicLengthLB() const$/;"	f	class:microflow::Settings
microflow::Settings::getCharacteristicLengthPhysical	Settings.hh	/^getCharacteristicLengthPhysical() const$/;"	f	class:microflow::Settings
microflow::Settings::getCharacteristicVelocityLB	Settings.hh	/^getCharacteristicVelocityLB() const$/;"	f	class:microflow::Settings
microflow::Settings::getCharacteristicVelocityPhysical	Settings.hh	/^getCharacteristicVelocityPhysical() const$/;"	f	class:microflow::Settings
microflow::Settings::getCheckpointDirectoryPath	Settings.hh	/^getCheckpointDirectoryPath() const$/;"	f	class:microflow::Settings
microflow::Settings::getCollisionModelName	Settings.hh	/^getCollisionModelName() const$/;"	f	class:microflow::Settings
microflow::Settings::getComputationalEngineName	Settings.hh	/^getComputationalEngineName() const$/;"	f	class:microflow::Settings
microflow::Settings::getDataTypeName	Settings.hh	/^getDataTypeName() const$/;"	f	class:microflow::Settings
microflow::Settings::getDefaultEdgeToPerpendicularWallNode	Settings.hh	/^inline NodeType Settings::getDefaultEdgeToPerpendicularWallNode() const$/;"	f	class:microflow::Settings
microflow::Settings::getDefaultExternalCornerNode	Settings.hh	/^inline NodeType Settings::getDefaultExternalCornerNode() const$/;"	f	class:microflow::Settings
microflow::Settings::getDefaultExternalCornerPressureNode	Settings.hh	/^inline NodeType Settings::getDefaultExternalCornerPressureNode() const$/;"	f	class:microflow::Settings
microflow::Settings::getDefaultExternalEdgeNode	Settings.hh	/^inline NodeType Settings::getDefaultExternalEdgeNode() const$/;"	f	class:microflow::Settings
microflow::Settings::getDefaultExternalEdgePressureNode	Settings.hh	/^inline NodeType Settings::getDefaultExternalEdgePressureNode() const$/;"	f	class:microflow::Settings
microflow::Settings::getDefaultInternalCornerNode	Settings.hh	/^inline NodeType Settings::getDefaultInternalCornerNode() const$/;"	f	class:microflow::Settings
microflow::Settings::getDefaultInternalEdgeNode	Settings.hh	/^inline NodeType Settings::getDefaultInternalEdgeNode() const$/;"	f	class:microflow::Settings
microflow::Settings::getDefaultNotIdentifiedNode	Settings.hh	/^inline NodeType Settings::getDefaultNotIdentifiedNode() const$/;"	f	class:microflow::Settings
microflow::Settings::getDefaultWallNode	Settings.hh	/^inline NodeType Settings::getDefaultWallNode() const$/;"	f	class:microflow::Settings
microflow::Settings::getFinalGeometryModificatorPath	Settings.hh	/^getFinalGeometryModificatorPath() const$/;"	f	class:microflow::Settings
microflow::Settings::getFluidModelName	Settings.hh	/^getFluidModelName() const$/;"	f	class:microflow::Settings
microflow::Settings::getGeometryDirectoryPath	Settings.hh	/^getGeometryDirectoryPath() const$/;"	f	class:microflow::Settings
microflow::Settings::getGeometryOrigin	Settings.hh	/^getGeometryOrigin() const$/;"	f	class:microflow::Settings
microflow::Settings::getGeometryPngImagePath	Settings.hh	/^getGeometryPngImagePath() const$/;"	f	class:microflow::Settings
microflow::Settings::getGeometryVtiImagePath	Settings.hh	/^getGeometryVtiImagePath() const$/;"	f	class:microflow::Settings
microflow::Settings::getInitialGeometryModificatorPath	Settings.hh	/^getInitialGeometryModificatorPath() const$/;"	f	class:microflow::Settings
microflow::Settings::getInitialVelocityLB	Settings.hh	/^getInitialVelocityLB( Axis axis ) const$/;"	f	class:microflow::Settings
microflow::Settings::getInitialVolumetricMassDensityLB	Settings.hh	/^getInitialVolumetricMassDensityLB() const$/;"	f	class:microflow::Settings
microflow::Settings::getInitialVolumetricMassDensityPhysical	Settings.hh	/^getInitialVolumetricMassDensityPhysical() const$/;"	f	class:microflow::Settings
microflow::Settings::getKinematicViscosityLB	Settings.hh	/^getKinematicViscosityLB() const$/;"	f	class:microflow::Settings
microflow::Settings::getKinematicViscosityPhysical	Settings.hh	/^getKinematicViscosityPhysical() const$/;"	f	class:microflow::Settings
microflow::Settings::getLatticeArrangementName	Settings.hh	/^getLatticeArrangementName() const $/;"	f	class:microflow::Settings
microflow::Settings::getLatticeSpacingPhysical	Settings.hh	/^getLatticeSpacingPhysical() const$/;"	f	class:microflow::Settings
microflow::Settings::getLatticeTimeStepPhysical	Settings.hh	/^getLatticeTimeStepPhysical() const$/;"	f	class:microflow::Settings
microflow::Settings::getMaxNumberOfCheckpoints	Settings.hh	/^getMaxNumberOfCheckpoints() const$/;"	f	class:microflow::Settings
microflow::Settings::getMaxNumberOfVtkFiles	Settings.hh	/^getMaxNumberOfVtkFiles() const$/;"	f	class:microflow::Settings
microflow::Settings::getModificationRhoU	Settings.hh	/^inline const ModificationRhoU & Settings::getModificationRhoU() const$/;"	f	class:microflow::Settings
microflow::Settings::getNumberOfStepsBetweenCheckpointSaves	Settings.hh	/^getNumberOfStepsBetweenCheckpointSaves() const$/;"	f	class:microflow::Settings
microflow::Settings::getNumberOfStepsBetweenErrorComputation	Settings.hh	/^getNumberOfStepsBetweenErrorComputation() const$/;"	f	class:microflow::Settings
microflow::Settings::getNumberOfStepsBetweenVtkSaves	Settings.hh	/^getNumberOfStepsBetweenVtkSaves() const$/;"	f	class:microflow::Settings
microflow::Settings::getOutputDirectoryPath	Settings.hh	/^getOutputDirectoryPath() const$/;"	f	class:microflow::Settings
microflow::Settings::getPixelColorDefinitionsFilePath	Settings.hh	/^getPixelColorDefinitionsFilePath() const$/;"	f	class:microflow::Settings
microflow::Settings::getRequiredVelocityRelativeError	Settings.hh	/^getRequiredVelocityRelativeError() const$/;"	f	class:microflow::Settings
microflow::Settings::getReynoldsNumber	Settings.hh	/^getReynoldsNumber() const$/;"	f	class:microflow::Settings
microflow::Settings::getSettingsDirectoryPath	Settings.hh	/^getSettingsDirectoryPath() const$/;"	f	class:microflow::Settings
microflow::Settings::getSimulationDirectoryPath	Settings.hh	/^getSimulationDirectoryPath() const$/;"	f	class:microflow::Settings
microflow::Settings::getTau	Settings.hh	/^getTau() const$/;"	f	class:microflow::Settings
microflow::Settings::getVtkDefaultRhoForBB2Nodes	Settings.hh	/^getVtkDefaultRhoForBB2Nodes() const$/;"	f	class:microflow::Settings
microflow::Settings::getZExpandDepth	Settings.hh	/^getZExpandDepth() const$/;"	f	class:microflow::Settings
microflow::Settings::initialModify	Settings.cpp	/^	initialModify (NodeLayout & nodeLayout)$/;"	f	class:microflow::Settings
microflow::Settings::initialVelocityLB_	Settings.hpp	/^		double initialVelocityLB_ [ 3 ] ;$/;"	m	class:microflow::Settings
microflow::Settings::initialVolumetricMassDensityLB_	Settings.hpp	/^		double initialVolumetricMassDensityLB_ ;$/;"	m	class:microflow::Settings
microflow::Settings::initialVolumetricMassDensityPhysical_	Settings.hpp	/^		double initialVolumetricMassDensityPhysical_ ;$/;"	m	class:microflow::Settings
microflow::Settings::isGeometryDefinedByPng	Settings.cpp	/^	isGeometryDefinedByPng() const$/;"	f	class:microflow::Settings
microflow::Settings::isGeometryDefinedByVti	Settings.cpp	/^	isGeometryDefinedByVti() const$/;"	f	class:microflow::Settings
microflow::Settings::kinematicViscosityLB_	Settings.hpp	/^		double kinematicViscosityLB_ ;$/;"	m	class:microflow::Settings
microflow::Settings::kinematicViscosityPhysical_	Settings.hpp	/^		double kinematicViscosityPhysical_ ; \/\/ [m^2\/s]$/;"	m	class:microflow::Settings
microflow::Settings::latticeArrangementName_	Settings.hpp	/^		std::string latticeArrangementName_  ;$/;"	m	class:microflow::Settings
microflow::Settings::latticeSpacingPhysical_	Settings.hpp	/^		double latticeSpacingPhysical_ ;$/;"	m	class:microflow::Settings
microflow::Settings::latticeTimeStepPhysical_	Settings.hpp	/^		double latticeTimeStepPhysical_ ;$/;"	m	class:microflow::Settings
microflow::Settings::loadConfiguration	Settings.cpp	/^	loadConfiguration( size_t geometryWidthInCells, $/;"	f	class:microflow::Settings
microflow::Settings::maxNumberOfCheckpoints_	Settings.hpp	/^		unsigned maxNumberOfCheckpoints_ ;$/;"	m	class:microflow::Settings
microflow::Settings::maxNumberOfVtkFiles_	Settings.hpp	/^		unsigned maxNumberOfVtkFiles_ ;$/;"	m	class:microflow::Settings
microflow::Settings::modificationRhoU_	Settings.hpp	/^		ModificationRhoU modificationRhoU_ ;$/;"	m	class:microflow::Settings
microflow::Settings::numberOfStepsBetweenCheckpointSaves_	Settings.hpp	/^		unsigned numberOfStepsBetweenCheckpointSaves_ ;$/;"	m	class:microflow::Settings
microflow::Settings::numberOfStepsBetweenErrorComputation_	Settings.hpp	/^		unsigned numberOfStepsBetweenErrorComputation_ ; $/;"	m	class:microflow::Settings
microflow::Settings::numberOfStepsBetweenVtkSaves_	Settings.hpp	/^		unsigned numberOfStepsBetweenVtkSaves_ ;$/;"	m	class:microflow::Settings
microflow::Settings::recalculateCoefficients	Settings.hh	/^recalculateCoefficients()$/;"	f	class:microflow::Settings
microflow::Settings::requiredVelocityRelativeError_	Settings.hpp	/^		double requiredVelocityRelativeError_ ;$/;"	m	class:microflow::Settings
microflow::Settings::reynoldsNumber_	Settings.hpp	/^		double reynoldsNumber_ ;$/;"	m	class:microflow::Settings
microflow::Settings::setCharacteristicLengthLB	Settings.hh	/^setCharacteristicLengthLB( double lengthLB )$/;"	f	class:microflow::Settings
microflow::Settings::setCharacteristicLengthPhysical	Settings.hh	/^setCharacteristicLengthPhysical( double lengthPhys )$/;"	f	class:microflow::Settings
microflow::Settings::setCharacteristicVelocityPhysical	Settings.hh	/^setCharacteristicVelocityPhysical( double velocityPhys )$/;"	f	class:microflow::Settings
microflow::Settings::setGeometryOrigin	Settings.hh	/^setGeometryOrigin (UniversalCoordinates<double> origin)$/;"	f	class:microflow::Settings
microflow::Settings::setInitialVelocityLB	Settings.hh	/^setInitialVelocityLB( Axis axis, double uLB ) $/;"	f	class:microflow::Settings
microflow::Settings::setInitialVolumetricMassDensityLB	Settings.hh	/^setInitialVolumetricMassDensityLB( double rhoLB )$/;"	f	class:microflow::Settings
microflow::Settings::setInitialVolumetricMassDensityPhysical	Settings.hh	/^setInitialVolumetricMassDensityPhysical( double rhoPhys )$/;"	f	class:microflow::Settings
microflow::Settings::setKinematicViscosityPhysical	Settings.hh	/^setKinematicViscosityPhysical( double nuPhys )$/;"	f	class:microflow::Settings
microflow::Settings::setTau	Settings.hh	/^setTau( double tau )$/;"	f	class:microflow::Settings
microflow::Settings::shouldComputeErrorInThisStep	Settings.hh	/^shouldComputeErrorInThisStep( unsigned stepNumber ) const$/;"	f	class:microflow::Settings
microflow::Settings::shouldSaveCheckpointInThisStep	Settings.hh	/^shouldSaveCheckpointInThisStep( unsigned stepNumber ) const$/;"	f	class:microflow::Settings
microflow::Settings::shouldSaveMassFlowFractions	Settings.hh	/^shouldSaveMassFlowFractions() const$/;"	f	class:microflow::Settings
microflow::Settings::shouldSaveMassFlowFractions_	Settings.hpp	/^		bool shouldSaveMassFlowFractions_ ;$/;"	m	class:microflow::Settings
microflow::Settings::shouldSaveNodes	Settings.hh	/^shouldSaveNodes() const$/;"	f	class:microflow::Settings
microflow::Settings::shouldSaveNodes_	Settings.hpp	/^		bool shouldSaveNodes_ ;$/;"	m	class:microflow::Settings
microflow::Settings::shouldSavePressurePhysical	Settings.hh	/^shouldSavePressurePhysical() const$/;"	f	class:microflow::Settings
microflow::Settings::shouldSavePressurePhysical_	Settings.hpp	/^		bool shouldSavePressurePhysical_ ;$/;"	m	class:microflow::Settings
microflow::Settings::shouldSaveVelocityLB	Settings.hh	/^shouldSaveVelocityLB() const$/;"	f	class:microflow::Settings
microflow::Settings::shouldSaveVelocityLB_	Settings.hpp	/^		bool shouldSaveVelocityLB_ ;$/;"	m	class:microflow::Settings
microflow::Settings::shouldSaveVelocityPhysical	Settings.hh	/^shouldSaveVelocityPhysical() const$/;"	f	class:microflow::Settings
microflow::Settings::shouldSaveVelocityPhysical_	Settings.hpp	/^		bool shouldSaveVelocityPhysical_ ;$/;"	m	class:microflow::Settings
microflow::Settings::shouldSaveVolumetricMassDensityLB	Settings.hh	/^shouldSaveVolumetricMassDensityLB() const$/;"	f	class:microflow::Settings
microflow::Settings::shouldSaveVolumetricMassDensityLB_	Settings.hpp	/^		bool shouldSaveVolumetricMassDensityLB_ ;$/;"	m	class:microflow::Settings
microflow::Settings::shouldSaveVtkInThisStep	Settings.hh	/^shouldSaveVtkInThisStep( unsigned stepNumber ) const$/;"	f	class:microflow::Settings
microflow::Settings::simulationDirectoryPath_	Settings.hpp	/^		std::string simulationDirectoryPath_ ; $/;"	m	class:microflow::Settings
microflow::Settings::tau_	Settings.hpp	/^		double tau_ ;$/;"	m	class:microflow::Settings
microflow::Settings::transformPressurePhysicalToVolumetricMassDensityLB	Settings.hh	/^transformPressurePhysicalToVolumetricMassDensityLB( double pressurePhysical ) const$/;"	f	class:microflow::Settings
microflow::Settings::transformVelocityLBToPhysical	Settings.hh	/^transformVelocityLBToPhysical( double velocityLB ) const$/;"	f	class:microflow::Settings
microflow::Settings::transformVelocityPhysicalToLB	Settings.hh	/^transformVelocityPhysicalToLB( double velocityPhysical ) const$/;"	f	class:microflow::Settings
microflow::Settings::transformVolumetricMassDensityLBToPressurePhysical	Settings.hh	/^transformVolumetricMassDensityLBToPressurePhysical( double volumetricMassDensityLB ) const$/;"	f	class:microflow::Settings
microflow::Settings::vtkDefaultRhoForBB2Nodes_	Settings.hpp	/^		std::string vtkDefaultRhoForBB2Nodes_ ;$/;"	m	class:microflow::Settings
microflow::Settings::write	Settings.cpp	/^	write( ostream & ostr)$/;"	f	class:microflow::Settings
microflow::Settings::zExpandDepth_	Settings.hpp	/^		unsigned zExpandDepth_ ;$/;"	m	class:microflow::Settings
microflow::Settings::~Settings	Settings.cpp	/^	~Settings()$/;"	f	class:microflow::Settings
microflow::Simulation	Simulation.hpp	/^class Simulation$/;"	c	namespace:microflow
microflow::Simulation::NodeLB	Simulation.hpp	/^		struct NodeLB$/;"	s	class:microflow::Simulation
microflow::Simulation::NodeLB::NodeLB	Simulation.cpp	/^NodeLB( Coordinates nodeCoordinates )$/;"	f	class:microflow::Simulation::NodeLB
microflow::Simulation::NodeLB::baseType	Simulation.hpp	/^				NodeBaseType baseType ;$/;"	m	struct:microflow::Simulation::NodeLB
microflow::Simulation::NodeLB::coordinates	Simulation.hpp	/^				Coordinates coordinates ;$/;"	m	struct:microflow::Simulation::NodeLB
microflow::Simulation::NodeLB::f	Simulation.hpp	/^				std::vector< double > f ;$/;"	m	struct:microflow::Simulation::NodeLB
microflow::Simulation::NodeLB::fPost	Simulation.hpp	/^				std::vector< double > fPost ;$/;"	m	struct:microflow::Simulation::NodeLB
microflow::Simulation::NodeLB::placementModifier	Simulation.hpp	/^				PlacementModifier placementModifier ;$/;"	m	struct:microflow::Simulation::NodeLB
microflow::Simulation::NodeLB::rho	Simulation.hpp	/^				double rho ;$/;"	m	struct:microflow::Simulation::NodeLB
microflow::Simulation::NodeLB::rhoBoundary	Simulation.hpp	/^				double rhoBoundary ;$/;"	m	struct:microflow::Simulation::NodeLB
microflow::Simulation::NodeLB::u	Simulation.hpp	/^				std::vector< double > u ;$/;"	m	struct:microflow::Simulation::NodeLB
microflow::Simulation::NodeLB::uBoundary	Simulation.hpp	/^				std::vector< double > uBoundary ;$/;"	m	struct:microflow::Simulation::NodeLB
microflow::Simulation::NodeLB::uT0	Simulation.hpp	/^				std::vector< double > uT0 ;$/;"	m	struct:microflow::Simulation::NodeLB
microflow::Simulation::Simulation	Simulation.cpp	/^Simulation( const std::string casePath )$/;"	f	class:microflow::Simulation
microflow::Simulation::classificatorBoundaryAtLocation_	Simulation.hpp	/^		std::unique_ptr <ClassificatorBoundaryAtLocation> classificatorBoundaryAtLocation_ ;$/;"	m	class:microflow::Simulation
microflow::Simulation::collideAndPropagate	Simulation.cpp	/^collideAndPropagate (bool shouldComputeRhoU)$/;"	f	class:microflow::Simulation
microflow::Simulation::coloredPixelClassificator_	Simulation.hpp	/^		std::unique_ptr< ColoredPixelClassificator > coloredPixelClassificator_ ;$/;"	m	class:microflow::Simulation
microflow::Simulation::computeError	Simulation.cpp	/^computeError( bool shouldSaveVelocityT0 )$/;"	f	class:microflow::Simulation
microflow::Simulation::expandedNodeLayout_	Simulation.hpp	/^		std::unique_ptr< ExpandedNodeLayout        > expandedNodeLayout_        ;$/;"	m	class:microflow::Simulation
microflow::Simulation::findCheckpointFile	Simulation.cpp	/^findCheckpointFile()$/;"	f	class:microflow::Simulation
microflow::Simulation::getNode	Simulation.cpp	/^getNode( Coordinates coordinates ) $/;"	f	class:microflow::Simulation
microflow::Simulation::getSettings	Simulation.cpp	/^getSettings()$/;"	f	class:microflow::Simulation
microflow::Simulation::getSize	Simulation.cpp	/^getSize() const$/;"	f	class:microflow::Simulation
microflow::Simulation::image_	Simulation.hpp	/^		std::unique_ptr< Image                     > image_                     ;$/;"	m	class:microflow::Simulation
microflow::Simulation::initializeAtEquilibrium	Simulation.cpp	/^initializeAtEquilibrium()$/;"	f	class:microflow::Simulation
microflow::Simulation::loadCheckpoint	Simulation.cpp	/^loadCheckpoint()$/;"	f	class:microflow::Simulation
microflow::Simulation::nodeLayout_	Simulation.hpp	/^		std::unique_ptr< NodeLayout                > nodeLayout_                ;$/;"	m	class:microflow::Simulation
microflow::Simulation::prepareOutputDirectories	Simulation.cpp	/^prepareOutputDirectories(int firstStepNumber)$/;"	f	class:microflow::Simulation
microflow::Simulation::removeRedundantCheckpoints	Simulation.cpp	/^removeRedundantCheckpoints()$/;"	f	class:microflow::Simulation
microflow::Simulation::removeRedundantFiles	Simulation.cpp	/^removeRedundantFiles( const string directoryPath,$/;"	f	class:microflow::Simulation
microflow::Simulation::removeRedundantVtkFiles	Simulation.cpp	/^removeRedundantVtkFiles()$/;"	f	class:microflow::Simulation
microflow::Simulation::run	Simulation.cpp	/^run()$/;"	f	class:microflow::Simulation
microflow::Simulation::saveCheckpoint	Simulation.cpp	/^saveCheckpoint( unsigned stepNumber )$/;"	f	class:microflow::Simulation
microflow::Simulation::saveVtk	Simulation.cpp	/^saveVtk( unsigned stepNumber )$/;"	f	class:microflow::Simulation
microflow::Simulation::settings_	Simulation.hpp	/^		std::unique_ptr< Settings                  > settings_                  ;$/;"	m	class:microflow::Simulation
microflow::Simulation::shouldStop_	Simulation.hpp	/^		bool shouldStop_ ; \/\/TODO: updated from signal handler, avoid race conditions.$/;"	m	class:microflow::Simulation
microflow::Simulation::simulationEngine_	Simulation.hpp	/^		std::unique_ptr< SimulationEngine          > simulationEngine_          ;$/;"	m	class:microflow::Simulation
microflow::Simulation::stop	Simulation.cpp	/^stop()$/;"	f	class:microflow::Simulation
microflow::Simulation::tileLayout_	Simulation.hpp	/^		std::unique_ptr< TileLayout<StorageOnCPU>  > tileLayout_                ;$/;"	m	class:microflow::Simulation
microflow::Simulation::~Simulation	Simulation.cpp	/^~Simulation()$/;"	f	class:microflow::Simulation
microflow::SimulationEngine	SimulationEngine.hpp	/^class SimulationEngine$/;"	c	namespace:microflow
microflow::SimulationEngine::~SimulationEngine	SimulationEngine.hpp	/^		virtual ~SimulationEngine() {} ;$/;"	f	class:microflow::SimulationEngine
microflow::SimulationEngineFactory	SimulationEngine.hpp	/^class SimulationEngineFactory$/;"	c	namespace:microflow
microflow::SimulationEngineFactory::FactoryMap	SimulationEngine.hpp	/^		typedef std::map< std::string, CreateSimulationEngineMethod > FactoryMap ;$/;"	t	class:microflow::SimulationEngineFactory
microflow::SimulationEngineFactory::factoryMap_	SimulationEngine.hpp	/^		FactoryMap factoryMap_ ;$/;"	m	class:microflow::SimulationEngineFactory
microflow::SimulationEngineSpecialization	SimulationEngine.hpp	/^class SimulationEngineSpecialization$/;"	c	namespace:microflow
microflow::SimulationEngineSpecialization::SimulationEngineSpecializationBaseType	SimulationEngine.hpp	/^						> SimulationEngineSpecializationBaseType ;$/;"	t	class:microflow::SimulationEngineSpecialization
microflow::SimulationEngineSpecialization::TiledLatticeTypeGPU	SimulationEngine.hpp	/^													TileDataArrangement::OPT_1> TiledLatticeTypeGPU ;$/;"	t	class:microflow::SimulationEngineSpecialization
microflow::SimulationEngineSpecialization::isCPUCopyValid_	SimulationEngine.hpp	/^		bool isCPUCopyValid_ ;$/;"	m	class:microflow::SimulationEngineSpecialization
microflow::SimulationEngineSpecialization::tiledLatticeGPU_	SimulationEngine.hpp	/^		TiledLatticeTypeGPU tiledLatticeGPU_ ;$/;"	m	class:microflow::SimulationEngineSpecialization
microflow::SimulationEngineSpecialization::~SimulationEngineSpecialization	SimulationEngine.hpp	/^		virtual ~SimulationEngineSpecialization() {} ;$/;"	f	class:microflow::SimulationEngineSpecialization
microflow::SimulationEngineSpecializationBase	SimulationEngine.hpp	/^class SimulationEngineSpecializationBase$/;"	c	namespace:microflow
microflow::SimulationEngineSpecializationBase::LatticeCalculatorType	SimulationEngine.hpp	/^								 tileDataArrangement> LatticeCalculatorType ;$/;"	t	class:microflow::SimulationEngineSpecializationBase
microflow::SimulationEngineSpecializationBase::LatticeCalculatorTypeCPU	SimulationEngine.hpp	/^								 StorageOnCPU, tileDataArrangement> LatticeCalculatorTypeCPU ;$/;"	t	class:microflow::SimulationEngineSpecializationBase
microflow::SimulationEngineSpecializationBase::TiledLatticeTypeCPU	SimulationEngine.hpp	/^													tileDataArrangement> TiledLatticeTypeCPU ;$/;"	t	class:microflow::SimulationEngineSpecializationBase
microflow::SimulationEngineSpecializationBase::TypeNamesExtractorType	SimulationEngine.hpp	/^							TypeNamesExtractorType ;$/;"	t	class:microflow::SimulationEngineSpecializationBase
microflow::SimulationEngineSpecializationBase::latticeCalculatorCPU_	SimulationEngine.hpp	/^		std::unique_ptr<LatticeCalculatorTypeCPU> latticeCalculatorCPU_ ;$/;"	m	class:microflow::SimulationEngineSpecializationBase
microflow::SimulationEngineSpecializationBase::latticeCalculator_	SimulationEngine.hpp	/^		std::unique_ptr<LatticeCalculatorType> latticeCalculator_ ;$/;"	m	class:microflow::SimulationEngineSpecializationBase
microflow::SimulationEngineSpecializationBase::tileDataArrangement	SimulationEngine.hpp	/^		static constexpr TileDataArrangement tileDataArrangement = TileDataArrangement::OPT_1 ;$/;"	m	class:microflow::SimulationEngineSpecializationBase
microflow::SimulationEngineSpecializationBase::tiledLatticeCPU_	SimulationEngine.hpp	/^		TiledLatticeTypeCPU tiledLatticeCPU_ ;$/;"	m	class:microflow::SimulationEngineSpecializationBase
microflow::SimulationEngineSpecializationBase::~SimulationEngineSpecializationBase	SimulationEngine.hpp	/^		virtual ~SimulationEngineSpecializationBase() {} ;$/;"	f	class:microflow::SimulationEngineSpecializationBase
microflow::SingleBlockPerTile	ThreadMapper.hpp	/^class SingleBlockPerTile$/;"	c	namespace:microflow
microflow::SingleThreadPerNode	ThreadMapper.hpp	/^class SingleThreadPerNode$/;"	c	namespace:microflow
microflow::Size	Size.hpp	/^class Size : public Coordinates$/;"	c	namespace:microflow
microflow::Size::Size	Size.hh	/^Size( size_t width, size_t height, size_t depth )$/;"	f	class:microflow::Size
microflow::Size::Size	Size.hh	/^Size()$/;"	f	class:microflow::Size
microflow::Size::areCoordinatesInLimits	Size.hh	/^areCoordinatesInLimits(Coordinates coordinates) const$/;"	f	class:microflow::Size
microflow::Size::areCoordinatesInLimits	Size.hh	/^areCoordinatesInLimits(size_t x, size_t y, size_t z) const$/;"	f	class:microflow::Size
microflow::Size::computeVolume	Size.hh	/^computeVolume() const$/;"	f	class:microflow::Size
microflow::Size::getDepth	Size.hh	/^getDepth() const$/;"	f	class:microflow::Size
microflow::Size::getHeight	Size.hh	/^getHeight() const$/;"	f	class:microflow::Size
microflow::Size::getWidth	Size.hh	/^getWidth() const$/;"	f	class:microflow::Size
microflow::SolidNeighborMask	SolidNeighborMask.hpp	/^class SolidNeighborMask$/;"	c	namespace:microflow
microflow::SolidNeighborMask::SolidNeighborMask	SolidNeighborMask.hh	/^SolidNeighborMask()$/;"	f	class:microflow::SolidNeighborMask
microflow::SolidNeighborMask::computeDirectionOfPlaneWithAllSolidNeighbors	SolidNeighborMask.hh	/^computeDirectionOfPlaneWithAllSolidNeighbors() const$/;"	f	class:microflow::SolidNeighborMask
microflow::SolidNeighborMask::hasAllStraightAndSlantingNeighborsNonSolid	SolidNeighborMask.hh	/^hasAllStraightAndSlantingNeighborsNonSolid() const$/;"	f	class:microflow::SolidNeighborMask
microflow::SolidNeighborMask::hasAllStraightNeighborsNonSolid	SolidNeighborMask.hh	/^hasAllStraightNeighborsNonSolid() const$/;"	f	class:microflow::SolidNeighborMask
microflow::SolidNeighborMask::hasSolidNeighbor	SolidNeighborMask.hpp	/^		bool hasSolidNeighbor() const { return not solidNeighborMask_.isClear() ; }$/;"	f	class:microflow::SolidNeighborMask
microflow::SolidNeighborMask::isNeighborSolid	SolidNeighborMask.hh	/^isNeighborSolid( const Direction & direction ) const$/;"	f	class:microflow::SolidNeighborMask
microflow::SolidNeighborMask::markSolidNeighbor	SolidNeighborMask.hh	/^markSolidNeighbor( const Direction & direction )$/;"	f	class:microflow::SolidNeighborMask
microflow::SolidNeighborMask::markSolidNeighbor	SolidNeighborMask.hh	/^markSolidNeighbor( const Direction::DirectionIndex & directionIndex )$/;"	f	class:microflow::SolidNeighborMask
microflow::SolidNeighborMask::solidNeighborMask_	SolidNeighborMask.hpp	/^		BitSet solidNeighborMask_ ; \/\/ TODO: BitSet<29>$/;"	m	class:microflow::SolidNeighborMask
microflow::StorageInKernel	Storage.hpp	/^class StorageInKernel$/;"	c	namespace:microflow
microflow::StorageInKernel::StorageInKernel	Storage.hh	/^StorageInKernel( StorageOnGPU<T> & storageOnGPU )$/;"	f	class:microflow::StorageInKernel
microflow::StorageInKernel::const_iterator	Storage.hpp	/^		typedef size_t const_iterator ;$/;"	t	class:microflow::StorageInKernel
microflow::StorageInKernel::dataPointer_	Storage.hpp	/^		T * dataPointer_ ;$/;"	m	class:microflow::StorageInKernel
microflow::StorageInKernel::iterator	Storage.hpp	/^		typedef size_t iterator ;$/;"	t	class:microflow::StorageInKernel
microflow::StorageInKernel::numberOfElements_	Storage.hpp	/^		size_t numberOfElements_ ;$/;"	m	class:microflow::StorageInKernel
microflow::StorageInKernel::operator []	Storage.hh	/^operator[] ( U idx ) const$/;"	f	class:microflow::StorageInKernel
microflow::StorageInKernel::operator []	Storage.hh	/^operator[] ( U idx )$/;"	f	class:microflow::StorageInKernel
microflow::StorageInKernel::size	Storage.hh	/^size() const$/;"	f	class:microflow::StorageInKernel
microflow::StorageOnCPU	Storage.hpp	/^class StorageOnCPU : public std::vector<T>$/;"	c	namespace:microflow
microflow::StorageOnCPU::getName	Storage.hpp	/^		static const std::string getName() { return "StorageOnCPU" ; }$/;"	f	class:microflow::StorageOnCPU
microflow::StorageOnCPU::operator =	Storage.hh	/^operator=( const Storage<T> & rhs )$/;"	f	class:microflow::StorageOnCPU
microflow::StorageOnCPU::operator []	Storage.hh	/^operator[] ( U idx ) const$/;"	f	class:microflow::StorageOnCPU
microflow::StorageOnCPU::operator []	Storage.hh	/^operator[] ( U idx )$/;"	f	class:microflow::StorageOnCPU
microflow::StorageOnGPU	Storage.hpp	/^class StorageOnGPU : public thrust::device_vector<T>$/;"	c	namespace:microflow
microflow::StorageOnGPU::StorageOnGPU	Storage.hh	/^StorageOnGPU()$/;"	f	class:microflow::StorageOnGPU
microflow::StorageOnGPU::getName	Storage.hpp	/^		static const std::string getName() { return "StorageOnGPU" ; }$/;"	f	class:microflow::StorageOnGPU
microflow::StorageOnGPU::getNumberOfElements	Storage.hh	/^getNumberOfElements()$/;"	f	class:microflow::StorageOnGPU
microflow::StorageOnGPU::getPointer	Storage.hh	/^getPointer()$/;"	f	class:microflow::StorageOnGPU
microflow::StorageOnGPU::operator =	Storage.hh	/^operator=( const Storage<T> & rhs )$/;"	f	class:microflow::StorageOnGPU
microflow::T	Direction.hpp	/^constexpr Direction::D   T   = Direction::TOP ;$/;"	m	namespace:microflow
microflow::TILE::Tile	Tile.hh	/^Tile( size_t tileIndex,$/;"	f	class:microflow::TILE
microflow::TILE::getCornerPosition	Tile.hh	/^getCornerPosition() const$/;"	f	class:microflow::TILE
microflow::TILED_LATTICE::forEachNode	TiledLattice.hh	/^forEachNode (Functor functor)$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::forEachTile	TiledLattice.hh	/^forEachTile (Functor functor)$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::getBeginOfTiles	TiledLattice.hh	/^getBeginOfTiles() const$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::getBeginOfTiles	TiledLattice.hh	/^getBeginOfTiles()$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::getEndOfTiles	TiledLattice.hh	/^getEndOfTiles() const$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::getEndOfTiles	TiledLattice.hh	/^getEndOfTiles()$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::getNOfTiles	TiledLattice.hh	/^getNOfTiles() const$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::getTile	TiledLattice.hh	/^getTile( ConstIterator tileIndex ) const$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::getTile	TiledLattice.hh	/^getTile( Iterator tileIndex )$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::getTileLayout	TiledLattice.hh	/^getTileLayout() $/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::getTileLayout	TiledLattice.hh	/^getTileLayout() const$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE::operator ==	TiledLattice.hh	/^operator==( const TILED_LATTICE & tiledLattice ) const$/;"	f	class:microflow::TILED_LATTICE
microflow::TILED_LATTICE_GPU::TiledLattice	TiledLattice.tcc	/^TiledLattice( TiledLatticeCPU & tiledLatticeCPU,$/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_GPU::copyFromCPU	TiledLattice.tcc	/^copyFromCPU (const TiledLattice <LatticeArrangement, DataType, StorageOnCPU, DataArrangement> $/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_GPU::copyFromCPU	TiledLattice.tcc	/^copyFromCPU()$/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_GPU::copyToCPU	TiledLattice.tcc	/^copyToCPU (TiledLattice <LatticeArrangement, DataType, StorageOnCPU, DataArrangement> $/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_GPU::copyToCPU	TiledLattice.tcc	/^copyToCPU() const$/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_GPU::getAllValues	TiledLattice.tcc	/^getAllValues()$/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_GPU::getNOfTiles	TiledLattice.tcc	/^getNOfTiles() const$/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_GPU::getNodeNormals	TiledLattice.tcc	/^getNodeNormals()$/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_GPU::getNodeTypes	TiledLattice.tcc	/^getNodeTypes()$/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_GPU::getSolidNeighborMasks	TiledLattice.tcc	/^getSolidNeighborMasks()$/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_GPU::getTileLayout	TiledLattice.tcc	/^getTileLayout()$/;"	f	class:microflow::TILED_LATTICE_GPU
microflow::TILED_LATTICE_KERNEL::TiledLattice	TiledLattice.tcc	/^TiledLattice (TiledLattice <LatticeArrangement, DataType, StorageOnGPU, DataArrangement> $/;"	f	class:microflow::TILED_LATTICE_KERNEL
microflow::TILED_LATTICE_KERNEL::getTile	TiledLattice.tcc	/^getTile( Iterator tileIndex )$/;"	f	class:microflow::TILED_LATTICE_KERNEL
microflow::TILE_BASE::TileBase	Tile.hh	/^TileBase( $/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::castPtr	Tile.hh	/^castPtr( DataType * ptr )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::computeDataBlockInTileIndex	Tile.hh	/^computeDataBlockInTileIndex (Data data, Axis axis)$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::computeDataBlockInTileIndex	Tile.hh	/^computeDataBlockInTileIndex (Data data, Axis axis, Direction::DirectionIndex fIndex)$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::computeDataBlockInTileIndex	Tile.hh	/^computeDataBlockInTileIndex (Data data, Direction::DirectionIndex fIndex)$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::computeIndexInFArray	Tile.hh	/^computeIndexInFArray (unsigned nodeInTileX, unsigned nodeInTileY, unsigned nodeInTileZ,$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::computeNodeDataIndex	Tile.hh	/^computeNodeDataIndex (unsigned nodeInTileX, unsigned nodeInTileY, unsigned nodeInTileZ,$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::computeTileDataBeginIndex	Tile.hh	/^computeTileDataBeginIndex (unsigned tileIndex)$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::computeTileDataBeginIndex	Tile.hh	/^computeTileDataBeginIndex (unsigned tileIndex, Data data, $/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::computeTileDataBeginIndex	Tile.hh	/^computeTileDataBeginIndex (unsigned tileIndex, Data data, Axis axis)$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::computeTileDataBeginIndex	Tile.hh	/^computeTileDataBeginIndex() const$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::f	Tile.hh	/^f( Direction direction )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::f	Tile.hh	/^f()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::fPost	Tile.hh	/^fPost( Direction direction )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::fPost	Tile.hh	/^fPost()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getCurrentTileIndex	Tile.hh	/^getCurrentTileIndex() const$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getFPostPtr	Tile.hh	/^getFPostPtr( Direction direction )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getFPtr	Tile.hh	/^getFPtr( Direction direction )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNFsPerNode	Tile.hh	/^getNFsPerNode()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNFsPerTile	Tile.hh	/^getNFsPerTile()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNValuesPerNode	Tile.hh	/^getNValuesPerNode()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNValuesPerTile	Tile.hh	/^getNValuesPerTile()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNeighbor	Tile.hh	/^getNeighbor( Direction direction )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNode	Tile.hh	/^getNode( unsigned x, unsigned y, unsigned z )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNodeHelper	Tile.hh	/^getNodeHelper( unsigned x, unsigned y, unsigned z, StorageWrapper<DataStorageMethod::POINTERS> )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNodeHelper	Tile.hh	/^getNodeHelper( unsigned x, unsigned y, unsigned z, StorageWrapper<DataStorageMethod::REFERENCE> )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNodeNormals	Tile.hh	/^getNodeNormals()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNodeNormalsPtr	Tile.hh	/^getNodeNormalsPtr()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNodeSolidNeighborMasks	Tile.hh	/^getNodeSolidNeighborMasks()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNodeSolidNeighborMasksPtr	Tile.hh	/^getNodeSolidNeighborMasksPtr()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNodeTypes	Tile.hh	/^getNodeTypes()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getNodeTypesPtr	Tile.hh	/^getNodeTypesPtr()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getPtr	Tile.hh	/^getPtr( unsigned dataIndex )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getRho0Ptr	Tile.hh	/^getRho0Ptr()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getRhoBoundaryPtr	Tile.hh	/^getRhoBoundaryPtr()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getRhoPtr	Tile.hh	/^getRhoPtr()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getUBoundaryPtr	Tile.hh	/^getUBoundaryPtr( Axis axis )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getUPtr	Tile.hh	/^getUPtr( Axis axis )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::getUT0Ptr	Tile.hh	/^getUT0Ptr( Axis axis )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::isEmpty	Tile.hh	/^isEmpty() const$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::rho	Tile.hh	/^rho()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::rho0	Tile.hh	/^rho0()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::rhoBoundary	Tile.hh	/^rhoBoundary()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::u	Tile.hh	/^u( Axis axis )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::u	Tile.hh	/^u()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::uBoundary	Tile.hh	/^uBoundary( Axis axis )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::uBoundary	Tile.hh	/^uBoundary()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::uT0	Tile.hh	/^uT0( Axis axis )$/;"	f	class:microflow::TILE_BASE
microflow::TILE_BASE::uT0	Tile.hh	/^uT0()$/;"	f	class:microflow::TILE_BASE
microflow::TILE_CALCULATOR_CPU::TileCalculator	TileCalculator.hh	/^TileCalculator (DataType rho0LB, $/;"	f	class:microflow::TILE_CALCULATOR_CPU
microflow::TILE_CALCULATOR_CPU::collide	TileCalculator.hh	/^collide( TileType & tile )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
microflow::TILE_CALCULATOR_CPU::computeRhoForBB2Nodes	TileCalculator.hh	/^computeRhoForBB2Nodes (TileType & tile)$/;"	f	class:microflow::TILE_CALCULATOR_CPU
microflow::TILE_CALCULATOR_CPU::initializeAtEquilibrium	TileCalculator.hh	/^initializeAtEquilibrium( TileType & tile )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
microflow::TILE_CALCULATOR_CPU::processBoundary	TileCalculator.hh	/^processBoundary( TileType & tile )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
microflow::TILE_CALCULATOR_CPU::processNodes	TileCalculator.hh	/^processNodes( TileType & tile )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
microflow::TILE_CALCULATOR_CPU::propagate	TileCalculator.hh	/^propagate( TileType & tile )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
microflow::TILE_CALCULATOR_CPU::propagateExternalNodes	TileCalculator.hh	/^propagateExternalNodes( TileType & tile, Cuboid wall, Direction neighborTileDirection )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
microflow::TILE_LAYOUT_GPU::TileLayout	TileLayout.tcc	/^TileLayout( TileLayout< StorageOnCPU > & tileLayoutCPU )$/;"	f	class:microflow::TILE_LAYOUT_GPU
microflow::TILE_LAYOUT_GPU::copyFromCPU	TileLayout.tcc	/^copyFromCPU( const TileLayout< StorageOnCPU > & tileLayoutCPU )$/;"	f	class:microflow::TILE_LAYOUT_GPU
microflow::TILE_LAYOUT_GPU::copyFromCPU	TileLayout.tcc	/^copyFromCPU()$/;"	f	class:microflow::TILE_LAYOUT_GPU
microflow::TILE_LAYOUT_GPU::copyToCPU	TileLayout.tcc	/^copyToCPU( TileLayout< StorageOnCPU > & tileLayoutCPU ) const$/;"	f	class:microflow::TILE_LAYOUT_GPU
microflow::TILE_LAYOUT_GPU::copyToCPU	TileLayout.tcc	/^copyToCPU() const$/;"	f	class:microflow::TILE_LAYOUT_GPU
microflow::TILE_TRAITS_COMMON::computeNodeInTileIndex	TileTraitsCommon.hh	/^computeNodeInTileIndex (unsigned nodeInTileX, unsigned nodeInTileY, unsigned nodeInTileZ)$/;"	f	class:microflow::TILE_TRAITS_COMMON
microflow::TILE_TRAITS_COMMON::computeNodeIndex	TileTraitsCommon.hh	/^computeNodeIndex (unsigned nodeInTileX, $/;"	f	class:microflow::TILE_TRAITS_COMMON
microflow::TILE_TRAITS_COMMON::computeTileNodesBeginIndex	TileTraitsCommon.hh	/^computeTileNodesBeginIndex (unsigned tileIndex)$/;"	f	class:microflow::TILE_TRAITS_COMMON
microflow::TILE_TRAITS_COMMON::getNNodesPerEdge	TileTraitsCommon.hh	/^getNNodesPerEdge()$/;"	f	class:microflow::TILE_TRAITS_COMMON
microflow::TILE_TRAITS_COMMON::getNNodesPerTile	TileTraitsCommon.hh	/^getNNodesPerTile()$/;"	f	class:microflow::TILE_TRAITS_COMMON
microflow::TLD3Q19	TiledLatticeTest.hpp	/^typedef TiledLattice <D3Q19, double, StorageOnCPU, TileDataArrangement::XYZ>	TLD3Q19 ;$/;"	t	namespace:microflow
microflow::TLD3Q19GPU	TiledLatticeTest.hpp	/^typedef TiledLattice <D3Q19, double, StorageOnGPU, TileDataArrangement::XYZ>	TLD3Q19GPU ;$/;"	t	namespace:microflow
microflow::TYPE_NAMES_EXTRACTOR::getCollisionModelName	TypeNamesExtractor.hh	/^getCollisionModelName()$/;"	f	class:microflow::TYPE_NAMES_EXTRACTOR
microflow::TYPE_NAMES_EXTRACTOR::getDataTypeName	TypeNamesExtractor.hh	/^getDataTypeName()$/;"	f	class:microflow::TYPE_NAMES_EXTRACTOR
microflow::TYPE_NAMES_EXTRACTOR::getFluidModelName	TypeNamesExtractor.hh	/^getFluidModelName()$/;"	f	class:microflow::TYPE_NAMES_EXTRACTOR
microflow::TYPE_NAMES_EXTRACTOR::getLatticeArrangementName	TypeNamesExtractor.hh	/^getLatticeArrangementName()$/;"	f	class:microflow::TYPE_NAMES_EXTRACTOR
microflow::ThreadMapper	ThreadMapper.hpp	/^class ThreadMapper$/;"	c	namespace:microflow
microflow::ThreadMapper	ThreadMapper.hpp	/^class ThreadMapper< TiledLattice, SingleBlockPerTile, SingleThreadPerNode >$/;"	c	namespace:microflow
microflow::ThreadMapper::ThreadMapper	ThreadMapper.hh	/^ThreadMapper( const TiledLattice & tiledLattice )$/;"	f	class:microflow::ThreadMapper
microflow::ThreadMapper::computeBlockDimension	ThreadMapper.hh	/^computeBlockDimension() const$/;"	f	class:microflow::ThreadMapper
microflow::ThreadMapper::computeGridDimension	ThreadMapper.hh	/^computeGridDimension() const$/;"	f	class:microflow::ThreadMapper
microflow::ThreadMapper::computeNumberOfBlocks	ThreadMapper.hh	/^computeNumberOfBlocks() const$/;"	f	class:microflow::ThreadMapper
microflow::ThreadMapper::computeNumberOfWarps	ThreadMapper.hh	/^computeNumberOfWarps() const$/;"	f	class:microflow::ThreadMapper
microflow::ThreadMapper::computeNumberOfWarpsPerBlock	ThreadMapper.hh	/^computeNumberOfWarpsPerBlock() const$/;"	f	class:microflow::ThreadMapper
microflow::ThreadMapper::getBlockDimX	ThreadMapper.hh	/^getBlockDimX()$/;"	f	class:microflow::ThreadMapper
microflow::ThreadMapper::getBlockDimY	ThreadMapper.hh	/^getBlockDimY()$/;"	f	class:microflow::ThreadMapper
microflow::ThreadMapper::getBlockDimZ	ThreadMapper.hh	/^getBlockDimZ()$/;"	f	class:microflow::ThreadMapper
microflow::ThreadMapper::numberOfTiles_	ThreadMapper.hpp	/^		unsigned numberOfTiles_ ;$/;"	m	class:microflow::ThreadMapper
microflow::Tile	Tile.hpp	/^class Tile : public TileBase< LatticeArrangement, DataType, Edge, Storage, DataArrangement >$/;"	c	namespace:microflow
microflow::Tile	Tile.hpp	/^class Tile <LatticeArrangement, DataType, Edge, StorageInKernel, DataArrangement> $/;"	c	namespace:microflow
microflow::Tile::DataTypeType	Tile.hpp	/^		typedef DataType           DataTypeType ;$/;"	t	class:microflow::Tile
microflow::Tile::LatticeArrangementType	Tile.hpp	/^		typedef LatticeArrangement LatticeArrangementType ;$/;"	t	class:microflow::Tile
microflow::Tile::Tile	Tile.hh	/^Tile( size_t tileIndex,$/;"	f	class:microflow::Tile
microflow::Tile::TraitsType	Tile.hpp	/^		typedef typename BaseType::TraitsType TraitsType ;$/;"	t	class:microflow::Tile
microflow::TileBase	Tile.hpp	/^class TileBase : public TileTraitsCommon< Edge, LatticeArrangement::getD() >$/;"	c	namespace:microflow
microflow::TileBase::Data	Tile.hpp	/^		enum class Data$/;"	c	class:microflow::TileBase
microflow::TileBase::Data::F	Tile.hpp	/^			F,$/;"	m	class:microflow::TileBase::Data
microflow::TileBase::Data::F_POST	Tile.hpp	/^			F_POST,$/;"	m	class:microflow::TileBase::Data
microflow::TileBase::Data::RHO	Tile.hpp	/^			RHO = 0,$/;"	m	class:microflow::TileBase::Data
microflow::TileBase::Data::RHO_BOUNDARY	Tile.hpp	/^			RHO_BOUNDARY,$/;"	m	class:microflow::TileBase::Data
microflow::TileBase::Data::RHO_T0	Tile.hpp	/^			RHO_T0,$/;"	m	class:microflow::TileBase::Data
microflow::TileBase::Data::U	Tile.hpp	/^			U,$/;"	m	class:microflow::TileBase::Data
microflow::TileBase::Data::U_BOUNDARY	Tile.hpp	/^			U_BOUNDARY,$/;"	m	class:microflow::TileBase::Data
microflow::TileBase::Data::U_T0	Tile.hpp	/^			U_T0,$/;"	m	class:microflow::TileBase::Data
microflow::TileBase::DataTypeArray	Tile.hpp	/^		typedef DataType DataTypeArray [Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
microflow::TileBase::DataTypeType	Tile.hpp	/^		typedef DataType DataTypeType ;$/;"	t	class:microflow::TileBase
microflow::TileBase::DefaultNodeType	Tile.hpp	/^									DataStorageMethod::REFERENCE> DefaultNodeType ;$/;"	t	class:microflow::TileBase
microflow::TileBase::FArray	Tile.hpp	/^		typedef DataType FArray        [LatticeArrangement::getQ()][Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
microflow::TileBase::LatticeArrangementType	Tile.hpp	/^		typedef LatticeArrangement LatticeArrangementType ;$/;"	t	class:microflow::TileBase
microflow::TileBase::NodeNormalsArray	Tile.hpp	/^		typedef PackedNodeNormalSet NodeNormalsArray [Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
microflow::TileBase::NodeSolidNeighborMasksArray	Tile.hpp	/^		typedef SolidNeighborMask NodeSolidNeighborMasksArray [Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
microflow::TileBase::NodeTypeArray	Tile.hpp	/^		typedef NodeType NodeTypeArray [Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
microflow::TileBase::StorageWrapper	Tile.hpp	/^		template <DataStorageMethod DataStorage> class StorageWrapper {} ;$/;"	c	class:microflow::TileBase
microflow::TileBase::TraitsType	Tile.hpp	/^		typedef TileTraitsCommon< Edge, LatticeArrangement::getD() >  TraitsType ;$/;"	t	class:microflow::TileBase
microflow::TileBase::VelocityArray	Tile.hpp	/^		typedef DataType VelocityArray [LatticeArrangement::getD()][Edge][Edge][Edge] ;$/;"	t	class:microflow::TileBase
microflow::TileBase::allValues_	Tile.hpp	/^		Storage< DataType > & allValues_ ;$/;"	m	class:microflow::TileBase
microflow::TileBase::currentTileIndex_	Tile.hpp	/^		TileIterator currentTileIndex_ ;$/;"	m	class:microflow::TileBase
microflow::TileBase::nodeNormals_	Tile.hpp	/^		Storage< PackedNodeNormalSet > & nodeNormals_ ;$/;"	m	class:microflow::TileBase
microflow::TileBase::nodeTypes_	Tile.hpp	/^		Storage< NodeType > & nodeTypes_ ;$/;"	m	class:microflow::TileBase
microflow::TileBase::solidNeighborMasks_	Tile.hpp	/^		Storage< SolidNeighborMask > & solidNeighborMasks_ ;$/;"	m	class:microflow::TileBase
microflow::TileBase::tileDataArrangement	Tile.hpp	/^		static constexpr TileDataArrangement tileDataArrangement = DataArrangement ;$/;"	m	class:microflow::TileBase
microflow::TileBase::tileLayout_	Tile.hpp	/^		const TileLayout<Storage> & tileLayout_ ;$/;"	m	class:microflow::TileBase
microflow::TileCalculator	TileCalculator.hpp	/^class TileCalculator< $/;"	c	namespace:microflow
microflow::TileCalculator::CalculatorType	TileCalculator.hpp	/^		typedef Calculator<FluidModel, LatticeArrangement, DataType, StorageOnCPU>  CalculatorType ;$/;"	t	class:microflow::TileCalculator
microflow::TileCalculator::TileType	TileCalculator.hpp	/^		typedef Tile<LatticeArrangement, DataType, Edge, StorageOnCPU, DataArrangement>  TileType ;$/;"	t	class:microflow::TileCalculator
microflow::TileCalculator::defaultExternalCornerPressureNode_	TileCalculator.hpp	/^		const NodeType defaultExternalCornerPressureNode_ ; $/;"	m	class:microflow::TileCalculator
microflow::TileCalculator::defaultExternalEdgePressureNode_	TileCalculator.hpp	/^		const NodeType defaultExternalEdgePressureNode_ ;$/;"	m	class:microflow::TileCalculator
microflow::TileD3Q19	TiledLatticeTest.hpp	/^					TileD3Q19 ;$/;"	t	namespace:microflow
microflow::TileDataArrangement	TileDataArrangement.hpp	/^enum class TileDataArrangement$/;"	c	namespace:microflow
microflow::TileDataArrangement::XYZ	TileDataArrangement.hpp	/^	XYZ , 	\/\/ Default, all data in row-order.$/;"	m	class:microflow::TileDataArrangement
microflow::TileIterator	TileIterator.hpp	/^typedef size_t TileIterator ;$/;"	t	namespace:microflow
microflow::TileLayout	TileLayout.hpp	/^class TileLayout$/;"	c	namespace:microflow
microflow::TileLayout	TileLayout.hpp	/^class TileLayout< StorageInKernel >$/;"	c	namespace:microflow
microflow::TileLayout	TileLayout.hpp	/^class TileLayout< StorageOnCPU >$/;"	c	namespace:microflow
microflow::TileLayout	TileLayout.hpp	/^class TileLayout< StorageOnGPU >$/;"	c	namespace:microflow
microflow::TileLayout::BaseType	TileLayout.hpp	/^	private: typedef TileLayoutBase<StorageInKernel> BaseType ;$/;"	t	class:microflow::TileLayout
microflow::TileLayout::TileLayout	TileLayout.cpp	/^TileLayout<StorageOnCPU>::TileLayout( const NodeLayout & nodeLayout )$/;"	f	class:microflow::TileLayout
microflow::TileLayout::TileLayout	TileLayout.tcc	/^TileLayout( TileLayout<StorageOnGPU> & tileLayoutGPU )$/;"	f	class:microflow::TileLayout
microflow::TileLayout::computeNoTilesTotal	TileLayout.cpp	/^computeNoTilesTotal() const$/;"	f	class:microflow::TileLayout
microflow::TileLayout::computeTilingStatistic	TileLayout.cpp	/^computeTilingStatistic() const$/;"	f	class:microflow::TileLayout
microflow::TileLayout::generateLayoutWithMarkedTiles	TileLayout.cpp	/^generateLayoutWithMarkedTiles() const$/;"	f	class:microflow::TileLayout
microflow::TileLayout::getNodeLayout	TileLayout.hh	/^getNodeLayout() const$/;"	f	class:microflow::TileLayout
microflow::TileLayout::getNodeType	TileLayout.hh	/^getNodeType( Coordinates coordinates ) const$/;"	f	class:microflow::TileLayout
microflow::TileLayout::getSize	TileLayout.hpp	/^		Size getSize() { return tileLayoutCPU_.getNodeLayout().getSize() ;  }$/;"	f	class:microflow::TileLayout
microflow::TileLayout::getTileMap	TileLayout.hh	/^getTileMap() const$/;"	f	class:microflow::TileLayout
microflow::TileLayout::isTileEmpty	TileLayout.cpp	/^isTileEmpty(size_t tileX0, size_t tileY0, size_t tileZ0) const$/;"	f	class:microflow::TileLayout
microflow::TileLayout::nodeLayout_	TileLayout.hpp	/^		NodeLayout nodeLayout_ ;$/;"	m	class:microflow::TileLayout
microflow::TileLayout::operator ==	TileLayout.hh	/^operator==( const TileLayout<StorageOnCPU> & tileLayout ) const$/;"	f	class:microflow::TileLayout
microflow::TileLayout::saveToVolFile	TileLayout.cpp	/^saveToVolFile( std::string fileName ) const$/;"	f	class:microflow::TileLayout
microflow::TileLayout::tileLayoutCPU_	TileLayout.hpp	/^		TileLayout< StorageOnCPU > & tileLayoutCPU_ ; \/\/ TODO: maybe unnecessary ?$/;"	m	class:microflow::TileLayout
microflow::TileLayoutBase	TileLayout.hpp	/^class TileLayoutBase$/;"	c	namespace:microflow
microflow::TileLayoutBase::ConstIterator	TileLayout.hpp	/^		typedef TileIterator ConstIterator ;$/;"	t	class:microflow::TileLayoutBase
microflow::TileLayoutBase::Iterator	TileLayout.hpp	/^		typedef TileIterator Iterator ;$/;"	t	class:microflow::TileLayoutBase
microflow::TileLayoutBase::NonEmptyTile	TileLayout.hpp	/^		class NonEmptyTile : public TileTraitsCommon< DEFAULT_3D_TILE_EDGE, 3u >$/;"	c	class:microflow::TileLayoutBase
microflow::TileLayoutBase::NonEmptyTile::Iterator	TileLayout.hpp	/^				typedef size_t Iterator ;$/;"	t	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::NonEmptyTile::NonEmptyTile	TileLayout.hh	/^NonEmptyTile( TileLayoutBase & tileLayoutBase, TileIndex tileIndex )$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::NonEmptyTile::TileIndex	TileLayout.hpp	/^				typedef TileIterator TileIndex ;$/;"	t	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::NonEmptyTile::getBeginOfNodes	TileLayout.hh	/^getBeginOfNodes() const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::NonEmptyTile::getCornerPosition	TileLayout.hh	/^getCornerPosition() const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::NonEmptyTile::getEndOfNodes	TileLayout.hh	/^getEndOfNodes() const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::NonEmptyTile::getIndex	TileLayout.hh	/^getIndex() const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::NonEmptyTile::getMapPosition	TileLayout.hh	/^getMapPosition() const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::NonEmptyTile::tileIndex_	TileLayout.hpp	/^				TileIndex tileIndex_ ;$/;"	m	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::NonEmptyTile::tileLayoutBase_	TileLayout.hpp	/^				TileLayoutBase & tileLayoutBase_ ;$/;"	m	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::NonEmptyTile::unpack	TileLayout.hh	/^unpack( TileLayoutBase<Storage>::NonEmptyTile::Iterator iterator ) const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
microflow::TileLayoutBase::TileLayoutBase	TileLayout.hh	/^TileLayoutBase( $/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::TileLayoutBase	TileLayout.hpp	/^		TileLayoutBase() {} ; \/\/TODO: remove ?$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getBeginOfNonEmptyTiles	TileLayout.hh	/^getBeginOfNonEmptyTiles() const$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getBeginOfNonEmptyTiles	TileLayout.hh	/^getBeginOfNonEmptyTiles()$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getEndOfNonEmptyTiles	TileLayout.hh	/^getEndOfNonEmptyTiles() const$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getEndOfNonEmptyTiles	TileLayout.hh	/^getEndOfNonEmptyTiles()$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getNeighborIndex	TileLayout.hh	/^getNeighborIndex( Iterator currentTile, Direction direction ) const$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getNeighbour	TileLayout.hh	/^getNeighbour( const TileLayoutBase<Storage>::NonEmptyTile & tile, Direction direction ) const$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getNeighbour	TileLayout.hh	/^getNeighbour( const TileLayoutBase<Storage>::NonEmptyTile & tile, Direction direction )$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getNoNonEmptyTiles	TileLayout.hh	/^getNoNonEmptyTiles() const$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getNonEmptyTilePosition	TileLayout.hh	/^getNonEmptyTilePosition( typename TileLayoutBase::NonEmptyTile::TileIndex tileIndex ) const$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getSize	TileLayout.hh	/^getSize() const$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getTile	TileLayout.hh	/^getTile( Coordinates nodeCoordinates ) const$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getTile	TileLayout.hh	/^getTile( TileLayoutBase<Storage>::ConstIterator it ) const$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getTile	TileLayout.hh	/^getTile( TileLayoutBase<Storage>::Iterator it )$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getTileMapPointer	TileLayout.hpp	/^		unsigned int * getTileMapPointer() { return tileMap_.getDataPointer() ; }$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getTilesX0Pointer	TileLayout.hpp	/^		size_t * getTilesX0Pointer() { return tilesX0_.getPointer() ; }$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getTilesY0Pointer	TileLayout.hpp	/^		size_t * getTilesY0Pointer() { return tilesY0_.getPointer() ; }$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::getTilesZ0Pointer	TileLayout.hpp	/^		size_t * getTilesZ0Pointer() { return tilesZ0_.getPointer() ; }$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::hasNeighbour	TileLayout.hh	/^hasNeighbour( const TileLayoutBase<Storage>::NonEmptyTile & tile, Direction direction ) const$/;"	f	class:microflow::TileLayoutBase
microflow::TileLayoutBase::size_	TileLayout.hpp	/^		Size size_ ;$/;"	m	class:microflow::TileLayoutBase
microflow::TileLayoutBase::tileMap_	TileLayout.hpp	/^		LinearizedMatrix<unsigned int, Storage> tileMap_ ;$/;"	m	class:microflow::TileLayoutBase
microflow::TileLayoutBase::tilesX0_	TileLayout.hpp	/^		Storage< size_t > tilesX0_ ;$/;"	m	class:microflow::TileLayoutBase
microflow::TileLayoutBase::tilesY0_	TileLayout.hpp	/^		Storage< size_t > tilesY0_ ;$/;"	m	class:microflow::TileLayoutBase
microflow::TileLayoutBase::tilesZ0_	TileLayout.hpp	/^		Storage< size_t > tilesZ0_ ;$/;"	m	class:microflow::TileLayoutBase
microflow::TileTraitsCommon	TileTraitsCommon.hpp	/^class TileTraitsCommon$/;"	c	namespace:microflow
microflow::TiledLattice	TiledLattice.hpp	/^class    TiledLattice <LatticeArrangement, DataType, StorageInKernel, DataArrangement> $/;"	c	namespace:microflow
microflow::TiledLattice	TiledLattice.hpp	/^class    TiledLattice <LatticeArrangement, DataType, StorageOnGPU, DataArrangement> $/;"	c	namespace:microflow
microflow::TiledLattice	TiledLattice.hpp	/^class TiledLattice <LatticeArrangement, DataType, StorageOnCPU, DataArrangement>$/;"	c	namespace:microflow
microflow::TiledLattice::ConstIterator	TiledLattice.hpp	/^		typedef TileIterator ConstIterator ;$/;"	t	class:microflow::TiledLattice
microflow::TiledLattice::DataTypeType	TiledLattice.hpp	/^		typedef DataType DataTypeType ;$/;"	t	class:microflow::TiledLattice
microflow::TiledLattice::Iterator	TiledLattice.hpp	/^		typedef TileIterator Iterator ;$/;"	t	class:microflow::TiledLattice
microflow::TiledLattice::LatticeArrangementType	TiledLattice.hpp	/^		typedef LatticeArrangement LatticeArrangementType ;$/;"	t	class:microflow::TiledLattice
microflow::TiledLattice::LatticeDataArrangement	TiledLattice.hpp	/^		TileDataArrangement LatticeDataArrangement = DataArrangement ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::TileType	TiledLattice.hpp	/^									DataArrangement> TileType ;$/;"	t	class:microflow::TiledLattice
microflow::TiledLattice::TileType	TiledLattice.hpp	/^									StorageInKernel, DataArrangement> TileType ;$/;"	t	class:microflow::TiledLattice
microflow::TiledLattice::TileType	TiledLattice.hpp	/^									StorageOnCPU, DataArrangement> TileType ;$/;"	t	class:microflow::TiledLattice
microflow::TiledLattice::TiledLattice	TiledLattice.cpp	/^TiledLattice( $/;"	f	class:microflow::TiledLattice
microflow::TiledLattice::TiledLatticeCPU	TiledLattice.hpp	/^							TiledLatticeCPU ;$/;"	t	class:microflow::TiledLattice
microflow::TiledLattice::allValues_	TiledLattice.hpp	/^		StorageInKernel< DataType > allValues_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::allValues_	TiledLattice.hpp	/^		StorageOnCPU< DataType > allValues_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::allValues_	TiledLattice.hpp	/^		StorageOnGPU< DataType > allValues_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::getAllValuesPointer	TiledLattice.hpp	/^		DataType * getAllValuesPointer() { return & allValues_[0] ; }$/;"	f	class:microflow::TiledLattice
microflow::TiledLattice::getAllValuesPointer	TiledLattice.hpp	/^		DataType * getAllValuesPointer() { return allValues_.getPointer() ; }$/;"	f	class:microflow::TiledLattice
microflow::TiledLattice::getNodeNormalsPointer	TiledLattice.hpp	/^		PackedNodeNormalSet * getNodeNormalsPointer() { return & nodeNormals_[0] ; }$/;"	f	class:microflow::TiledLattice
microflow::TiledLattice::getNodeNormalsPointer	TiledLattice.hpp	/^		PackedNodeNormalSet * getNodeNormalsPointer() { return nodeNormals_.getPointer() ; }$/;"	f	class:microflow::TiledLattice
microflow::TiledLattice::getNodeTypesPointer	TiledLattice.hpp	/^		NodeType * getNodeTypesPointer() { return & nodeTypes_[0] ; }$/;"	f	class:microflow::TiledLattice
microflow::TiledLattice::getNodeTypesPointer	TiledLattice.hpp	/^		NodeType * getNodeTypesPointer() { return nodeTypes_.getPointer() ; }$/;"	f	class:microflow::TiledLattice
microflow::TiledLattice::getSolidNeighborMasksPointer	TiledLattice.hpp	/^		SolidNeighborMask * getSolidNeighborMasksPointer() { return & solidNeighborMasks_[0] ; }$/;"	f	class:microflow::TiledLattice
microflow::TiledLattice::getSolidNeighborMasksPointer	TiledLattice.hpp	/^		SolidNeighborMask * getSolidNeighborMasksPointer() { return solidNeighborMasks_.getPointer() ; }$/;"	f	class:microflow::TiledLattice
microflow::TiledLattice::modify	TiledLattice.cpp	/^modify (const ModificationRhoU & modificationRhoU)$/;"	f	class:microflow::TiledLattice
microflow::TiledLattice::nodeNormals_	TiledLattice.hpp	/^		StorageInKernel< PackedNodeNormalSet > nodeNormals_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::nodeNormals_	TiledLattice.hpp	/^		StorageOnCPU< PackedNodeNormalSet > nodeNormals_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::nodeNormals_	TiledLattice.hpp	/^		StorageOnGPU< PackedNodeNormalSet > nodeNormals_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::nodeTypes_	TiledLattice.hpp	/^		StorageInKernel< NodeType > nodeTypes_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::nodeTypes_	TiledLattice.hpp	/^		StorageOnCPU< NodeType > nodeTypes_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::nodeTypes_	TiledLattice.hpp	/^		StorageOnGPU< NodeType > nodeTypes_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::settings_	TiledLattice.hpp	/^		const Settings & settings_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::solidNeighborMasks_	TiledLattice.hpp	/^		StorageInKernel< SolidNeighborMask > solidNeighborMasks_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::solidNeighborMasks_	TiledLattice.hpp	/^		StorageOnCPU< SolidNeighborMask > solidNeighborMasks_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::solidNeighborMasks_	TiledLattice.hpp	/^		StorageOnGPU< SolidNeighborMask > solidNeighborMasks_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::tileLayout_	TiledLattice.hpp	/^		TileLayout< StorageOnGPU > & tileLayout_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::tileLayout_	TiledLattice.hpp	/^		TileLayout<StorageInKernel> tileLayout_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::tileLayout_	TiledLattice.hpp	/^		TileLayout<StorageOnCPU> & tileLayout_ ;$/;"	m	class:microflow::TiledLattice
microflow::TiledLattice::tiledLatticeCPU_	TiledLattice.hpp	/^		TiledLatticeCPU & tiledLatticeCPU_ ; \/\/ TODO: maybe unnecessary ?$/;"	m	class:microflow::TiledLattice
microflow::TiledLatticeBase	TiledLattice.hpp	/^class TiledLatticeBase$/;"	c	namespace:microflow
microflow::TiledLatticeBase::getNNodesPerTileEdge	TiledLattice.hpp	/^		static constexpr unsigned getNNodesPerTileEdge() { return DEFAULT_3D_TILE_EDGE ; } ;$/;"	f	class:microflow::TiledLatticeBase
microflow::TiledLatticeBaseTwoCopies	TiledLattice.hpp	/^class TiledLatticeBaseTwoCopies$/;"	c	namespace:microflow
microflow::TiledLatticeBaseTwoCopies::TiledLatticeBaseTwoCopies	TiledLattice.hh	/^TiledLatticeBaseTwoCopies()$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::ValidCopyID	TiledLattice.hpp	/^		enum class ValidCopyID$/;"	c	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::ValidCopyID::F	TiledLattice.hpp	/^			NONE, F, FPOST$/;"	m	class:microflow::TiledLatticeBaseTwoCopies::ValidCopyID
microflow::TiledLatticeBaseTwoCopies::ValidCopyID::NONE	TiledLattice.hpp	/^			NONE, F, FPOST$/;"	m	class:microflow::TiledLatticeBaseTwoCopies::ValidCopyID
microflow::TiledLatticeBaseTwoCopies::getValidCopyID	TiledLattice.hh	/^getValidCopyID() const$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::isValidCopyID	TiledLattice.hh	/^isValidCopyID (ValidCopyID validCopyID) const$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::isValidCopyIDF	TiledLattice.hh	/^isValidCopyIDF () const$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::isValidCopyIDFPost	TiledLattice.hh	/^isValidCopyIDFPost () const$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::isValidCopyIDNone	TiledLattice.hh	/^isValidCopyIDNone () const$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::setValidCopyID	TiledLattice.hh	/^setValidCopyID (ValidCopyID validCopyID)$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::setValidCopyIDToF	TiledLattice.hh	/^setValidCopyIDToF()$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::setValidCopyIDToFPost	TiledLattice.hh	/^setValidCopyIDToFPost()$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::setValidCopyIDToNone	TiledLattice.hh	/^setValidCopyIDToNone()$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::switchValidCopyID	TiledLattice.hh	/^switchValidCopyID()$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
microflow::TiledLatticeBaseTwoCopies::validCopyID_	TiledLattice.hpp	/^		ValidCopyID validCopyID_ ;$/;"	m	class:microflow::TiledLatticeBaseTwoCopies
microflow::TilingStatistic	TilingStatistic.hpp	/^class TilingStatistic$/;"	c	namespace:microflow
microflow::TilingStatistic::TileLayoutType	TilingStatistic.hpp	/^		typedef TileLayout<StorageOnCPU>  TileLayoutType ;$/;"	t	class:microflow::TilingStatistic
microflow::TilingStatistic::TileType	TilingStatistic.hpp	/^		typedef TileLayout<StorageOnCPU>::NonEmptyTile TileType ;$/;"	t	class:microflow::TilingStatistic
microflow::TilingStatistic::TilingStatistic	TilingStatistic.cpp	/^TilingStatistic() :$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::addNode	TilingStatistic.cpp	/^addNode( const NodeType & nodeType )$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::addTile	TilingStatistic.cpp	/^addTile( const TileType & tile, const TileLayoutType & tileLayout )$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::computeAverageTileUtilisation	TilingStatistic.cpp	/^computeAverageTileUtilisation() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::computeBoundaryToFluidNodesRatio	TilingStatistic.cpp	/^computeBoundaryToFluidNodesRatio() const $/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::computeGeometryDensity	TilingStatistic.cpp	/^computeGeometryDensity() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::computeNTotalNodes	TilingStatistic.cpp	/^computeNTotalNodes() const $/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::computeNonEmptyTilesFactor	TilingStatistic.cpp	/^computeNonEmptyTilesFactor() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::computeStatistics	TilingStatistic.cpp	/^computeStatistics() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNBoundaryNodes	TilingStatistic.cpp	/^getNBoundaryNodes() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNEmptyTiles	TilingStatistic.cpp	/^getNEmptyTiles() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNFluidNodes	TilingStatistic.cpp	/^getNFluidNodes() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNNodesInNonEmptyTiles	TilingStatistic.cpp	/^getNNodesInNonEmptyTiles() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNNonEmptyTiles	TilingStatistic.cpp	/^getNNonEmptyTiles() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNNonSolidNodes	TilingStatistic.cpp	/^getNNonSolidNodes() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNSolidNodesInTiles	TilingStatistic.cpp	/^getNSolidNodesInTiles() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNSolidNodesInTotal	TilingStatistic.cpp	/^getNSolidNodesInTotal() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNTotalTiles	TilingStatistic.cpp	/^getNTotalTiles() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNUnknownNodes	TilingStatistic.cpp	/^getNUnknownNodes() const$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNodeGridSize	TilingStatistic.cpp	/^getNodeGridSize() const $/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getNodesPerTile	TilingStatistic.hpp	/^		static constexpr unsigned getNodesPerTile()$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getTileEdge	TilingStatistic.hpp	/^		static constexpr unsigned getTileEdge() {return DEFAULT_3D_TILE_EDGE ;} ;$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::getTileGridSize	TilingStatistic.cpp	/^getTileGridSize() const $/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::increaseNonemptyTilesCounter	TilingStatistic.cpp	/^increaseNonemptyTilesCounter()$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::nBoundaryNodes_	TilingStatistic.hpp	/^		std::size_t nBoundaryNodes_ ;$/;"	m	class:microflow::TilingStatistic
microflow::TilingStatistic::nFluidNodes_	TilingStatistic.hpp	/^		std::size_t nFluidNodes_ ;$/;"	m	class:microflow::TilingStatistic
microflow::TilingStatistic::nNonEmptyTiles_	TilingStatistic.hpp	/^		std::size_t nNonEmptyTiles_ ;$/;"	m	class:microflow::TilingStatistic
microflow::TilingStatistic::nSolidNodesInTiles_	TilingStatistic.hpp	/^		std::size_t nSolidNodesInTiles_ ;$/;"	m	class:microflow::TilingStatistic
microflow::TilingStatistic::nTotalTiles_	TilingStatistic.hpp	/^		std::size_t nTotalTiles_ ;$/;"	m	class:microflow::TilingStatistic
microflow::TilingStatistic::nUnknownNodes_	TilingStatistic.hpp	/^		std::size_t nUnknownNodes_ ;$/;"	m	class:microflow::TilingStatistic
microflow::TilingStatistic::setNTotalTiles	TilingStatistic.cpp	/^setNTotalTiles( size_t nTotalTiles )$/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::setTileGridSize	TilingStatistic.cpp	/^setTileGridSize( Size size ) $/;"	f	class:microflow::TilingStatistic
microflow::TilingStatistic::tileGridSize_	TilingStatistic.hpp	/^		Size tileGridSize_ ;$/;"	m	class:microflow::TilingStatistic
microflow::TypeNamesExtractor	TypeNamesExtractor.hpp	/^class TypeNamesExtractor$/;"	c	namespace:microflow
microflow::UniversalCoordinates	Coordinates.hpp	/^class UniversalCoordinates$/;"	c	namespace:microflow
microflow::UniversalCoordinates::UniversalCoordinates	Coordinates.hh	/^UniversalCoordinates( T x, T y, T z )$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::UniversalCoordinates	Coordinates.hh	/^UniversalCoordinates( const Direction & direction )$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::UniversalCoordinates	Coordinates.hh	/^UniversalCoordinates()$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::getX	Coordinates.hh	/^getX() const$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::getY	Coordinates.hh	/^getY() const$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::getZ	Coordinates.hh	/^getZ() const$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::operator !=	Coordinates.hh	/^operator!=( const UniversalCoordinates<T> & coordinates ) const$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::operator +	Coordinates.hh	/^operator+( const UniversalCoordinates & coordinates ) const$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::operator -	Coordinates.hh	/^operator-( const Direction & direction ) const$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::operator -	Coordinates.hh	/^operator-( const UniversalCoordinates & coordinates ) const$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::operator ==	Coordinates.hh	/^operator==( const UniversalCoordinates<T> & coordinates ) const$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::setX	Coordinates.hh	/^setX( T x )$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::setY	Coordinates.hh	/^setY( T y )$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::setZ	Coordinates.hh	/^setZ( T z )$/;"	f	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::x_	Coordinates.hpp	/^		T x_ ;$/;"	m	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::y_	Coordinates.hpp	/^		T y_ ;$/;"	m	class:microflow::UniversalCoordinates
microflow::UniversalCoordinates::z_	Coordinates.hpp	/^		T z_ ;$/;"	m	class:microflow::UniversalCoordinates
microflow::UnsafeOptimizations	Optimization.hpp	/^class UnsafeOptimizations$/;"	c	namespace:microflow
microflow::UnsafeOptimizations::shouldEnableUnsafeOptimizations	Optimization.hpp	/^		HD static constexpr bool shouldEnableUnsafeOptimizations() { return true ; }$/;"	f	class:microflow::UnsafeOptimizations
microflow::VtkTypes	VtkTypes.hpp	/^class VtkTypes <double>$/;"	c	namespace:microflow
microflow::VtkTypes::ArrayType	VtkTypes.hpp	/^		typedef vtkDoubleArray ArrayType ;$/;"	t	class:microflow::VtkTypes
microflow::VtkTypes::VTK_TYPE	VtkTypes.hpp	/^		static constexpr int VTK_TYPE = VTK_DOUBLE ;$/;"	m	class:microflow::VtkTypes
microflow::W	Direction.hpp	/^constexpr Direction::D   W   = Direction::WEST ;$/;"	m	namespace:microflow
microflow::WB	Direction.hpp	/^constexpr Direction::D   WB  = Direction::WEST + Direction::BOTTOM ;$/;"	m	namespace:microflow
microflow::WRITER::Writer	Writer.hh	/^Writer (TiledLatticeType & tiledLattice) $/;"	f	class:microflow::WRITER
microflow::WRITER::estimateBytesPerNode	Writer.hh	/^estimateBytesPerNode (const Settings & settings) const$/;"	f	class:microflow::WRITER
microflow::WRITER::estimateDataSizeForStructuredGrid	Writer.hh	/^estimateDataSizeForStructuredGrid (const Settings & settings) const$/;"	f	class:microflow::WRITER
microflow::WRITER::estimateDataSizeForUnstructuredGrid	Writer.hh	/^estimateDataSizeForUnstructuredGrid (const Settings & settings) const$/;"	f	class:microflow::WRITER
microflow::WRITER::saveVtk	Writer.hh	/^saveVtk (const Settings & settings, const std::string & filePath) const$/;"	f	class:microflow::WRITER
microflow::WRITER::saveVtkHelper	Writer.hh	/^saveVtkHelper $/;"	f	class:microflow::WRITER
microflow::WT	Direction.hpp	/^constexpr Direction::D   WT  = Direction::WEST + Direction::TOP ;$/;"	m	namespace:microflow
microflow::WhereSaveF	NodeCalculator.hpp	/^enum class WhereSaveF$/;"	c	namespace:microflow
microflow::WhereSaveF::F	NodeCalculator.hpp	/^	F,$/;"	m	class:microflow::WhereSaveF
microflow::Writer	Writer.hpp	/^class Writer$/;"	c	namespace:microflow
microflow::Writer::TiledLatticeType	Writer.hpp	/^													StorageOnCPU,DataArrangement> TiledLatticeType ;$/;"	t	class:microflow::Writer
microflow::Writer::tiledLattice_	Writer.hpp	/^		TiledLatticeType & tiledLattice_ ;$/;"	m	class:microflow::Writer
microflow::WriterVtkBase	WriterVtk.hpp	/^class WriterVtkBase : public VtkXmlWriterClass$/;"	c	namespace:microflow
microflow::WriterVtkBase::BaseClass	WriterVtk.hpp	/^		typedef VtkXmlWriterClass BaseClass ;$/;"	t	class:microflow::WriterVtkBase
microflow::WriterVtkBase::SetDataMode	WriterVtk.hh	/^SetDataMode (int mode) $/;"	f	class:microflow::WriterVtkBase
microflow::WriterVtkBase::allocateArray1D	WriterVtk.hh	/^allocateArray1D (unsigned nElements)$/;"	f	class:microflow::WriterVtkBase
microflow::WriterVtkBase::allocateArray3D	WriterVtk.hh	/^allocateArray3D (unsigned nElements)$/;"	f	class:microflow::WriterVtkBase
microflow::WriterVtkBase::fillArray	WriterVtk.hh	/^fillArray (vtkAbstractArray * dataArray, double value)$/;"	f	class:microflow::WriterVtkBase
microflow::WriterVtkBase::forEachNode	WriterVtk.hh	/^forEachNode (TiledLattice const & tiledLattice, Functor functor)$/;"	f	class:microflow::WriterVtkBase
microflow::WriterVtkBase::registerOstream	WriterVtk.hh	/^registerOstream (std::ostream & os)$/;"	f	class:microflow::WriterVtkBase
microflow::WriterVtkImage	WriterVtk.hpp	/^class WriterVtkImage $/;"	c	namespace:microflow
microflow::WriterVtkImage::write	WriterVtk.hh	/^write $/;"	f	class:microflow::WriterVtkImage
microflow::WriterVtkUnstructured	WriterVtk.hpp	/^class WriterVtkUnstructured$/;"	c	namespace:microflow
microflow::WriterVtkUnstructured::addCellFromCorner	WriterVtk.hh	/^addCellFromCorner$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::addCellsFromEdgeSB	WriterVtk.hh	/^addCellsFromEdgeSB$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::addCellsFromEdgeSW	WriterVtk.hh	/^addCellsFromEdgeSW$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::addCellsFromEdgeWB	WriterVtk.hh	/^addCellsFromEdgeWB$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::addCellsFromPlaneB	WriterVtk.hh	/^addCellsFromPlaneB$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::addCellsFromPlaneS	WriterVtk.hh	/^addCellsFromPlaneS$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::addCellsFromPlaneW	WriterVtk.hh	/^addCellsFromPlaneW$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::addCellsFromTile	WriterVtk.hh	/^addCellsFromTile$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::addDataToGrid	WriterVtk.hh	/^addDataToGrid$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildBoundaryRhoLBArray	WriterVtk.hh	/^buildBoundaryRhoLBArray$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildBoundaryVelocityLBArray	WriterVtk.hh	/^buildBoundaryVelocityLBArray$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildBoundaryVelocityPhysicalArray	WriterVtk.hh	/^buildBoundaryVelocityPhysicalArray$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildFArray	WriterVtk.hh	/^buildFArray$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildNodeArrays	WriterVtk.hh	/^buildNodeArrays$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildPressureArray	WriterVtk.hh	/^buildPressureArray$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildRhoLBArray	WriterVtk.hh	/^buildRhoLBArray$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildRhoT0LBArray	WriterVtk.hh	/^buildRhoT0LBArray$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildUnstructuredGrid	WriterVtk.hh	/^buildUnstructuredGrid$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildVelocityLBArray	WriterVtk.hh	/^buildVelocityLBArray$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildVelocityPhysicalArray	WriterVtk.hh	/^buildVelocityPhysicalArray$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::buildVelocityT0LBArray	WriterVtk.hh	/^buildVelocityT0LBArray$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::computeGlobalIndex	WriterVtk.hh	/^computeGlobalIndex (Tile & tile,$/;"	f	class:microflow::WriterVtkUnstructured
microflow::WriterVtkUnstructured::write	WriterVtk.hh	/^write $/;"	f	class:microflow::WriterVtkUnstructured
microflow::XYZ	MultidimensionalMappers.hpp	/^class XYZ$/;"	c	namespace:microflow
microflow::XYZ::linearize	MultidimensionalMappers.hh	/^linearize  (unsigned x, unsigned y, unsigned z,$/;"	f	class:microflow::XYZ
microflow::YXZ	MultidimensionalMappers.hpp	/^class YXZ$/;"	c	namespace:microflow
microflow::YXZ::linearize	MultidimensionalMappers.hh	/^linearize  (unsigned x, unsigned y, unsigned z,$/;"	f	class:microflow::YXZ
microflow::ZigzagNE	MultidimensionalMappers.hpp	/^class ZigzagNE$/;"	c	namespace:microflow
microflow::ZigzagNE::linearize	MultidimensionalMappers.hh	/^linearize  (unsigned x, unsigned y, unsigned z,$/;"	f	class:microflow::ZigzagNE
microflow::__anon1::copy	Storage.hh	/^	copy( Storage1<T> & destination, const Storage2<T> & source )$/;"	f	namespace:microflow::__anon1
microflow::__anon2::toString	TypeNamesExtractor.hh	/^const std::string toString<double> ()$/;"	f	namespace:microflow::__anon2
microflow::__anon2::toString	TypeNamesExtractor.hh	/^const std::string toString<float> ()$/;"	f	namespace:microflow::__anon2
microflow::areEqual	NodeFromTileTest.hpp	/^bool areEqual (NodeFromTile <Tile,DataStorage> & node1, $/;"	f	namespace:microflow
microflow::areEqual	TiledLatticeTest.hpp	/^bool areEqual (TiledLattice const & tLattice1, TiledLattice const & tLattice2)$/;"	f	namespace:microflow
microflow::buildFArrayName	BaseIO.hpp	/^buildFArrayName (const std::string & prefix,$/;"	f	namespace:microflow
microflow::bytesToHuman	microflowTools.cpp	/^string bytesToHuman (size_t numberOfBytes)$/;"	f	namespace:microflow
microflow::checkTile	TileTest.hpp	/^void checkTile (Tile & tile, unsigned & val)$/;"	f	namespace:microflow
microflow::checkTileNodes	TileTest.hpp	/^void checkTileNodes (Tile & tile, unsigned & val)$/;"	f	namespace:microflow
microflow::cleanDirectory	fileUtils.cpp	/^void cleanDirectory( const string directoryPath )$/;"	f	namespace:microflow
microflow::computeNeighborTileX	kernelTileGatherProcessBoundaryCollide.tcc	/^int computeNeighborTileX()$/;"	f	namespace:microflow
microflow::convertTo	MRubyInterpreter.cpp	/^    bool convertTo<bool> (mrb_value rubyVariable)$/;"	f	namespace:microflow
microflow::convertTo	MRubyInterpreter.cpp	/^    double convertTo<double> (mrb_value rubyVariable)$/;"	f	namespace:microflow
microflow::convertTo	MRubyInterpreter.cpp	/^    int convertTo<int> (mrb_value rubyVariable)$/;"	f	namespace:microflow
microflow::convertTo	MRubyInterpreter.cpp	/^    string convertTo<string> (mrb_value rubyVariable)$/;"	f	namespace:microflow
microflow::convertTo	MRubyInterpreter.cpp	/^    unsigned convertTo<unsigned> (mrb_value rubyVariable) $/;"	f	namespace:microflow
microflow::convertTo	RubyInterpreter.cpp	/^template<> bool convertTo<bool>(VALUE rubyVariable)$/;"	f	namespace:microflow
microflow::convertTo	RubyInterpreter.cpp	/^template<> double convertTo<double>(VALUE rubyVariable)$/;"	f	namespace:microflow
microflow::convertTo	RubyInterpreter.cpp	/^template<> std::string convertTo<std::string>(VALUE rubyVariable)$/;"	f	namespace:microflow
microflow::convertTo	RubyInterpreter.cpp	/^template<> unsigned int convertTo<unsigned int>(VALUE rubyVariable)$/;"	f	namespace:microflow
microflow::createDirectory	fileUtils.cpp	/^void createDirectory( const string directoryPath )$/;"	f	namespace:microflow
microflow::createFluidNodeLayout	NodeLayoutTest.cc	/^NodeLayout createFluidNodeLayout( unsigned width, unsigned height, unsigned depth)$/;"	f	namespace:microflow
microflow::createHomogenousNodeLayout	NodeLayoutTest.cc	/^NodeLayout createHomogenousNodeLayout( unsigned width, unsigned height, unsigned depth,$/;"	f	namespace:microflow
microflow::createRandomLayoutImage	NodeLayoutTest.cc	/^Image createRandomLayoutImage( unsigned width, unsigned height )$/;"	f	namespace:microflow
microflow::createRubyObject	RubyInterpreter.cpp	/^VALUE createRubyObject (std::string className)$/;"	f	namespace:microflow
microflow::createSolidLayoutImage	NodeLayoutTest.cc	/^Image createSolidLayoutImage( unsigned width, unsigned height )$/;"	f	namespace:microflow
microflow::createSolidNodeLayout	NodeLayoutTest.cc	/^NodeLayout createSolidNodeLayout( unsigned width, unsigned height, unsigned depth)$/;"	f	namespace:microflow
microflow::crossProduct	Direction.hh	/^crossProduct (const Direction & d1, const Direction & d2)$/;"	f	namespace:microflow
microflow::differ	Storage.hh	/^bool differ( const T & lhs, const T & rhs ) $/;"	f	namespace:microflow
microflow::differ	Storage.hh	/^bool differ( const double & lhs, const double & rhs )$/;"	f	namespace:microflow
microflow::dotProduct	Coordinates.hh	/^dotProduct (const UniversalCoordinates<T> & c1, const UniversalCoordinates<T> & c2)$/;"	f	namespace:microflow
microflow::dotProduct	Direction.hh	/^dotProduct (const Direction & d1, const Direction & d2)$/;"	f	namespace:microflow
microflow::extractStepNumberFromVtkFileName	fileUtils.cpp	/^int extractStepNumberFromVtkFileName( const string vtkFileName, $/;"	f	namespace:microflow
microflow::fileExists	fileUtils.cpp	/^bool fileExists (const std::string filePath)$/;"	f	namespace:microflow
microflow::fillTile	TileTest.hpp	/^void fillTile (Tile & tile, unsigned & val)$/;"	f	namespace:microflow
microflow::fillWithConsecutiveValues	TiledLatticeTest.hpp	/^void fillWithConsecutiveValues (TiledLattice & tiledLattice)$/;"	f	namespace:microflow
microflow::fromString	NodeBaseType.cpp	/^NodeBaseType fromString<NodeBaseType>( const std::string & name )$/;"	f	namespace:microflow
microflow::fromString	NodeType.hh	/^PlacementModifier fromString (const std::string & name)$/;"	f	namespace:microflow
microflow::gatherF	kernelTileGatherProcessBoundaryCollide.tcc	/^gatherF $/;"	f	namespace:microflow
microflow::getFileExtension	fileUtils.cpp	/^std::string getFileExtension (const string & fileName)$/;"	f	namespace:microflow
microflow::getFileNamesFromDirectory	fileUtils.cpp	/^vector<string> getFileNamesFromDirectory( const string directoryPath )$/;"	f	namespace:microflow
microflow::getFreePhysicalMemoryInBytes	microflowTools.cpp	/^size_t getFreePhysicalMemoryInBytes()$/;"	f	namespace:microflow
microflow::getInstalledPhysicalMemoryInBytes	microflowTools.cpp	/^size_t getInstalledPhysicalMemoryInBytes()$/;"	f	namespace:microflow
microflow::getNode	RubyInterpreter.cpp	/^static VALUE getNode (VALUE self, VALUE x, VALUE y, VALUE z)$/;"	f	namespace:microflow
microflow::getSize	RubyInterpreter.cpp	/^static VALUE getSize (VALUE self)$/;"	f	namespace:microflow
microflow::getVelocity	BoundaryDescription.hh	/^const double (& BoundaryDescription::getVelocity() const) [3]$/;"	f	namespace:microflow
microflow::initializeRubyModifyLayout	MRubyInterpreter.cpp	/^    initializeRubyModifyLayout()$/;"	f	namespace:microflow
microflow::initializeRubyModifyLayout	RubyInterpreter.cpp	/^initializeRubyModifyLayout()$/;"	f	namespace:microflow
microflow::isBoundary	NodeBaseType.hpp	/^HD bool isBoundary( NodeBaseType const & type )$/;"	f	namespace:microflow
microflow::isFluid	NodeBaseType.hpp	/^HD bool isFluid( NodeBaseType const & type )$/;"	f	namespace:microflow
microflow::isSolid	NodeBaseType.hpp	/^HD bool isSolid( NodeBaseType const & type )$/;"	f	namespace:microflow
microflow::kernelProcessTile	LatticeCalculator.tcc	/^kernelProcessTile$/;"	f	namespace:microflow
microflow::kernelSwapFPostWithF	LatticeCalculator.tcc	/^kernelSwapFPostWithF$/;"	f	namespace:microflow
microflow::kernelTileCollideOpt	kernelTileCollide.tcc	/^kernelTileCollideOpt$/;"	f	namespace:microflow
microflow::kernelTileGatherProcessBoundaryCollide	kernelTileGatherProcessBoundaryCollide.tcc	/^kernelTileGatherProcessBoundaryCollide$/;"	f	namespace:microflow
microflow::kernelTileProcessBoundaryOpt	kernelTileProcessBoundary.tcc	/^kernelTileProcessBoundaryOpt$/;"	f	namespace:microflow
microflow::kernelTilePropagateOpt	kernelTilePropagate.tcc	/^kernelTilePropagateOpt$/;"	f	namespace:microflow
microflow::layoutBorderNode	TileLayout.hpp	/^const NodeType layoutBorderNode = NodeBaseType::MARKER ;$/;"	m	namespace:microflow
microflow::linearizeXYZ	Size.hh	/^linearizeXYZ(const Coordinates & coordinates, const Size & size )$/;"	f	namespace:microflow
microflow::loadCopyOfTileMap	kernelTileGatherProcessBoundaryCollide.tcc	/^void loadCopyOfTileMap$/;"	f	namespace:microflow
microflow::logger	Logger.cpp	/^std::ostream & logger = std::cout ;$/;"	m	namespace:microflow	file:
microflow::max	Size.hh	/^Size max( const Size & s1, const Size & s2 )$/;"	f	namespace:microflow
microflow::microsecondsToHuman	microflowTools.cpp	/^std::string microsecondsToHuman (double microseconds)$/;"	f	namespace:microflow
microflow::modificationsRhoUPtr	MRubyInterpreter.cpp	/^    static ModificationRhoU * modificationsRhoUPtr = NULL ;$/;"	m	namespace:microflow	file:
microflow::modificationsRhoUPtr	RubyInterpreter.cpp	/^static ModificationRhoU * modificationsRhoUPtr = NULL ;$/;"	m	namespace:microflow	file:
microflow::neighborTileMapCopy	kernelTileGatherProcessBoundaryCollide.tcc	/^	const unsigned int (& neighborTileMapCopy) [3][3][3],$/;"	m	namespace:microflow	file:
microflow::nodeBaseTypeNames	NodeBaseType.cpp	/^static std::map< NodeBaseType, std::string > nodeBaseTypeNames = $/;"	m	namespace:microflow	file:
microflow::nodeLayoutPtr	MRubyInterpreter.cpp	/^    static NodeLayout * nodeLayoutPtr = NULL ;$/;"	m	namespace:microflow	file:
microflow::nodeLayoutPtr	RubyInterpreter.cpp	/^static NodeLayout * nodeLayoutPtr = NULL ;$/;"	m	namespace:microflow	file:
microflow::operator <<	BitSet.hh	/^std::ostream & operator<< (std::ostream & out, const BitSet & bitSet)$/;"	f	namespace:microflow
microflow::operator <<	Coordinates.hh	/^operator<<(std::ostream& out, const UniversalCoordinates<T> & coordinates)$/;"	f	namespace:microflow
microflow::operator <<	Direction.hh	/^std::ostream& operator<<(std::ostream& out, const Direction & direction) $/;"	f	namespace:microflow
microflow::operator <<	Image.hh	/^operator<<( std::ostream & out, const png::rgb_pixel & pixel )$/;"	f	namespace:microflow
microflow::operator <<	LatticeCalculator.hh	/^operator<<(std::ostream& out, $/;"	f	namespace:microflow
microflow::operator <<	NodeBaseType.cpp	/^std::ostream & operator<<(std::ostream & os, const NodeBaseType & nodeBaseType)$/;"	f	namespace:microflow
microflow::operator <<	NodeType.hh	/^operator<<(std::ostream & os, const PlacementModifier & placementModifier)$/;"	f	namespace:microflow
microflow::operator <<	NodeType.hh	/^operator<<(std::ostream& os, const NodeType & nodeType) $/;"	f	namespace:microflow
microflow::operator <<	PackedNodeNormalSet.hh	/^operator<<(std::ostream& out, const PackedNodeNormalSet & packedNodeNormalSet)$/;"	f	namespace:microflow
microflow::operator <<	SolidNeighborMask.hh	/^std::ostream& operator<<(std::ostream& out, const SolidNeighborMask & solidNeighborMask)$/;"	f	namespace:microflow
microflow::operator ==	Image.hh	/^bool operator==(const Pixel & p1, const Pixel & p2)$/;"	f	namespace:microflow
microflow::operator ==	Storage.hh	/^bool operator==( const Storage1<T> & lhs, const Storage2<T> & rhs )$/;"	f	namespace:microflow
microflow::operator >>	ColorAssignment.cpp	/^std::istream & operator>>( std::istream & stream, ColorAssignment & colorAssignment)$/;"	f	namespace:microflow
microflow::operator >>	Coordinates.hh	/^operator>> (std::istream& input, UniversalCoordinates<T> & coordinates)$/;"	f	namespace:microflow
microflow::placementModifierNames	NodeType.hh	/^static const std::map< PlacementModifier, std::string > placementModifierNames = $/;"	m	namespace:microflow
microflow::printFraction	TilingStatistic.cpp	/^string printFraction( double f )$/;"	f	namespace:microflow
microflow::printGridSize	TilingStatistic.cpp	/^string printGridSize( Size size )$/;"	f	namespace:microflow
microflow::printPercent	TilingStatistic.cpp	/^string printPercent( double v )$/;"	f	namespace:microflow
microflow::printUint	TilingStatistic.cpp	/^string printUint( size_t u )$/;"	f	namespace:microflow
microflow::printUintPercent	TilingStatistic.cpp	/^string printUintPercent( size_t value, size_t maxValue )$/;"	f	namespace:microflow
microflow::propagateNodeAtTileBorder	TileCalculator.hh	/^void propagateNodeAtTileBorder( TileType & tile,$/;"	f	namespace:microflow
microflow::readChar	microflowTools.cpp	/^void readChar(istream & inputStream, const char requiredChar)$/;"	f	namespace:microflow
microflow::readFileContents	fileUtils.cpp	/^std::string readFileContents (const std::string & filePath)$/;"	f	namespace:microflow
microflow::removeDirectory	fileUtils.cpp	/^void removeDirectory( const string directoryPath )$/;"	f	namespace:microflow
microflow::rsDirections	Direction.hpp	/^Direction::D constexpr rsDirections[] = {O, E, N, W, S, T, B, NE, NW, SW, SE, ET, EB, WB, WT, NT, NB, SB, ST } ;$/;"	m	namespace:microflow
microflow::rubyException	RubyInterpreter.cpp	/^} rubyException ;$/;"	m	namespace:microflow	typeref:class:microflow::RubyException	file:
microflow::setNodeBaseType	MRubyInterpreter.cpp	/^    static mrb_value setNodeBaseType (mrb_state * state, mrb_value self)  \/\/mrb_value x, mrb_value y, mrb_value z, mrb_value baseType$/;"	f	namespace:microflow
microflow::setNodeBaseType	RubyInterpreter.cpp	/^static VALUE setNodeBaseType (VALUE self, VALUE x, VALUE y, VALUE z, VALUE baseType)$/;"	f	namespace:microflow
microflow::setNodePlacementModifier	MRubyInterpreter.cpp	/^    static mrb_value setNodePlacementModifier (mrb_state * state, mrb_value self)$/;"	f	namespace:microflow
microflow::setNodePlacementModifier	RubyInterpreter.cpp	/^static VALUE setNodePlacementModifier (VALUE self, VALUE x, VALUE y, VALUE z, $/;"	f	namespace:microflow
microflow::setNodeRhoBoundaryPhysical	RubyInterpreter.cpp	/^static VALUE setNodeRhoBoundaryPhysical (VALUE self, VALUE x, VALUE y, VALUE z, $/;"	f	namespace:microflow
microflow::setNodeRhoPhysical	RubyInterpreter.cpp	/^static VALUE setNodeRhoPhysical (VALUE self, VALUE x, VALUE y, VALUE z, $/;"	f	namespace:microflow
microflow::setNodeUBoundaryPhysical	RubyInterpreter.cpp	/^static VALUE setNodeUBoundaryPhysical (VALUE self, VALUE x, VALUE y, VALUE z, $/;"	f	namespace:microflow
microflow::setNodeUPhysical	RubyInterpreter.cpp	/^static VALUE setNodeUPhysical (VALUE self, VALUE x, VALUE y, VALUE z, $/;"	f	namespace:microflow
microflow::shouldCopyF	kernelTileGatherProcessBoundaryCollide.tcc	/^constexpr bool shouldCopyF (DataStorageMethod dataStorageMethod)$/;"	f	namespace:microflow
microflow::sizeInBits	microflowTools.hpp	/^constexpr unsigned sizeInBits(unsigned n, unsigned p = 0) {$/;"	f	namespace:microflow
microflow::swap	gpuAlgorithms.hh	/^void swap (double & val1, double & val2)$/;"	f	namespace:microflow
microflow::swapWithTmp	NodeCalculator.hh	/^swapWithTmp (DataType & v1, DataType & v2, volatile DataType & tmp)$/;"	f	namespace:microflow
microflow::test	MRubyInterpreter.cpp	/^    void test ()$/;"	f	namespace:microflow
microflow::throwException	Exceptions.hpp	/^throwException( const char * str, const char * file = __FILE__, int line = __LINE__ )$/;"	f	namespace:microflow
microflow::throwException	Exceptions.hpp	/^throwException( const std::string & str, const char * file = __FILE__, int line = __LINE__ )$/;"	f	namespace:microflow
microflow::tileGatherProcessBoundaryCollide	kernelTileGatherProcessBoundaryCollide.tcc	/^tileGatherProcessBoundaryCollide$/;"	f	namespace:microflow
microflow::tiledNodeTypes	kernelTileGatherProcessBoundaryCollide.tcc	/^	NodeType * __restrict__ tiledNodeTypes,$/;"	m	namespace:microflow	file:
microflow::toPercentage	microflowTools.hpp	/^double toPercentage( double value )$/;"	f	namespace:microflow
microflow::toString	Direction.hh	/^toString( const Direction & direction )$/;"	f	namespace:microflow
microflow::toString	NodeBaseType.cpp	/^const std::string & toString( NodeBaseType nodeBaseType )$/;"	f	namespace:microflow
microflow::toString	NodeType.hh	/^toString (PlacementModifier placementModifier)$/;"	f	namespace:microflow
microflow::typeName	RubyInterpreter.cpp	/^template <> const std::string typeName<bool>        () { return "bool"   ; }$/;"	f	namespace:microflow
microflow::typeName	RubyInterpreter.cpp	/^template <> const std::string typeName<double>      () { return "double" ; }$/;"	f	namespace:microflow
microflow::typeName	RubyInterpreter.cpp	/^template <> const std::string typeName<std::string> () { return "string" ; }$/;"	f	namespace:microflow
microflow::typeName	RubyInterpreter.cpp	/^template <> const std::string typeName<unsigned int>() { return "uint"   ; }$/;"	f	namespace:microflow
microsecondsToHuman	microflowTools.cpp	/^std::string microsecondsToHuman (double microseconds)$/;"	f	namespace:microflow
modificationRhoU_	Settings.hpp	/^		ModificationRhoU modificationRhoU_ ;$/;"	m	class:microflow::Settings
modificationsRhoUPtr	MRubyInterpreter.cpp	/^    static ModificationRhoU * modificationsRhoUPtr = NULL ;$/;"	m	namespace:microflow	file:
modificationsRhoUPtr	RubyInterpreter.cpp	/^static ModificationRhoU * modificationsRhoUPtr = NULL ;$/;"	m	namespace:microflow	file:
modify	LatticeCalculatorTest.cc	/^		static void modify( NodeLayout & nodeLayout ) {}$/;"	f	class:NoModify
modify	LatticeCalculatorTest.cc	/^		static void modify( NodeLayout & nodeLayout )$/;"	f	class:AllTypes
modify	TiledLattice.cpp	/^modify (const ModificationRhoU & modificationRhoU)$/;"	f	class:microflow::TiledLattice
modifyNodeLayout	MRubyInterpreter.cpp	/^    modifyNodeLayout (NodeLayout & nodeLayout, const std::string & rubyCode)$/;"	f	class:microflow::MRubyInterpreter
modifyNodeLayout	RubyInterpreter.cpp	/^modifyNodeLayout (NodeLayout & nodeLayout, const std::string & rubyCode)$/;"	f	class:microflow::RubyInterpreter
myWrite	vtkTest.cc	/^myWrite (vtkSmartPointer <vtkDoubleArray> dataArray)$/;"	f	class:MyImageDataWriter
nBoundaryNodes_	TilingStatistic.hpp	/^		std::size_t nBoundaryNodes_ ;$/;"	m	class:microflow::TilingStatistic
nFluidNodes_	TilingStatistic.hpp	/^		std::size_t nFluidNodes_ ;$/;"	m	class:microflow::TilingStatistic
nNonEmptyTiles_	TilingStatistic.hpp	/^		std::size_t nNonEmptyTiles_ ;$/;"	m	class:microflow::TilingStatistic
nSolidNodesInTiles_	TilingStatistic.hpp	/^		std::size_t nSolidNodesInTiles_ ;$/;"	m	class:microflow::TilingStatistic
nTotalTiles_	TilingStatistic.hpp	/^		std::size_t nTotalTiles_ ;$/;"	m	class:microflow::TilingStatistic
nUnknownNodes_	TilingStatistic.hpp	/^		std::size_t nUnknownNodes_ ;$/;"	m	class:microflow::TilingStatistic
neighborTileIndexMapCopyDevice	kernelTileGatherProcessBoundaryCollideTest.cc	/^static __device__ unsigned neighborTileIndexMapCopyDevice [3][3][3] ;$/;"	v	file:
neighborTileMapCopy	kernelTileGatherProcessBoundaryCollide.tcc	/^	const unsigned int (& neighborTileMapCopy) [3][3][3],$/;"	m	namespace:microflow	file:
nodeBaseTypeNames	NodeBaseType.cpp	/^static std::map< NodeBaseType, std::string > nodeBaseTypeNames = $/;"	m	namespace:microflow	file:
nodeBaseType_	BoundaryDescription.hpp	/^		NodeBaseType nodeBaseType_ ;$/;"	m	class:microflow::BoundaryDescription
nodeLayoutPtr	MRubyInterpreter.cpp	/^    static NodeLayout * nodeLayoutPtr = NULL ;$/;"	m	namespace:microflow	file:
nodeLayoutPtr	RubyInterpreter.cpp	/^static NodeLayout * nodeLayoutPtr = NULL ;$/;"	m	namespace:microflow	file:
nodeLayout_	ExpandedNodeLayout.hpp	/^		NodeLayout & nodeLayout_ ;$/;"	m	class:microflow::ExpandedNodeLayout
nodeLayout_	Simulation.hpp	/^		std::unique_ptr< NodeLayout                > nodeLayout_                ;$/;"	m	class:microflow::Simulation
nodeLayout_	TileLayout.hpp	/^		NodeLayout nodeLayout_ ;$/;"	m	class:microflow::TileLayout
nodeLocations_	BoundaryAtLocations.hpp	/^		std::vector <Coordinates> nodeLocations_ ;$/;"	m	class:microflow::BoundaryAtLocations
nodeNormals	NodeCalculatorTest.cc	/^		HD PackedNodeNormalSet & nodeNormals()$/;"	f	class:TestNode
nodeNormals	NodeFromTile.hh	/^nodeNormals()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
nodeNormals	NodeFromTile.hh	/^nodeNormals()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
nodeNormals_	ExpandedNodeLayout.hpp	/^		LinearizedMatrix< PackedNodeNormalSet > nodeNormals_ ;$/;"	m	class:microflow::ExpandedNodeLayout
nodeNormals_	NodeCalculatorTest.cc	/^		PackedNodeNormalSet nodeNormals_ ;$/;"	m	class:TestNode	file:
nodeNormals_	Tile.hpp	/^		Storage< PackedNodeNormalSet > & nodeNormals_ ;$/;"	m	class:microflow::TileBase
nodeNormals_	TiledLattice.hpp	/^		StorageInKernel< PackedNodeNormalSet > nodeNormals_ ;$/;"	m	class:microflow::TiledLattice
nodeNormals_	TiledLattice.hpp	/^		StorageOnCPU< PackedNodeNormalSet > nodeNormals_ ;$/;"	m	class:microflow::TiledLattice
nodeNormals_	TiledLattice.hpp	/^		StorageOnGPU< PackedNodeNormalSet > nodeNormals_ ;$/;"	m	class:microflow::TiledLattice
nodeType	NodeCalculatorTest.cc	/^		HD NodeType & nodeType()$/;"	f	class:TestNode
nodeType	NodeFromTile.hh	/^nodeType()$/;"	f	class:microflow::NODE_FROM_TILE_COPY
nodeType	NodeFromTile.hh	/^nodeType()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
nodeType	NodeFromTile.hh	/^nodeType()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
nodeType_	NodeCalculatorTest.cc	/^		NodeType nodeType_ ;$/;"	m	class:TestNode	file:
nodeType_	NodeFromTile.hpp	/^		NodeType nodeType_ ;$/;"	m	class:microflow::NodeFromTile
nodeTypesCopyDevice	kernelTileGatherProcessBoundaryCollideTest.cc	/^NodeType::PackedDataType nodeTypesCopyDevice [6][6][6] ;$/;"	v	file:
nodeTypes_	NodeLayout.hpp	/^		LinearizedMatrix< NodeType > nodeTypes_ ;$/;"	m	class:microflow::NodeLayout
nodeTypes_	Tile.hpp	/^		Storage< NodeType > & nodeTypes_ ;$/;"	m	class:microflow::TileBase
nodeTypes_	TiledLattice.hpp	/^		StorageInKernel< NodeType > nodeTypes_ ;$/;"	m	class:microflow::TiledLattice
nodeTypes_	TiledLattice.hpp	/^		StorageOnCPU< NodeType > nodeTypes_ ;$/;"	m	class:microflow::TiledLattice
nodeTypes_	TiledLattice.hpp	/^		StorageOnGPU< NodeType > nodeTypes_ ;$/;"	m	class:microflow::TiledLattice
numberOfElements_	Storage.hpp	/^		size_t numberOfElements_ ;$/;"	m	class:microflow::StorageInKernel
numberOfStepsBetweenCheckpointSaves_	Settings.hpp	/^		unsigned numberOfStepsBetweenCheckpointSaves_ ;$/;"	m	class:microflow::Settings
numberOfStepsBetweenErrorComputation_	Settings.hpp	/^		unsigned numberOfStepsBetweenErrorComputation_ ; $/;"	m	class:microflow::Settings
numberOfStepsBetweenVtkSaves_	Settings.hpp	/^		unsigned numberOfStepsBetweenVtkSaves_ ;$/;"	m	class:microflow::Settings
numberOfTiles_	ThreadMapper.hpp	/^		unsigned numberOfTiles_ ;$/;"	m	class:microflow::ThreadMapper
open	gzstream.cpp	/^gzstreambuf* gzstreambuf::open( const char* name, int open_mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
open	gzstream.cpp	/^void gzstreambase::open( const char* name, int open_mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
operator !=	Coordinates.hh	/^operator!=( const UniversalCoordinates<T> & coordinates ) const$/;"	f	class:microflow::UniversalCoordinates
operator !=	Direction.hh	/^operator!=( const Direction & direction ) const$/;"	f	class:microflow::Direction
operator !=	NodeType.hh	/^operator != (const NodeBaseType & nodeBaseType) const$/;"	f	class:microflow::NodeType
operator !=	NodeType.hh	/^operator != (const NodeType & nodeType) const$/;"	f	class:microflow::NodeType
operator ()	kernelTileGatherProcessBoundaryCollide.hpp	/^		HD bool operator() () const { return false ; }$/;"	f	class:microflow::DontSaveRhoU
operator ()	kernelTileGatherProcessBoundaryCollide.hpp	/^		HD bool operator() () const { return true ; }$/;"	f	class:microflow::SaveRhoU
operator +	Coordinates.hh	/^operator+( const UniversalCoordinates & coordinates ) const$/;"	f	class:microflow::UniversalCoordinates
operator +	Direction.hh	/^operator+( const Direction & right ) const$/;"	f	class:microflow::Direction
operator +=	ModificationRhoU.hh	/^ModificationRhoU::operator += (const ModificationRhoU & right)$/;"	f	class:microflow::ModificationRhoU
operator -	Coordinates.hh	/^operator-( const Direction & direction ) const$/;"	f	class:microflow::UniversalCoordinates
operator -	Coordinates.hh	/^operator-( const UniversalCoordinates & coordinates ) const$/;"	f	class:microflow::UniversalCoordinates
operator -	Direction.hh	/^operator-( const Direction & right ) const$/;"	f	class:microflow::Direction
operator <<	BitSet.hh	/^std::ostream & operator<< (std::ostream & out, const BitSet & bitSet)$/;"	f	namespace:microflow
operator <<	Coordinates.hh	/^operator<<(std::ostream& out, const UniversalCoordinates<T> & coordinates)$/;"	f	namespace:microflow
operator <<	Direction.hh	/^std::ostream& operator<<(std::ostream& out, const Direction & direction) $/;"	f	namespace:microflow
operator <<	Image.hh	/^operator<<( std::ostream & out, const png::rgb_pixel & pixel )$/;"	f	namespace:microflow
operator <<	LatticeCalculator.hh	/^operator<<(std::ostream& out, $/;"	f	namespace:microflow
operator <<	NodeBaseType.cpp	/^std::ostream & operator<<(std::ostream & os, const NodeBaseType & nodeBaseType)$/;"	f	namespace:microflow
operator <<	NodeType.hh	/^operator<<(std::ostream & os, const PlacementModifier & placementModifier)$/;"	f	namespace:microflow
operator <<	NodeType.hh	/^operator<<(std::ostream& os, const NodeType & nodeType) $/;"	f	namespace:microflow
operator <<	PackedNodeNormalSet.hh	/^operator<<(std::ostream& out, const PackedNodeNormalSet & packedNodeNormalSet)$/;"	f	namespace:microflow
operator <<	SolidNeighborMask.hh	/^std::ostream& operator<<(std::ostream& out, const SolidNeighborMask & solidNeighborMask)$/;"	f	namespace:microflow
operator =	LinearizedMatrix.hh	/^operator=( const LinearizedMatrix<T, StorageSource> & sourceMatrix )$/;"	f	class:microflow::LINEARIZED_MATRIX
operator =	Storage.hh	/^operator=( const Storage<T> & rhs )$/;"	f	class:microflow::StorageOnCPU
operator =	Storage.hh	/^operator=( const Storage<T> & rhs )$/;"	f	class:microflow::StorageOnGPU
operator ==	BitSet.hh	/^operator== (const BitSet & arg) const$/;"	f	class:microflow::BitSet
operator ==	Coordinates.hh	/^operator==( const UniversalCoordinates<T> & coordinates ) const$/;"	f	class:microflow::UniversalCoordinates
operator ==	Direction.hh	/^operator==( const Direction & direction ) const$/;"	f	class:microflow::Direction
operator ==	Image.hh	/^bool operator==(const Pixel & p1, const Pixel & p2)$/;"	f	namespace:microflow
operator ==	LinearizedMatrix.hh	/^operator==( const LINEARIZED_MATRIX & linearizedMatrix ) const$/;"	f	class:microflow::LINEARIZED_MATRIX
operator ==	NodeType.hh	/^operator == (const NodeBaseType & nodeBaseType) const$/;"	f	class:microflow::NodeType
operator ==	NodeType.hh	/^operator == (const NodeType & nodeType) const$/;"	f	class:microflow::NodeType
operator ==	Storage.hh	/^bool operator==( const Storage1<T> & lhs, const Storage2<T> & rhs )$/;"	f	namespace:microflow
operator ==	TileLayout.hh	/^operator==( const TileLayout<StorageOnCPU> & tileLayout ) const$/;"	f	class:microflow::TileLayout
operator ==	TiledLattice.hh	/^operator==( const TILED_LATTICE & tiledLattice ) const$/;"	f	class:microflow::TILED_LATTICE
operator >>	ColorAssignment.cpp	/^std::istream & operator>>( std::istream & stream, ColorAssignment & colorAssignment)$/;"	f	namespace:microflow
operator >>	Coordinates.hh	/^operator>> (std::istream& input, UniversalCoordinates<T> & coordinates)$/;"	f	namespace:microflow
operator []	LinearizedMatrix.hh	/^operator[] ( const Coordinates & coordinates )$/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
operator []	Storage.hh	/^operator[] ( U idx ) const$/;"	f	class:microflow::StorageInKernel
operator []	Storage.hh	/^operator[] ( U idx ) const$/;"	f	class:microflow::StorageOnCPU
operator []	Storage.hh	/^operator[] ( U idx )$/;"	f	class:microflow::StorageInKernel
operator []	Storage.hh	/^operator[] ( U idx )$/;"	f	class:microflow::StorageOnCPU
operator |	BitSet.hh	/^operator| (const BitSet & arg) const$/;"	f	class:microflow::BitSet
overflow	gzstream.cpp	/^int gzstreambuf::overflow( int c) { \/\/ used for output buffer only$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
packedData	NodeType.hpp	/^		HD PackedDataType & packedData() { return packedData_ ; }$/;"	f	class:microflow::NodeClass::NodeType
packedData_	NodeType.hpp	/^			PackedDataType packedData_ ;$/;"	m	union:microflow::NodeClass::NodeType::__anon3
packedVector_	PackedDirectionVector.hpp	/^		T packedVector_ ;$/;"	m	class:microflow::PackedDirectionVector
parser_	MRubyInterpreter.hpp	/^        struct mrb_parser_state * parser_ ;$/;"	m	class:microflow::MRubyInterpreter	typeref:struct:microflow::MRubyInterpreter::mrb_parser_state
physicalOrigin_	ReaderVtk.hpp	/^		double physicalOrigin_ [3] ;$/;"	m	class:microflow::ReaderVtkImage
physicalSpacing_	ReaderVtk.hpp	/^		double physicalSpacing_ ;$/;"	m	class:microflow::ReaderVtkImage
placementModifier	Simulation.hpp	/^				PlacementModifier placementModifier ;$/;"	m	struct:microflow::Simulation::NodeLB
placementModifierNames	NodeType.hh	/^static const std::map< PlacementModifier, std::string > placementModifierNames = $/;"	m	namespace:microflow
placementModifier_	NodeType.hpp	/^				PackedDataType placementModifier_       : BITS_PER_PLACEMENT_MODIFIER        ;$/;"	m	struct:microflow::NodeClass::NodeType::__anon3::__anon4
pointId_	ReaderVtk.hpp	/^		vtkIdType pointId_ ;$/;"	m	class:microflow::ReaderVtkUnstructured
prepareOutputDirectories	Simulation.cpp	/^prepareOutputDirectories(int firstStepNumber)$/;"	f	class:microflow::Simulation
pressure_	BoundaryDefinitions.hpp	/^		std::vector<double> pressure_ ;$/;"	m	class:microflow::BoundaryDefinitions
pressure_	BoundaryDescription.hpp	/^		double pressure_    ;$/;"	m	class:microflow::BoundaryDescription
print	TileTest.cc	/^void print (double (&a) [4][4][4], unsigned offset = 0)$/;"	f	file:
printCompared	LatticeCalculatorTest.cc	/^void printCompared (Node & n1, Node & n2)$/;"	f	file:
printFraction	TilingStatistic.cpp	/^string printFraction( double f )$/;"	f	namespace:microflow
printGridSize	TilingStatistic.cpp	/^string printGridSize( Size size )$/;"	f	namespace:microflow
printPercent	TilingStatistic.cpp	/^string printPercent( double v )$/;"	f	namespace:microflow
printUint	TilingStatistic.cpp	/^string printUint( size_t u )$/;"	f	namespace:microflow
printUintPercent	TilingStatistic.cpp	/^string printUintPercent( size_t value, size_t maxValue )$/;"	f	namespace:microflow
proc_	MRubyInterpreter.hpp	/^        struct RProc * proc_ ;$/;"	m	class:microflow::MRubyInterpreter	typeref:struct:microflow::MRubyInterpreter::RProc
processBoundary	LatticeCalculator.hh	/^processBoundary( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
processBoundary	LatticeCalculator.tcc	/^processBoundary( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
processBoundary	NodeCalculator.hh	/^processBoundary( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_D3Q19
processBoundary	TileCalculator.hh	/^processBoundary( TileType & tile )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
processBoundaryBounceBack2	NodeCalculator.hh	/^processBoundaryBounceBack2( Node & node )$/;"	f	class:microflow::NODE_CALCULATOR_BASE
processBoundaryFluid	NodeCalculator.hh	/^processBoundaryFluid (Node & node)$/;"	f	class:microflow::NODE_CALCULATOR_BASE
processBoundaryFluid_NoOptimizations	NodeCalculator.hh	/^processBoundaryFluid_NoOptimizations (Node & node)$/;"	f	class:microflow::NODE_CALCULATOR_BASE
processBoundaryFluid_UnsafeOptimizations	NodeCalculator.hh	/^processBoundaryFluid_UnsafeOptimizations (Node & node)$/;"	f	class:microflow::NODE_CALCULATOR_BASE
processBoundaryOpt	LatticeCalculator.tcc	/^processBoundaryOpt (TiledLatticeType & tiledLattice)$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
processNodes	TileCalculator.hh	/^processNodes( TileType & tile )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
processTiles	LatticeCalculator.hh	/^processTiles( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
processTiles	LatticeCalculator.tcc	/^processTiles( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
propagate	LatticeCalculator.hh	/^propagate( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_CPU
propagate	LatticeCalculator.tcc	/^propagate( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
propagate	TileCalculator.hh	/^propagate( TileType & tile )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
propagateExternalNodes	TileCalculator.hh	/^propagateExternalNodes( TileType & tile, Cuboid wall, Direction neighborTileDirection )$/;"	f	class:microflow::TILE_CALCULATOR_CPU
propagateNodeAtTileBorder	TileCalculator.hh	/^void propagateNodeAtTileBorder( TileType & tile,$/;"	f	namespace:microflow
propagateOpt	LatticeCalculator.tcc	/^propagateOpt( TiledLatticeType & tiledLattice )$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
read	BoundaryDescription.cpp	/^read (std::istream & stream)$/;"	f	class:BoundaryDescription
read	ReaderVtk.hh	/^read $/;"	f	class:microflow::ReaderVtkBase
readAndSaveVtk	WriterTest.cc	/^void readAndSaveVtk (const string caseName, bool shouldSaveStructured)$/;"	f
readChar	microflowTools.cpp	/^void readChar(istream & inputStream, const char requiredChar)$/;"	f	namespace:microflow
readDataArray	ReaderVtk.hh	/^readDataArray (vtkXMLDataElement * dataElements, std::string name, unsigned nValues)$/;"	f	class:microflow::ReaderVtkBase
readElement	BoundaryAtLocations.cpp	/^readElement (const string & elementName, istream & stream)$/;"	f	class:BoundaryAtLocations
readElement	BoundaryDescription.cpp	/^readElement (const string & elementName, istream & stream)$/;"	f	class:BoundaryDescription
readElement	ColorAssignment.cpp	/^readElement (const string & elementName, istream & stream)$/;"	f	class:microflow::ColorAssignment
readFileContents	fileUtils.cpp	/^std::string readFileContents (const std::string & filePath)$/;"	f	namespace:microflow
readNodeLayout	ReaderVtk.cpp	/^readNodeLayout (NodeLayout & nodeLayout)$/;"	f	class:ReaderVtkImage
readSkeleton	ReaderVtk.hh	/^readSkeleton (Argument & argument, Reader reader)$/;"	f	class:microflow::ReaderVtkBase
readTiledLattice	ReaderVtk.hh	/^readTiledLattice$/;"	f	class:microflow::ReaderVtkBase
read_conf_file	read_config.rb	/^def read_conf_file( f_name ) $/;"	f
read_config_rb	RubyScripts.hpp	/^const char * read_config_rb =$/;"	v
rebuildBoundaryNodes	ExpandedNodeLayout.cpp	/^rebuildBoundaryNodes (const Settings & settings)$/;"	f	class:microflow::ExpandedNodeLayout
recalculateCoefficients	Settings.hh	/^recalculateCoefficients()$/;"	f	class:microflow::Settings
registerIstream	ReaderVtk.hh	/^registerIstream (std::istream & is)$/;"	f	class:microflow::ReaderVtkBase
registerOstream	WriterVtk.hh	/^registerOstream (std::ostream & os)$/;"	f	class:microflow::WriterVtkBase
registerOstream	vtkTest.cc	/^		void registerOstream (ostream & os) $/;"	f	class:MyImageDataWriter
registerSharedU	NodeFromTile.hh	/^registerSharedU $/;"	f	class:microflow::NODE_FROM_TILE_COPY
registerSigIntHandler	apps/microflow.cpp	/^void registerSigIntHandler()$/;"	f
removeDirectory	fileUtils.cpp	/^void removeDirectory( const string directoryPath )$/;"	f	namespace:microflow
removeRedundantCheckpoints	Simulation.cpp	/^removeRedundantCheckpoints()$/;"	f	class:microflow::Simulation
removeRedundantFiles	Simulation.cpp	/^removeRedundantFiles( const string directoryPath,$/;"	f	class:microflow::Simulation
removeRedundantVtkFiles	Simulation.cpp	/^removeRedundantVtkFiles()$/;"	f	class:microflow::Simulation
requiredVelocityRelativeError_	Settings.hpp	/^		double requiredVelocityRelativeError_ ;$/;"	m	class:microflow::Settings
reset	PerformanceMeter.hh	/^reset()$/;"	f	class:microflow::PerformanceMeter::Measure
resetPointId	ReaderVtk.hh	/^resetPointId()$/;"	f	class:microflow::ReaderVtkImage
resetPointId	ReaderVtk.hh	/^resetPointId()$/;"	f	class:microflow::ReaderVtkUnstructured
resize	LinearizedMatrix.hh	/^resize( const Size & size, const T & defaultValue )$/;"	f	class:microflow::LINEARIZED_MATRIX
resizeWithContent	LinearizedMatrix.hh	/^resizeWithContent( const Size & newSize, const T & edgeValue )$/;"	f	class:microflow::LINEARIZED_MATRIX
resizeWithContent	NodeLayout.cpp	/^resizeWithContent( const Size & newSize )$/;"	f	class:microflow::NodeLayout
restoreBoundaryNodes	NodeLayout.cpp	/^restoreBoundaryNodes(const ColoredPixelClassificator & coloredPixelClassificator,$/;"	f	class:microflow::NodeLayout
reynoldsNumber_	Settings.hpp	/^		double reynoldsNumber_ ;$/;"	m	class:microflow::Settings
rho	NodeCalculator.hh	1478;"	d
rho	NodeCalculator.hh	869;"	d
rho	NodeCalculatorTest.cc	/^		HD double & rho() $/;"	f	class:TestNode
rho	NodeFromTile.hh	/^rho()$/;"	f	class:microflow::NODE_FROM_TILE_COPY
rho	NodeFromTile.hh	/^rho()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
rho	NodeFromTile.hh	/^rho()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
rho	Simulation.hpp	/^				double rho ;$/;"	m	struct:microflow::Simulation::NodeLB
rho	Tile.hh	/^rho()$/;"	f	class:microflow::TILE_BASE
rho0	NodeFromTile.hh	/^rho0()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
rho0	NodeFromTile.hh	/^rho0()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
rho0	Tile.hh	/^rho0()$/;"	f	class:microflow::TILE_BASE
rho0LB_	Calculator.hpp	/^		DataType rho0LB_ ;$/;"	m	class:microflow::Calculator
rhoB	NodeCalculator.hh	1479;"	d
rhoB	NodeCalculator.hh	870;"	d
rhoBoundary	NodeCalculatorTest.cc	/^		HD double & rhoBoundary() $/;"	f	class:TestNode
rhoBoundary	NodeFromTile.hh	/^rhoBoundary()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
rhoBoundary	NodeFromTile.hh	/^rhoBoundary()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
rhoBoundary	Simulation.hpp	/^				double rhoBoundary ;$/;"	m	struct:microflow::Simulation::NodeLB
rhoBoundary	Tile.hh	/^rhoBoundary()$/;"	f	class:microflow::TILE_BASE
rhoBoundaryPhysical	ModificationRhoU.hpp	/^		std::vector <ModificationRho> rhoBoundaryPhysical ;$/;"	m	class:microflow::ModificationRhoU
rhoBoundary_	NodeCalculatorTest.cc	/^		double rhoBoundary_ ;$/;"	m	class:TestNode	file:
rhoPhysical	ModificationRhoU.hpp	/^		std::vector <ModificationRho> rhoPhysical ;$/;"	m	class:microflow::ModificationRhoU
rho_	NodeCalculatorTest.cc	/^		double rho_ ;$/;"	m	class:TestNode	file:
rho_	NodeFromTile.hpp	/^		typename Tile::DataTypeType rho_ ;     $/;"	m	class:microflow::NodeFromTile
rsDirections	Direction.hpp	/^Direction::D constexpr rsDirections[] = {O, E, N, W, S, T, B, NE, NW, SW, SE, ET, EB, WB, WT, NT, NB, SB, ST } ;$/;"	m	namespace:microflow
rubyException	RubyInterpreter.cpp	/^} rubyException ;$/;"	m	namespace:microflow	typeref:class:microflow::RubyException	file:
run	Simulation.cpp	/^run()$/;"	f	class:microflow::Simulation
runScript	MRubyInterpreter.cpp	/^    runScript (const string& code)$/;"	f	class:microflow::MRubyInterpreter
runScript	RubyInterpreter.cpp	/^runScript(const char * script)$/;"	f	class:microflow::RubyInterpreter
safeGetNodeType	NodeLayout.hh	/^safeGetNodeType( Coordinates coordinates ) const$/;"	f	class:microflow::NodeLayout
saveCPUToVtkFile	SimulationEngine.hh	/^saveCPUToVtkFile( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
saveCPUtoCheckpoint	SimulationEngine.hh	/^saveCPUtoCheckpoint( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_BASE
saveCheckpoint	Simulation.cpp	/^saveCheckpoint( unsigned stepNumber )$/;"	f	class:microflow::Simulation
saveCheckpoint	SimulationEngine.hh	/^saveCheckpoint( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
saveCheckpoint	SimulationEngine.tcc	/^saveCheckpoint( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
saveToPngFile	NodeLayoutWriter.cpp	/^saveToPngFile( const NodeLayout & nodeLayout, std::string fileName )$/;"	f	class:microflow::NodeLayoutWriter
saveToVolFile	NodeLayoutWriter.cpp	/^saveToVolFile( const NodeLayout & nodeLayout, std::string fileName )$/;"	f	class:microflow::NodeLayoutWriter
saveToVolFile	TileLayout.cpp	/^saveToVolFile( std::string fileName ) const$/;"	f	class:microflow::TileLayout
saveToVolStream	NodeLayoutWriter.cpp	/^saveToVolStream( const NodeLayout & nodeLayout, std::ostream & stream )$/;"	f	class:microflow::NodeLayoutWriter
saveVtk	Simulation.cpp	/^saveVtk( unsigned stepNumber )$/;"	f	class:microflow::Simulation
saveVtk	SimulationEngine.hh	/^saveVtk( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION
saveVtk	SimulationEngine.tcc	/^saveVtk( unsigned stepNumber, const Settings & settings )$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
saveVtk	Writer.hh	/^saveVtk (const Settings & settings, const std::string & filePath) const$/;"	f	class:microflow::WRITER
saveVtkHelper	Writer.hh	/^saveVtkHelper $/;"	f	class:microflow::WRITER
saveVtkToStream	WriterTest.cc	/^saveVtkToStream$/;"	f	file:
set	BitSet.hh	/^set (size_t pos)$/;"	f	class:microflow::BitSet
setBaseType	NodeType.hh	/^setBaseType( NodeBaseType nodeBaseType )$/;"	f	class:microflow::NodeType
setBoundaryDefinitionIndex	NodeType.hh	/^setBoundaryDefinitionIndex( unsigned char boundaryDefinitionIndex )$/;"	f	class:microflow::NodeType
setBoundaryDefinitions	NodeLayout.hh	/^setBoundaryDefinitions (BoundaryDefinitions boundaryDefinitions)$/;"	f	class:microflow::NodeLayout
setBoundaryNodes	ClassificatorBoundaryAtLocation.cpp	/^setBoundaryNodes (NodeLayout & nodeLayout)$/;"	f	class:ClassificatorBoundaryAtLocation
setCharacteristicLengthLB	Settings.hh	/^setCharacteristicLengthLB( double lengthLB )$/;"	f	class:microflow::Settings
setCharacteristicLengthPhysical	Settings.hh	/^setCharacteristicLengthPhysical( double lengthPhys )$/;"	f	class:microflow::Settings
setCharacteristicVelocityPhysical	Settings.hh	/^setCharacteristicVelocityPhysical( double velocityPhys )$/;"	f	class:microflow::Settings
setCoordinate	PackedDirectionVector.hh	/^setCoordinate( unsigned index, char value \/* -1, 0, +1  only *\/ )$/;"	f	class:microflow::PackedDirectionVector
setEdgeNodeType	PackedNodeNormalSet.hh	/^setEdgeNodeType( enum PackedNodeNormalSet::EdgeNodeType edgeNodeType )$/;"	f	class:microflow::PackedNodeNormalSet
setGeometryOrigin	Settings.hh	/^setGeometryOrigin (UniversalCoordinates<double> origin)$/;"	f	class:microflow::Settings
setInitialVelocityLB	Settings.hh	/^setInitialVelocityLB( Axis axis, double uLB ) $/;"	f	class:microflow::Settings
setInitialVolumetricMassDensityLB	Settings.hh	/^setInitialVolumetricMassDensityLB( double rhoLB )$/;"	f	class:microflow::Settings
setInitialVolumetricMassDensityPhysical	Settings.hh	/^setInitialVolumetricMassDensityPhysical( double rhoPhys )$/;"	f	class:microflow::Settings
setKinematicViscosityPhysical	Settings.hh	/^setKinematicViscosityPhysical( double nuPhys )$/;"	f	class:microflow::Settings
setNTotalTiles	TilingStatistic.cpp	/^setNTotalTiles( size_t nTotalTiles )$/;"	f	class:microflow::TilingStatistic
setNodeBaseType	MRubyInterpreter.cpp	/^    static mrb_value setNodeBaseType (mrb_state * state, mrb_value self)  \/\/mrb_value x, mrb_value y, mrb_value z, mrb_value baseType$/;"	f	namespace:microflow
setNodeBaseType	RubyInterpreter.cpp	/^static VALUE setNodeBaseType (VALUE self, VALUE x, VALUE y, VALUE z, VALUE baseType)$/;"	f	namespace:microflow
setNodePlacementModifier	MRubyInterpreter.cpp	/^    static mrb_value setNodePlacementModifier (mrb_state * state, mrb_value self)$/;"	f	namespace:microflow
setNodePlacementModifier	RubyInterpreter.cpp	/^static VALUE setNodePlacementModifier (VALUE self, VALUE x, VALUE y, VALUE z, $/;"	f	namespace:microflow
setNodeRhoBoundaryPhysical	RubyInterpreter.cpp	/^static VALUE setNodeRhoBoundaryPhysical (VALUE self, VALUE x, VALUE y, VALUE z, $/;"	f	namespace:microflow
setNodeRhoPhysical	RubyInterpreter.cpp	/^static VALUE setNodeRhoPhysical (VALUE self, VALUE x, VALUE y, VALUE z, $/;"	f	namespace:microflow
setNodeType	NodeLayout.hh	/^setNodeType( Coordinates coordinates, NodeType nodeType)$/;"	f	class:microflow::NodeLayout
setNodeType	NodeLayout.hh	/^setNodeType( size_t x, size_t y, size_t z, NodeType nodeType)$/;"	f	class:microflow::NodeLayout
setNodeUBoundaryPhysical	RubyInterpreter.cpp	/^static VALUE setNodeUBoundaryPhysical (VALUE self, VALUE x, VALUE y, VALUE z, $/;"	f	namespace:microflow
setNodeUPhysical	RubyInterpreter.cpp	/^static VALUE setNodeUPhysical (VALUE self, VALUE x, VALUE y, VALUE z, $/;"	f	namespace:microflow
setNodes	modifyNodeLayout.rb	/^def setNodes( coordinates, arguments={} )                                              \\n$/;"	f	class:box
setPixel	Image.hh	/^setPixel (size_t x, size_t y, const Pixel & p)$/;"	f	class:microflow::Image
setPlacementModifier	NodeType.hh	/^setPlacementModifier( PlacementModifier placementModifier )$/;"	f	class:microflow::NodeType
setTau	Settings.hh	/^setTau( double tau )$/;"	f	class:microflow::Settings
setTileGridSize	TilingStatistic.cpp	/^setTileGridSize( Size size ) $/;"	f	class:microflow::TilingStatistic
setValidCopyID	TiledLattice.hh	/^setValidCopyID (ValidCopyID validCopyID)$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
setValidCopyIDToF	TiledLattice.hh	/^setValidCopyIDToF()$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
setValidCopyIDToFPost	TiledLattice.hh	/^setValidCopyIDToFPost()$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
setValidCopyIDToNone	TiledLattice.hh	/^setValidCopyIDToNone()$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
setValue	LinearizedMatrix.hh	/^setValue( const Coordinates & coordinates, const T & value ) $/;"	f	class:microflow::LINEARIZED_MATRIX_BASE
setVector3D	PackedDirectionVector.hh	/^setVector3D( unsigned vectorIndex, V vector3D )$/;"	f	class:microflow::PackedDirectionVector
setX	Coordinates.hh	/^setX( T x )$/;"	f	class:microflow::UniversalCoordinates
setX	Direction.hh	/^setX( int value )$/;"	f	class:microflow::Direction
setY	Coordinates.hh	/^setY( T y )$/;"	f	class:microflow::UniversalCoordinates
setY	Direction.hh	/^setY( int value )$/;"	f	class:microflow::Direction
setZ	Coordinates.hh	/^setZ( T z )$/;"	f	class:microflow::UniversalCoordinates
setZ	Direction.hh	/^setZ( int value )$/;"	f	class:microflow::Direction
set_	BitSet.hpp	/^		unsigned int set_ ;$/;"	m	class:microflow::BitSet
settings_	Simulation.hpp	/^		std::unique_ptr< Settings                  > settings_                  ;$/;"	m	class:microflow::Simulation
settings_	TiledLattice.hpp	/^		const Settings & settings_ ;$/;"	m	class:microflow::TiledLattice
shouldComputeErrorInThisStep	Settings.hh	/^shouldComputeErrorInThisStep( unsigned stepNumber ) const$/;"	f	class:microflow::Settings
shouldCopyF	kernelTileGatherProcessBoundaryCollide.tcc	/^constexpr bool shouldCopyF (DataStorageMethod dataStorageMethod)$/;"	f	namespace:microflow
shouldEnableUnsafeOptimizations	Optimization.hpp	/^		HD static constexpr bool shouldEnableUnsafeOptimizations() { return false ; }$/;"	f	class:microflow::NoOptimizations
shouldEnableUnsafeOptimizations	Optimization.hpp	/^		HD static constexpr bool shouldEnableUnsafeOptimizations() { return true ; }$/;"	f	class:microflow::UnsafeOptimizations
shouldFBeEqual	NodeFromTileTest.cc	/^bool shouldFBeEqual <TileDataArrangement::OPT_1> (Direction direction)$/;"	f
shouldFBeEqual	NodeFromTileTest.cc	/^bool shouldFBeEqual <TileDataArrangement::XYZ> (Direction direction __attribute__((unused)))$/;"	f
shouldSaveCheckpointInThisStep	Settings.hh	/^shouldSaveCheckpointInThisStep( unsigned stepNumber ) const$/;"	f	class:microflow::Settings
shouldSaveMassFlowFractions	CheckpointSettings.hpp	/^		bool shouldSaveMassFlowFractions      () const { return true ; }$/;"	f	class:microflow::CheckpointSettings
shouldSaveMassFlowFractions	Settings.hh	/^shouldSaveMassFlowFractions() const$/;"	f	class:microflow::Settings
shouldSaveMassFlowFractions_	Settings.hpp	/^		bool shouldSaveMassFlowFractions_ ;$/;"	m	class:microflow::Settings
shouldSaveNodes	CheckpointSettings.hpp	/^		bool shouldSaveNodes                  () const { return true ; }$/;"	f	class:microflow::CheckpointSettings
shouldSaveNodes	Settings.hh	/^shouldSaveNodes() const$/;"	f	class:microflow::Settings
shouldSaveNodes_	Settings.hpp	/^		bool shouldSaveNodes_ ;$/;"	m	class:microflow::Settings
shouldSavePressurePhysical	CheckpointSettings.hpp	/^		bool shouldSavePressurePhysical() const { return false ; }$/;"	f	class:microflow::CheckpointSettings
shouldSavePressurePhysical	Settings.hh	/^shouldSavePressurePhysical() const$/;"	f	class:microflow::Settings
shouldSavePressurePhysical_	Settings.hpp	/^		bool shouldSavePressurePhysical_ ;$/;"	m	class:microflow::Settings
shouldSaveVelocityLB	CheckpointSettings.hpp	/^		bool shouldSaveVelocityLB             () const { return true ; }$/;"	f	class:microflow::CheckpointSettings
shouldSaveVelocityLB	Settings.hh	/^shouldSaveVelocityLB() const$/;"	f	class:microflow::Settings
shouldSaveVelocityLB_	Settings.hpp	/^		bool shouldSaveVelocityLB_ ;$/;"	m	class:microflow::Settings
shouldSaveVelocityPhysical	CheckpointSettings.hpp	/^		bool shouldSaveVelocityPhysical() const { return false ; }$/;"	f	class:microflow::CheckpointSettings
shouldSaveVelocityPhysical	Settings.hh	/^shouldSaveVelocityPhysical() const$/;"	f	class:microflow::Settings
shouldSaveVelocityPhysical_	Settings.hpp	/^		bool shouldSaveVelocityPhysical_ ;$/;"	m	class:microflow::Settings
shouldSaveVolumetricMassDensityLB	CheckpointSettings.hpp	/^		bool shouldSaveVolumetricMassDensityLB() const { return true ; }$/;"	f	class:microflow::CheckpointSettings
shouldSaveVolumetricMassDensityLB	Settings.hh	/^shouldSaveVolumetricMassDensityLB() const$/;"	f	class:microflow::Settings
shouldSaveVolumetricMassDensityLB_	Settings.hpp	/^		bool shouldSaveVolumetricMassDensityLB_ ;$/;"	m	class:microflow::Settings
shouldSaveVtkInThisStep	Settings.hh	/^shouldSaveVtkInThisStep( unsigned stepNumber ) const$/;"	f	class:microflow::Settings
shouldStop_	Simulation.hpp	/^		bool shouldStop_ ; \/\/TODO: updated from signal handler, avoid race conditions.$/;"	m	class:microflow::Simulation
simulationDirectoryPath_	Settings.hpp	/^		std::string simulationDirectoryPath_ ; $/;"	m	class:microflow::Settings
simulationEngine_	Simulation.hpp	/^		std::unique_ptr< SimulationEngine          > simulationEngine_          ;$/;"	m	class:microflow::Simulation
simulationPtr	apps/microflow.cpp	/^microflow::Simulation * simulationPtr = NULL ;$/;"	v
size	Storage.hh	/^size() const$/;"	f	class:microflow::StorageInKernel
sizeInBits	microflowTools.hpp	/^constexpr unsigned sizeInBits(unsigned n, unsigned p = 0) {$/;"	f	namespace:microflow
size_	LinearizedMatrix.hpp	/^		Size       size_ ;$/;"	m	class:microflow::LinearizedMatrixBase
size_	TileLayout.hpp	/^		Size size_ ;$/;"	m	class:microflow::TileLayoutBase
slanting	Direction.cpp	/^constexpr Direction::D Direction::slanting[] ;$/;"	m	class:microflow::Direction	file:
slanting	Direction.hpp	/^		static constexpr D slanting[] = { SLANTING } ;$/;"	m	class:microflow::Direction
solidFluidAssignments_	ColoredPixelClassificator.hpp	/^		std::vector< ColorAssignment > solidFluidAssignments_ ;$/;"	m	class:microflow::ColoredPixelClassificator
solidNeighborMask	NodeCalculatorTest.cc	/^		HD SolidNeighborMask & solidNeighborMask()$/;"	f	class:TestNode
solidNeighborMask	NodeFromTile.hh	/^solidNeighborMask()$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
solidNeighborMask	NodeFromTile.hh	/^solidNeighborMask()$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
solidNeighborMask_	NodeCalculatorTest.cc	/^		SolidNeighborMask solidNeighborMask_ ;$/;"	m	class:TestNode	file:
solidNeighborMask_	SolidNeighborMask.hpp	/^		BitSet solidNeighborMask_ ; \/\/ TODO: BitSet<29>$/;"	m	class:microflow::SolidNeighborMask
solidNeighborMasks_	ExpandedNodeLayout.hpp	/^		LinearizedMatrix< SolidNeighborMask   > solidNeighborMasks_ ;$/;"	m	class:microflow::ExpandedNodeLayout
solidNeighborMasks_	Tile.hpp	/^		Storage< SolidNeighborMask > & solidNeighborMasks_ ;$/;"	m	class:microflow::TileBase
solidNeighborMasks_	TiledLattice.hpp	/^		StorageInKernel< SolidNeighborMask > solidNeighborMasks_ ;$/;"	m	class:microflow::TiledLattice
solidNeighborMasks_	TiledLattice.hpp	/^		StorageOnCPU< SolidNeighborMask > solidNeighborMasks_ ;$/;"	m	class:microflow::TiledLattice
solidNeighborMasks_	TiledLattice.hpp	/^		StorageOnGPU< SolidNeighborMask > solidNeighborMasks_ ;$/;"	m	class:microflow::TiledLattice
start	PerformanceMeter.hh	/^start()$/;"	f	class:microflow::PerformanceMeter
start	PerformanceMeter.hh	/^start()$/;"	f	class:microflow::PerformanceMeter::Measure
state_	MRubyInterpreter.hpp	/^        mrb_state* state_ = nullptr ;$/;"	m	class:microflow::MRubyInterpreter
stop	PerformanceMeter.hh	/^stop()$/;"	f	class:microflow::PerformanceMeter
stop	PerformanceMeter.hh	/^stop()$/;"	f	class:microflow::PerformanceMeter::Measure
stop	Simulation.cpp	/^stop()$/;"	f	class:microflow::Simulation
straight	Direction.cpp	/^constexpr Direction::D Direction::straight[] ;$/;"	m	class:microflow::Direction	file:
straight	Direction.hpp	/^		static constexpr D straight[] = { STRAIGHT } ;$/;"	m	class:microflow::Direction
swap	gpuAlgorithms.hh	/^void swap (double & val1, double & val2)$/;"	f	namespace:microflow
swapFPostWithF	LatticeCalculator.tcc	/^swapFPostWithF (TiledLatticeType & tiledLattice)$/;"	f	class:microflow::LATTICE_CALCULATOR_GPU
swapWithTmp	NodeCalculator.hh	/^swapWithTmp (DataType & v1, DataType & v2, volatile DataType & tmp)$/;"	f	namespace:microflow
switchValidCopyID	TiledLattice.hh	/^switchValidCopyID()$/;"	f	class:microflow::TiledLatticeBaseTwoCopies
sync	gzstream.cpp	/^int gzstreambuf::sync() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
synchronizeCPUCopy	SimulationEngine.tcc	/^synchronizeCPUCopy()$/;"	f	class:microflow::SIMULATION_ENGINE_SPECIALIZATION_GPU
tau_	Calculator.hpp	/^		DataType tau_ ;$/;"	m	class:microflow::Calculator
tau_	Settings.hpp	/^		double tau_ ;$/;"	m	class:microflow::Settings
temporaryMarkBoundaryNodes	NodeLayout.hh	/^temporaryMarkBoundaryNodes()$/;"	f	class:microflow::NodeLayout
temporaryMarkUndefinedBoundaryNodesAndCovers	NodeLayout.hh	/^temporaryMarkUndefinedBoundaryNodesAndCovers()$/;"	f	class:microflow::NodeLayout
test	BitSet.hh	/^test (size_t pos) const$/;"	f	class:microflow::BitSet
test	MRubyInterpreter.cpp	/^    void test ()$/;"	f	namespace:microflow
testComputeRhoForBB2Nodes	LatticeCalculatorTest.cc	/^void testComputeRhoForBB2Nodes()$/;"	f
testCopyTileLayoutGPU	TileLayoutTest.cc	/^void testCopyTileLayoutGPU( TileLayout<StorageOnCPU> & tileLayout )$/;"	f
testCornerTile	TileLayoutTest.cc	/^void testCornerTile( Coordinates corner )$/;"	f
testGetNode_simulation_1	SimulationTest.cc	/^void testGetNode_simulation_1(const std::string casePath )$/;"	f
testLoadCopyOfNodeTypes	kernelTileGatherProcessBoundaryCollideTest.cc	/^void testLoadCopyOfNodeTypes()$/;"	f
testLoadCopyOfTileMap	kernelTileGatherProcessBoundaryCollideTest.cc	/^void testLoadCopyOfTileMap()					$/;"	f
testLoopIterator	TileLayoutTest.cc	/^void testLoopIterator( TileLayout<StorageOnCPU> & tileLayout, size_t expectedCounter )$/;"	f
testNodeFromTileAccess	TileTest.cc	/^void testNodeFromTileAccess ()$/;"	f	file:
testNodeFromTileArrayVsNodeCPU	NodeFromTileTest.cc	/^void testNodeFromTileArrayVsNodeCPU()$/;"	f	file:
testNodeFromTilePointersAccessorsCPU	NodeFromTileTest.cc	/^void testNodeFromTilePointersAccessorsCPU()$/;"	f	file:
testNodeLayoutWriter	NodeLayoutWriterTest.cc	/^void testNodeLayoutWriter( unsigned depth )$/;"	f
testOutDirectory	TestPath.hpp	/^const std::string testOutDirectory = "test_data\/output\/" ;$/;"	v
testPropagateFullSceneGPU	LatticeCalculatorTest.cc	/^void testPropagateFullSceneGPU( Size sceneSizeInTiles )$/;"	f	file:
testPropagateGPU	LatticeCalculatorTest.cc	/^void testPropagateGPU( TileLayout<StorageOnCPU> & tileLayout, $/;"	f	file:
testPropagateTilesFluidGPU_D3Q19_NE	LatticeCalculatorTest.cc	/^void testPropagateTilesFluidGPU_D3Q19_NE()$/;"	f	file:
testPropagateTilesFluidGPU_D3Q19_allStraight	LatticeCalculatorTest.cc	/^void testPropagateTilesFluidGPU_D3Q19_allStraight()$/;"	f	file:
testPropagateTwoTilesGPU	LatticeCalculatorTest.cc	/^void testPropagateTwoTilesGPU( Coordinates baseTile, Coordinates neighborTile )$/;"	f	file:
testRandomNodeLayout	NodeLayoutTest.cc	/^void testRandomNodeLayout( unsigned oldWidth, unsigned oldHeight, unsigned oldDepth,$/;"	f
testReaderVtk	ReaderTest.cc	/^void testReaderVtk (NodeLayout & nodeLayout, string testName)$/;"	f
testResultGPU	BitSetTest.cc	/^static __device__ bool testResultGPU ;$/;"	v	file:
testSimulationGeometryModifiers	SimulationTest.cc	/^void testSimulationGeometryModifiers (const std::string engine)$/;"	f
testStorageCopy	StorageTest.cc	/^void testStorageCopy()$/;"	f
testTileGetFPostPtrCPU	TileTest.cc	/^void testTileGetFPostPtrCPU()$/;"	f
testTileGetFPtrCPU	TileTest.cc	/^void testTileGetFPtrCPU()$/;"	f
testTileNoOverlapValuesSingleTileCPU	TileTest.cc	/^void testTileNoOverlapValuesSingleTileCPU()$/;"	f
testTileNoOverlapValuesTwoTilesCPU	TileTest.cc	/^void testTileNoOverlapValuesTwoTilesCPU()$/;"	f
testTileVelocityArrayCPU	TileTest.cc	/^void testTileVelocityArrayCPU()$/;"	f
testTiledLatticeGPU	TiledLatticeTest.cc	/^void testTiledLatticeGPU()$/;"	f
testTiledLatticeGetTileCPU	TiledLatticeTest.cc	/^void testTiledLatticeGetTileCPU()$/;"	f
testTiledLatticeOperatorEqCPU	TiledLatticeTest.cc	/^void testTiledLatticeOperatorEqCPU()$/;"	f
testTiledLatticeSingleTileCPU	TiledLatticeTest.cc	/^void testTiledLatticeSingleTileCPU()$/;"	f
testTiledLatticeSingleTileGPU	TiledLatticeTest.cc	/^void testTiledLatticeSingleTileGPU()$/;"	f
throwException	Exceptions.hpp	/^throwException( const char * str, const char * file = __FILE__, int line = __LINE__ )$/;"	f	namespace:microflow
throwException	Exceptions.hpp	/^throwException( const std::string & str, const char * file = __FILE__, int line = __LINE__ )$/;"	f	namespace:microflow
tileDataArrangement	SimulationEngine.hpp	/^		static constexpr TileDataArrangement tileDataArrangement = TileDataArrangement::OPT_1 ;$/;"	m	class:microflow::SimulationEngineSpecializationBase
tileDataArrangement	Tile.hpp	/^		static constexpr TileDataArrangement tileDataArrangement = DataArrangement ;$/;"	m	class:microflow::TileBase
tileGatherProcessBoundaryCollide	kernelTileGatherProcessBoundaryCollide.tcc	/^tileGatherProcessBoundaryCollide$/;"	f	namespace:microflow
tileGridSize_	TilingStatistic.hpp	/^		Size tileGridSize_ ;$/;"	m	class:microflow::TilingStatistic
tileIndex_	NodeFromTile.hpp	/^		unsigned tileIndex_ ;$/;"	m	class:microflow::NodeFromTile
tileIndex_	TileLayout.hpp	/^				TileIndex tileIndex_ ;$/;"	m	class:microflow::TileLayoutBase::NonEmptyTile
tileLayoutBase_	TileLayout.hpp	/^				TileLayoutBase & tileLayoutBase_ ;$/;"	m	class:microflow::TileLayoutBase::NonEmptyTile
tileLayoutCPU_	TileLayout.hpp	/^		TileLayout< StorageOnCPU > & tileLayoutCPU_ ; \/\/ TODO: maybe unnecessary ?$/;"	m	class:microflow::TileLayout
tileLayout_	Simulation.hpp	/^		std::unique_ptr< TileLayout<StorageOnCPU>  > tileLayout_                ;$/;"	m	class:microflow::Simulation
tileLayout_	Tile.hpp	/^		const TileLayout<Storage> & tileLayout_ ;$/;"	m	class:microflow::TileBase
tileLayout_	TiledLattice.hpp	/^		TileLayout< StorageOnGPU > & tileLayout_ ;$/;"	m	class:microflow::TiledLattice
tileLayout_	TiledLattice.hpp	/^		TileLayout<StorageInKernel> tileLayout_ ;$/;"	m	class:microflow::TiledLattice
tileLayout_	TiledLattice.hpp	/^		TileLayout<StorageOnCPU> & tileLayout_ ;$/;"	m	class:microflow::TiledLattice
tileMap_	TileLayout.hpp	/^		LinearizedMatrix<unsigned int, Storage> tileMap_ ;$/;"	m	class:microflow::TileLayoutBase
tile_	NodeFromTile.hpp	/^		Tile & tile_ ;$/;"	m	class:microflow::NodeFromTile
tiledAllValues_	NodeFromTile.hpp	/^		DataTypeType        * tiledAllValues_ ;$/;"	m	class:microflow::NodeFromTile
tiledLatticeCPU_	SimulationEngine.hpp	/^		TiledLatticeTypeCPU tiledLatticeCPU_ ;$/;"	m	class:microflow::SimulationEngineSpecializationBase
tiledLatticeCPU_	TiledLattice.hpp	/^		TiledLatticeCPU & tiledLatticeCPU_ ; \/\/ TODO: maybe unnecessary ?$/;"	m	class:microflow::TiledLattice
tiledLatticeGPU_	SimulationEngine.hpp	/^		TiledLatticeTypeGPU tiledLatticeGPU_ ;$/;"	m	class:microflow::SimulationEngineSpecialization
tiledLattice_	Writer.hpp	/^		TiledLatticeType & tiledLattice_ ;$/;"	m	class:microflow::Writer
tiledNodeNormals_	NodeFromTile.hpp	/^		PackedNodeNormalSet * tiledNodeNormals_ ;$/;"	m	class:microflow::NodeFromTile
tiledNodeTypes	kernelTileGatherProcessBoundaryCollide.tcc	/^	NodeType * __restrict__ tiledNodeTypes,$/;"	m	namespace:microflow	file:
tiledNodeTypes_	NodeFromTile.hpp	/^		NodeType            * tiledNodeTypes_ ;$/;"	m	class:microflow::NodeFromTile
tiledSolidNeighborMasks_	NodeFromTile.hpp	/^		SolidNeighborMask   * tiledSolidNeighborMasks_ ;$/;"	m	class:microflow::NodeFromTile
tilesX0_	TileLayout.hpp	/^		Storage< size_t > tilesX0_ ;$/;"	m	class:microflow::TileLayoutBase
tilesY0_	TileLayout.hpp	/^		Storage< size_t > tilesY0_ ;$/;"	m	class:microflow::TileLayoutBase
tilesZ0_	TileLayout.hpp	/^		Storage< size_t > tilesZ0_ ;$/;"	m	class:microflow::TileLayoutBase
toAxis	Axis.hpp	/^enum Axis toAxis(unsigned i)$/;"	f	class:microflow::Axis
toPercentage	microflowTools.hpp	/^double toPercentage( double value )$/;"	f	namespace:microflow
toString	Direction.hh	/^toString( const Direction & direction )$/;"	f	namespace:microflow
toString	NodeBaseType.cpp	/^const std::string & toString( NodeBaseType nodeBaseType )$/;"	f	namespace:microflow
toString	NodeType.hh	/^toString (PlacementModifier placementModifier)$/;"	f	namespace:microflow
toString	TypeNamesExtractor.hh	/^const std::string toString<double> ()$/;"	f	namespace:microflow::__anon2
toString	TypeNamesExtractor.hh	/^const std::string toString<float> ()$/;"	f	namespace:microflow::__anon2
to_s	modifyNodeLayout.rb	/^	def to_s           \\n$/;"	f	class:Coordinates
to_s	modifyNodeLayout.rb	/^	def to_s \\n$/;"	f	class:box.Size
to_s	modifyNodeLayout.rb	/^	def to_s()$/;"	f	class:box.Node
transformPressurePhysicalToVolumetricMassDensityLB	Settings.hh	/^transformPressurePhysicalToVolumetricMassDensityLB( double pressurePhysical ) const$/;"	f	class:microflow::Settings
transformVelocityLBToPhysical	CheckpointSettings.hpp	/^		double transformVelocityLBToPhysical (double) const$/;"	f	class:microflow::CheckpointSettings
transformVelocityLBToPhysical	Settings.hh	/^transformVelocityLBToPhysical( double velocityLB ) const$/;"	f	class:microflow::Settings
transformVelocityPhysicalToLB	Settings.hh	/^transformVelocityPhysicalToLB( double velocityPhysical ) const$/;"	f	class:microflow::Settings
transformVolumetricMassDensityLBToPressurePhysical	CheckpointSettings.hpp	/^		double transformVolumetricMassDensityLBToPressurePhysical (double) const$/;"	f	class:microflow::CheckpointSettings
transformVolumetricMassDensityLBToPressurePhysical	Settings.hh	/^transformVolumetricMassDensityLBToPressurePhysical( double volumetricMassDensityLB ) const$/;"	f	class:microflow::Settings
typeName	RubyInterpreter.cpp	/^template <> const std::string typeName<bool>        () { return "bool"   ; }$/;"	f	namespace:microflow
typeName	RubyInterpreter.cpp	/^template <> const std::string typeName<double>      () { return "double" ; }$/;"	f	namespace:microflow
typeName	RubyInterpreter.cpp	/^template <> const std::string typeName<std::string> () { return "string" ; }$/;"	f	namespace:microflow
typeName	RubyInterpreter.cpp	/^template <> const std::string typeName<unsigned int>() { return "uint"   ; }$/;"	f	namespace:microflow
u	LatticeCalculator.hh	147;"	d
u	LatticeCalculator.hh	192;"	d
u	NodeCalculatorTest.cc	/^		HD double & u (Axis axis)$/;"	f	class:TestNode
u	NodeFromTile.hh	/^u (Axis axis)$/;"	f	class:microflow::NODE_FROM_TILE_COPY
u	NodeFromTile.hh	/^u (Axis axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
u	NodeFromTile.hh	/^u (unsigned axis)$/;"	f	class:microflow::NODE_FROM_TILE_COPY
u	NodeFromTile.hh	/^u (unsigned axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
u	NodeFromTile.hh	/^u( Axis axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
u	NodeFromTile.hh	/^u( unsigned axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
u	Simulation.hpp	/^				std::vector< double > u ;$/;"	m	struct:microflow::Simulation::NodeLB
u	Tile.hh	/^u( Axis axis )$/;"	f	class:microflow::TILE_BASE
u	Tile.hh	/^u()$/;"	f	class:microflow::TILE_BASE
u0LB_	Calculator.hpp	/^		DataType u0LB_[ LatticeArrangement::getD() ] ;$/;"	m	class:microflow::Calculator
uBoundary	NodeCalculatorTest.cc	/^		HD double & uBoundary (Axis axis )$/;"	f	class:TestNode
uBoundary	NodeFromTile.hh	/^uBoundary (Axis axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
uBoundary	NodeFromTile.hh	/^uBoundary (unsigned axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
uBoundary	NodeFromTile.hh	/^uBoundary( Axis axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
uBoundary	NodeFromTile.hh	/^uBoundary( unsigned axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
uBoundary	Simulation.hpp	/^				std::vector< double > uBoundary ;$/;"	m	struct:microflow::Simulation::NodeLB
uBoundary	Tile.hh	/^uBoundary( Axis axis )$/;"	f	class:microflow::TILE_BASE
uBoundary	Tile.hh	/^uBoundary()$/;"	f	class:microflow::TILE_BASE
uBoundaryPhysical	ModificationRhoU.hpp	/^		std::vector <ModificationU  > uBoundaryPhysical ;$/;"	m	class:microflow::ModificationRhoU
uBoundary_	NodeCalculatorTest.cc	/^		double uBoundary_[3] ;$/;"	m	class:TestNode	file:
uGPU_	NodeFromTile.hpp	/^		typename Tile::DataTypeType (* uGPU_) $/;"	m	class:microflow::NodeFromTile::Tile
uPhysical	ModificationRhoU.hpp	/^		std::vector <ModificationU  > uPhysical ;$/;"	m	class:microflow::ModificationRhoU
uT0	LatticeCalculator.hh	148;"	d
uT0	LatticeCalculator.hh	193;"	d
uT0	NodeFromTile.hh	/^uT0 (Axis axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
uT0	NodeFromTile.hh	/^uT0 (unsigned axis)$/;"	f	class:microflow::NODE_FROM_TILE_POINTERS
uT0	NodeFromTile.hh	/^uT0( Axis axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
uT0	NodeFromTile.hh	/^uT0( unsigned axis )$/;"	f	class:microflow::NODE_FROM_TILE_REFERENCE
uT0	Simulation.hpp	/^				std::vector< double > uT0 ;$/;"	m	struct:microflow::Simulation::NodeLB
uT0	Tile.hh	/^uT0( Axis axis )$/;"	f	class:microflow::TILE_BASE
uT0	Tile.hh	/^uT0()$/;"	f	class:microflow::TILE_BASE
u_	NodeCalculatorTest.cc	/^		double u_[3] ;$/;"	m	class:TestNode	file:
u_	NodeFromTile.hpp	/^		typename Tile::DataTypeType u_ [Tile::LatticeArrangementType::getD()] ;$/;"	m	class:microflow::NodeFromTile
undef_const	read_config.rb	/^def undef_const(c)$/;"	f
underflow	gzstream.cpp	/^int gzstreambuf::underflow() { \/\/ used for input buffer only$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
unpack	TileLayout.hh	/^unpack( TileLayoutBase<Storage>::NonEmptyTile::Iterator iterator ) const$/;"	f	class:microflow::TileLayoutBase::NonEmptyTile
updateTiledLatticeArray	ReaderVtk.hh	/^updateTiledLatticeArray$/;"	f	class:microflow::ReaderVtkBase
usage	apps/stl2vtk.cpp	/^void usage(const char * const name)$/;"	f
ux	NodeCalculator.hh	1472;"	d
ux	NodeCalculator.hh	863;"	d
uxB	NodeCalculator.hh	1475;"	d
uxB	NodeCalculator.hh	866;"	d
uy	NodeCalculator.hh	1473;"	d
uy	NodeCalculator.hh	864;"	d
uyB	NodeCalculator.hh	1476;"	d
uyB	NodeCalculator.hh	867;"	d
uz	NodeCalculator.hh	1474;"	d
uz	NodeCalculator.hh	865;"	d
uzB	NodeCalculator.hh	1477;"	d
uzB	NodeCalculator.hh	868;"	d
validCopyID_	TiledLattice.hpp	/^		ValidCopyID validCopyID_ ;$/;"	m	class:microflow::TiledLatticeBaseTwoCopies
value	ModificationRhoU.hpp	/^					DataType   value ;$/;"	m	class:microflow::ModificationRhoU::Modification
value_	MRubyInterpreter.hpp	/^        mrb_value value_ ;$/;"	m	class:microflow::MRubyInterpreter
velocityX_	BoundaryDefinitions.hpp	/^		std::vector<double> velocityX_ ;$/;"	m	class:microflow::BoundaryDefinitions
velocityY_	BoundaryDefinitions.hpp	/^		std::vector<double> velocityY_ ;$/;"	m	class:microflow::BoundaryDefinitions
velocityZ_	BoundaryDefinitions.hpp	/^		std::vector<double> velocityZ_ ;$/;"	m	class:microflow::BoundaryDefinitions
velocity_	BoundaryDescription.hpp	/^		double velocity_[3] ;$/;"	m	class:microflow::BoundaryDescription
vtkDefaultRhoForBB2Nodes_	Settings.hpp	/^		std::string vtkDefaultRhoForBB2Nodes_ ;$/;"	m	class:microflow::Settings
w	LatticeArrangementD3Q19.cpp	/^constexpr double       LatticeArrangement<3,19>::w[] ;$/;"	m	class:microflow::LatticeArrangement	file:
w	LatticeArrangementD3Q19.hpp	/^		static constexpr double w[19] = { 1.0\/3.0,$/;"	m	class:microflow::LatticeArrangement
wGPU	LatticeArrangementD3Q19Test.cc	/^static __device__ double wGPU ;$/;"	v	file:
write	Settings.cpp	/^	write( ostream & ostr)$/;"	f	class:microflow::Settings
write	WriterVtk.hh	/^write $/;"	f	class:microflow::WriterVtkImage
write	WriterVtk.hh	/^write $/;"	f	class:microflow::WriterVtkUnstructured
write	apps/stl2vtk.cpp	/^		void write $/;"	f	class:WriterVtk
xMax	Cuboid.hpp	/^		unsigned xMax ;$/;"	m	class:microflow::Cuboid
xMin	Cuboid.hpp	/^		unsigned xMin ;$/;"	m	class:microflow::Cuboid
x_	Coordinates.hpp	/^		T x_ ;$/;"	m	class:microflow::UniversalCoordinates
x_	NodeFromTile.hpp	/^		unsigned x_ ; $/;"	m	class:microflow::NodeFromTile
x_	NodeFromTile.hpp	/^		unsigned x_ ;$/;"	m	class:microflow::NodeFromTile
yMax	Cuboid.hpp	/^		unsigned yMax ;$/;"	m	class:microflow::Cuboid
yMin	Cuboid.hpp	/^		unsigned yMin ;$/;"	m	class:microflow::Cuboid
y_	Coordinates.hpp	/^		T y_ ;$/;"	m	class:microflow::UniversalCoordinates
y_	NodeFromTile.hpp	/^		unsigned y_ ; $/;"	m	class:microflow::NodeFromTile
y_	NodeFromTile.hpp	/^		unsigned y_ ;$/;"	m	class:microflow::NodeFromTile
zExpandDepth_	Settings.hpp	/^		unsigned zExpandDepth_ ;$/;"	m	class:microflow::Settings
zMax	Cuboid.hpp	/^		unsigned zMax ;$/;"	m	class:microflow::Cuboid
zMin	Cuboid.hpp	/^		unsigned zMin ;$/;"	m	class:microflow::Cuboid
z_	Coordinates.hpp	/^		T z_ ;$/;"	m	class:microflow::UniversalCoordinates
z_	NodeFromTile.hpp	/^		unsigned z_ ;$/;"	m	class:microflow::NodeFromTile
~BoundaryDescription	BoundaryDescription.hpp	/^		virtual ~BoundaryDescription() {} ;$/;"	f	class:microflow::BoundaryDescription
~ColorAssignment	ColorAssignment.hpp	/^		virtual ~ColorAssignment() {} ;$/;"	f	class:microflow::ColorAssignment
~ColoredPixelClassificator	ColoredPixelClassificator.cpp	/^~ColoredPixelClassificator()$/;"	f	class:microflow::ColoredPixelClassificator
~MRubyInterpreter	MRubyInterpreter.cpp	/^    ~MRubyInterpreter ()$/;"	f	class:microflow::MRubyInterpreter
~PerformanceMeter	PerformanceMeter.hh	/^~PerformanceMeter()$/;"	f	class:microflow::PerformanceMeter
~RubyInterpreter	RubyInterpreter.cpp	/^~RubyInterpreter()$/;"	f	class:microflow::RubyInterpreter
~Settings	Settings.cpp	/^	~Settings()$/;"	f	class:microflow::Settings
~Simulation	Simulation.cpp	/^~Simulation()$/;"	f	class:microflow::Simulation
~SimulationEngine	SimulationEngine.hpp	/^		virtual ~SimulationEngine() {} ;$/;"	f	class:microflow::SimulationEngine
~SimulationEngineSpecialization	SimulationEngine.hpp	/^		virtual ~SimulationEngineSpecialization() {} ;$/;"	f	class:microflow::SimulationEngineSpecialization
~SimulationEngineSpecializationBase	SimulationEngine.hpp	/^		virtual ~SimulationEngineSpecializationBase() {} ;$/;"	f	class:microflow::SimulationEngineSpecializationBase
~gzstreambase	gzstream.cpp	/^gzstreambase::~gzstreambase() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
